// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.8.0
// source: pdpb.proto

package pdpb

import (
	context "context"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	eraftpb "github.com/pingcap/kvproto/proto/kitex_gen/eraftpb"
	_ "github.com/pingcap/kvproto/proto/kitex_gen/github.com/gogo/protobuf/gogoproto"
	metapb "github.com/pingcap/kvproto/proto/kitex_gen/metapb"
	raft_serverpb "github.com/pingcap/kvproto/proto/kitex_gen/raft_serverpb"
	replication_modepb "github.com/pingcap/kvproto/proto/kitex_gen/replication_modepb"
	_ "github.com/pingcap/kvproto/proto/kitex_gen/rustproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ErrorType int32

const (
	ErrorType_OK                   ErrorType = 0
	ErrorType_UNKNOWN              ErrorType = 1
	ErrorType_NOT_BOOTSTRAPPED     ErrorType = 2
	ErrorType_STORE_TOMBSTONE      ErrorType = 3
	ErrorType_ALREADY_BOOTSTRAPPED ErrorType = 4
	ErrorType_INCOMPATIBLE_VERSION ErrorType = 5
	ErrorType_REGION_NOT_FOUND     ErrorType = 6
)

// Enum value maps for ErrorType.
var (
	ErrorType_name = map[int32]string{
		0: "OK",
		1: "UNKNOWN",
		2: "NOT_BOOTSTRAPPED",
		3: "STORE_TOMBSTONE",
		4: "ALREADY_BOOTSTRAPPED",
		5: "INCOMPATIBLE_VERSION",
		6: "REGION_NOT_FOUND",
	}
	ErrorType_value = map[string]int32{
		"OK":                   0,
		"UNKNOWN":              1,
		"NOT_BOOTSTRAPPED":     2,
		"STORE_TOMBSTONE":      3,
		"ALREADY_BOOTSTRAPPED": 4,
		"INCOMPATIBLE_VERSION": 5,
		"REGION_NOT_FOUND":     6,
	}
)

func (x ErrorType) Enum() *ErrorType {
	p := new(ErrorType)
	*p = x
	return p
}

func (x ErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_pdpb_proto_enumTypes[0].Descriptor()
}

func (ErrorType) Type() protoreflect.EnumType {
	return &file_pdpb_proto_enumTypes[0]
}

func (x ErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorType.Descriptor instead.
func (ErrorType) EnumDescriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{0}
}

type CheckPolicy int32

const (
	CheckPolicy_SCAN        CheckPolicy = 0
	CheckPolicy_APPROXIMATE CheckPolicy = 1
	CheckPolicy_USEKEY      CheckPolicy = 2
)

// Enum value maps for CheckPolicy.
var (
	CheckPolicy_name = map[int32]string{
		0: "SCAN",
		1: "APPROXIMATE",
		2: "USEKEY",
	}
	CheckPolicy_value = map[string]int32{
		"SCAN":        0,
		"APPROXIMATE": 1,
		"USEKEY":      2,
	}
)

func (x CheckPolicy) Enum() *CheckPolicy {
	p := new(CheckPolicy)
	*p = x
	return p
}

func (x CheckPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_pdpb_proto_enumTypes[1].Descriptor()
}

func (CheckPolicy) Type() protoreflect.EnumType {
	return &file_pdpb_proto_enumTypes[1]
}

func (x CheckPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckPolicy.Descriptor instead.
func (CheckPolicy) EnumDescriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{1}
}

type OperatorStatus int32

const (
	OperatorStatus_SUCCESS OperatorStatus = 0
	OperatorStatus_TIMEOUT OperatorStatus = 1
	OperatorStatus_CANCEL  OperatorStatus = 2
	OperatorStatus_REPLACE OperatorStatus = 3
	OperatorStatus_RUNNING OperatorStatus = 4
)

// Enum value maps for OperatorStatus.
var (
	OperatorStatus_name = map[int32]string{
		0: "SUCCESS",
		1: "TIMEOUT",
		2: "CANCEL",
		3: "REPLACE",
		4: "RUNNING",
	}
	OperatorStatus_value = map[string]int32{
		"SUCCESS": 0,
		"TIMEOUT": 1,
		"CANCEL":  2,
		"REPLACE": 3,
		"RUNNING": 4,
	}
)

func (x OperatorStatus) Enum() *OperatorStatus {
	p := new(OperatorStatus)
	*p = x
	return p
}

func (x OperatorStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperatorStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pdpb_proto_enumTypes[2].Descriptor()
}

func (OperatorStatus) Type() protoreflect.EnumType {
	return &file_pdpb_proto_enumTypes[2]
}

func (x OperatorStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperatorStatus.Descriptor instead.
func (OperatorStatus) EnumDescriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{2}
}

type QueryKind int32

const (
	QueryKind_Others                 QueryKind = 0
	QueryKind_GC                     QueryKind = 1
	QueryKind_Get                    QueryKind = 2
	QueryKind_Scan                   QueryKind = 3
	QueryKind_Coprocessor            QueryKind = 4
	QueryKind_Delete                 QueryKind = 5
	QueryKind_DeleteRange            QueryKind = 6
	QueryKind_Put                    QueryKind = 7
	QueryKind_Prewrite               QueryKind = 8
	QueryKind_AcquirePessimisticLock QueryKind = 9
	QueryKind_Commit                 QueryKind = 10
	QueryKind_Rollback               QueryKind = 11
)

// Enum value maps for QueryKind.
var (
	QueryKind_name = map[int32]string{
		0:  "Others",
		1:  "GC",
		2:  "Get",
		3:  "Scan",
		4:  "Coprocessor",
		5:  "Delete",
		6:  "DeleteRange",
		7:  "Put",
		8:  "Prewrite",
		9:  "AcquirePessimisticLock",
		10: "Commit",
		11: "Rollback",
	}
	QueryKind_value = map[string]int32{
		"Others":                 0,
		"GC":                     1,
		"Get":                    2,
		"Scan":                   3,
		"Coprocessor":            4,
		"Delete":                 5,
		"DeleteRange":            6,
		"Put":                    7,
		"Prewrite":               8,
		"AcquirePessimisticLock": 9,
		"Commit":                 10,
		"Rollback":               11,
	}
)

func (x QueryKind) Enum() *QueryKind {
	p := new(QueryKind)
	*p = x
	return p
}

func (x QueryKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryKind) Descriptor() protoreflect.EnumDescriptor {
	return file_pdpb_proto_enumTypes[3].Descriptor()
}

func (QueryKind) Type() protoreflect.EnumType {
	return &file_pdpb_proto_enumTypes[3]
}

func (x QueryKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryKind.Descriptor instead.
func (QueryKind) EnumDescriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{3}
}

type RequestHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cluster_id is the ID of the cluster which be sent to.
	ClusterId uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// sender_id is the ID of the sender server, also member ID or etcd ID.
	SenderId uint64 `protobuf:"varint,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
}

func (x *RequestHeader) Reset() {
	*x = RequestHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestHeader) ProtoMessage() {}

func (x *RequestHeader) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestHeader.ProtoReflect.Descriptor instead.
func (*RequestHeader) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{0}
}

func (x *RequestHeader) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *RequestHeader) GetSenderId() uint64 {
	if x != nil {
		return x.SenderId
	}
	return 0
}

type ResponseHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cluster_id is the ID of the cluster which sent the response.
	ClusterId uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Error     *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ResponseHeader) Reset() {
	*x = ResponseHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseHeader) ProtoMessage() {}

func (x *ResponseHeader) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseHeader.ProtoReflect.Descriptor instead.
func (*ResponseHeader) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{1}
}

func (x *ResponseHeader) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ResponseHeader) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    ErrorType `protobuf:"varint,1,opt,name=type,proto3,enum=pdpb.ErrorType" json:"type,omitempty"`
	Message string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{2}
}

func (x *Error) GetType() ErrorType {
	if x != nil {
		return x.Type
	}
	return ErrorType_OK
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TsoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header     *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Count      uint32         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	DcLocation string         `protobuf:"bytes,3,opt,name=dc_location,json=dcLocation,proto3" json:"dc_location,omitempty"`
}

func (x *TsoRequest) Reset() {
	*x = TsoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TsoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TsoRequest) ProtoMessage() {}

func (x *TsoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TsoRequest.ProtoReflect.Descriptor instead.
func (*TsoRequest) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{3}
}

func (x *TsoRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TsoRequest) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TsoRequest) GetDcLocation() string {
	if x != nil {
		return x.DcLocation
	}
	return ""
}

type Timestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Physical int64 `protobuf:"varint,1,opt,name=physical,proto3" json:"physical,omitempty"`
	Logical  int64 `protobuf:"varint,2,opt,name=logical,proto3" json:"logical,omitempty"`
	// Number of suffix bits used for global distinction,
	// PD client will use this to compute a TSO's logical part.
	SuffixBits uint32 `protobuf:"varint,3,opt,name=suffix_bits,json=suffixBits,proto3" json:"suffix_bits,omitempty"`
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{4}
}

func (x *Timestamp) GetPhysical() int64 {
	if x != nil {
		return x.Physical
	}
	return 0
}

func (x *Timestamp) GetLogical() int64 {
	if x != nil {
		return x.Logical
	}
	return 0
}

func (x *Timestamp) GetSuffixBits() uint32 {
	if x != nil {
		return x.SuffixBits
	}
	return 0
}

type TsoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Count     uint32          `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Timestamp *Timestamp      `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *TsoResponse) Reset() {
	*x = TsoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TsoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TsoResponse) ProtoMessage() {}

func (x *TsoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TsoResponse.ProtoReflect.Descriptor instead.
func (*TsoResponse) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{5}
}

func (x *TsoResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TsoResponse) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TsoResponse) GetTimestamp() *Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type BootstrapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Store  *metapb.Store  `protobuf:"bytes,2,opt,name=store,proto3" json:"store,omitempty"`
	Region *metapb.Region `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *BootstrapRequest) Reset() {
	*x = BootstrapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BootstrapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootstrapRequest) ProtoMessage() {}

func (x *BootstrapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootstrapRequest.ProtoReflect.Descriptor instead.
func (*BootstrapRequest) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{6}
}

func (x *BootstrapRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *BootstrapRequest) GetStore() *metapb.Store {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *BootstrapRequest) GetRegion() *metapb.Region {
	if x != nil {
		return x.Region
	}
	return nil
}

type BootstrapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header            *ResponseHeader                       `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	ReplicationStatus *replication_modepb.ReplicationStatus `protobuf:"bytes,2,opt,name=replication_status,json=replicationStatus,proto3" json:"replication_status,omitempty"`
}

func (x *BootstrapResponse) Reset() {
	*x = BootstrapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BootstrapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootstrapResponse) ProtoMessage() {}

func (x *BootstrapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootstrapResponse.ProtoReflect.Descriptor instead.
func (*BootstrapResponse) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{7}
}

func (x *BootstrapResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *BootstrapResponse) GetReplicationStatus() *replication_modepb.ReplicationStatus {
	if x != nil {
		return x.ReplicationStatus
	}
	return nil
}

type IsBootstrappedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *IsBootstrappedRequest) Reset() {
	*x = IsBootstrappedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsBootstrappedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsBootstrappedRequest) ProtoMessage() {}

func (x *IsBootstrappedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsBootstrappedRequest.ProtoReflect.Descriptor instead.
func (*IsBootstrappedRequest) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{8}
}

func (x *IsBootstrappedRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type IsBootstrappedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Bootstrapped bool            `protobuf:"varint,2,opt,name=bootstrapped,proto3" json:"bootstrapped,omitempty"`
}

func (x *IsBootstrappedResponse) Reset() {
	*x = IsBootstrappedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsBootstrappedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsBootstrappedResponse) ProtoMessage() {}

func (x *IsBootstrappedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsBootstrappedResponse.ProtoReflect.Descriptor instead.
func (*IsBootstrappedResponse) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{9}
}

func (x *IsBootstrappedResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *IsBootstrappedResponse) GetBootstrapped() bool {
	if x != nil {
		return x.Bootstrapped
	}
	return false
}

type AllocIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *AllocIDRequest) Reset() {
	*x = AllocIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocIDRequest) ProtoMessage() {}

func (x *AllocIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocIDRequest.ProtoReflect.Descriptor instead.
func (*AllocIDRequest) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{10}
}

func (x *AllocIDRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type AllocIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Id     uint64          `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AllocIDResponse) Reset() {
	*x = AllocIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocIDResponse) ProtoMessage() {}

func (x *AllocIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocIDResponse.ProtoReflect.Descriptor instead.
func (*AllocIDResponse) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{11}
}

func (x *AllocIDResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AllocIDResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetStoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	StoreId uint64         `protobuf:"varint,2,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
}

func (x *GetStoreRequest) Reset() {
	*x = GetStoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStoreRequest) ProtoMessage() {}

func (x *GetStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStoreRequest.ProtoReflect.Descriptor instead.
func (*GetStoreRequest) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{12}
}

func (x *GetStoreRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetStoreRequest) GetStoreId() uint64 {
	if x != nil {
		return x.StoreId
	}
	return 0
}

type GetStoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Store  *metapb.Store   `protobuf:"bytes,2,opt,name=store,proto3" json:"store,omitempty"`
	Stats  *StoreStats     `protobuf:"bytes,3,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *GetStoreResponse) Reset() {
	*x = GetStoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStoreResponse) ProtoMessage() {}

func (x *GetStoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStoreResponse.ProtoReflect.Descriptor instead.
func (*GetStoreResponse) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{13}
}

func (x *GetStoreResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetStoreResponse) GetStore() *metapb.Store {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *GetStoreResponse) GetStats() *StoreStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type PutStoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Store  *metapb.Store  `protobuf:"bytes,2,opt,name=store,proto3" json:"store,omitempty"`
}

func (x *PutStoreRequest) Reset() {
	*x = PutStoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutStoreRequest) ProtoMessage() {}

func (x *PutStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutStoreRequest.ProtoReflect.Descriptor instead.
func (*PutStoreRequest) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{14}
}

func (x *PutStoreRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PutStoreRequest) GetStore() *metapb.Store {
	if x != nil {
		return x.Store
	}
	return nil
}

type PutStoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header            *ResponseHeader                       `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	ReplicationStatus *replication_modepb.ReplicationStatus `protobuf:"bytes,2,opt,name=replication_status,json=replicationStatus,proto3" json:"replication_status,omitempty"`
}

func (x *PutStoreResponse) Reset() {
	*x = PutStoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutStoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutStoreResponse) ProtoMessage() {}

func (x *PutStoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutStoreResponse.ProtoReflect.Descriptor instead.
func (*PutStoreResponse) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{15}
}

func (x *PutStoreResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PutStoreResponse) GetReplicationStatus() *replication_modepb.ReplicationStatus {
	if x != nil {
		return x.ReplicationStatus
	}
	return nil
}

type GetAllStoresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Do NOT return tombstone stores if set to true.
	ExcludeTombstoneStores bool `protobuf:"varint,2,opt,name=exclude_tombstone_stores,json=excludeTombstoneStores,proto3" json:"exclude_tombstone_stores,omitempty"`
}

func (x *GetAllStoresRequest) Reset() {
	*x = GetAllStoresRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllStoresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllStoresRequest) ProtoMessage() {}

func (x *GetAllStoresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllStoresRequest.ProtoReflect.Descriptor instead.
func (*GetAllStoresRequest) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{16}
}

func (x *GetAllStoresRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetAllStoresRequest) GetExcludeTombstoneStores() bool {
	if x != nil {
		return x.ExcludeTombstoneStores
	}
	return false
}

type GetAllStoresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Stores []*metapb.Store `protobuf:"bytes,2,rep,name=stores,proto3" json:"stores,omitempty"`
}

func (x *GetAllStoresResponse) Reset() {
	*x = GetAllStoresResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllStoresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllStoresResponse) ProtoMessage() {}

func (x *GetAllStoresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllStoresResponse.ProtoReflect.Descriptor instead.
func (*GetAllStoresResponse) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{17}
}

func (x *GetAllStoresResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetAllStoresResponse) GetStores() []*metapb.Store {
	if x != nil {
		return x.Stores
	}
	return nil
}

type GetRegionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	RegionKey []byte         `protobuf:"bytes,2,opt,name=region_key,json=regionKey,proto3" json:"region_key,omitempty"`
}

func (x *GetRegionRequest) Reset() {
	*x = GetRegionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegionRequest) ProtoMessage() {}

func (x *GetRegionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegionRequest.ProtoReflect.Descriptor instead.
func (*GetRegionRequest) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{18}
}

func (x *GetRegionRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetRegionRequest) GetRegionKey() []byte {
	if x != nil {
		return x.RegionKey
	}
	return nil
}

type GetRegionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Region *metapb.Region  `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Leader *metapb.Peer    `protobuf:"bytes,3,opt,name=leader,proto3" json:"leader,omitempty"`
	// Leader considers that these peers are down.
	DownPeers []*PeerStats `protobuf:"bytes,5,rep,name=down_peers,json=downPeers,proto3" json:"down_peers,omitempty"`
	// Pending peers are the peers that the leader can't consider as
	// working followers.
	PendingPeers []*metapb.Peer `protobuf:"bytes,6,rep,name=pending_peers,json=pendingPeers,proto3" json:"pending_peers,omitempty"`
}

func (x *GetRegionResponse) Reset() {
	*x = GetRegionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegionResponse) ProtoMessage() {}

func (x *GetRegionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegionResponse.ProtoReflect.Descriptor instead.
func (*GetRegionResponse) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{19}
}

func (x *GetRegionResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetRegionResponse) GetRegion() *metapb.Region {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *GetRegionResponse) GetLeader() *metapb.Peer {
	if x != nil {
		return x.Leader
	}
	return nil
}

func (x *GetRegionResponse) GetDownPeers() []*PeerStats {
	if x != nil {
		return x.DownPeers
	}
	return nil
}

func (x *GetRegionResponse) GetPendingPeers() []*metapb.Peer {
	if x != nil {
		return x.PendingPeers
	}
	return nil
}

type GetRegionByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header   *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	RegionId uint64         `protobuf:"varint,2,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
}

func (x *GetRegionByIDRequest) Reset() {
	*x = GetRegionByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegionByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegionByIDRequest) ProtoMessage() {}

func (x *GetRegionByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegionByIDRequest.ProtoReflect.Descriptor instead.
func (*GetRegionByIDRequest) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{20}
}

func (x *GetRegionByIDRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetRegionByIDRequest) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

type ScanRegionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header   *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	StartKey []byte         `protobuf:"bytes,2,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	Limit    int32          `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`                // no limit when limit <= 0.
	EndKey   []byte         `protobuf:"bytes,4,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"` // end_key is +inf when it is empty.
}

func (x *ScanRegionsRequest) Reset() {
	*x = ScanRegionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanRegionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanRegionsRequest) ProtoMessage() {}

func (x *ScanRegionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanRegionsRequest.ProtoReflect.Descriptor instead.
func (*ScanRegionsRequest) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{21}
}

func (x *ScanRegionsRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ScanRegionsRequest) GetStartKey() []byte {
	if x != nil {
		return x.StartKey
	}
	return nil
}

func (x *ScanRegionsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ScanRegionsRequest) GetEndKey() []byte {
	if x != nil {
		return x.EndKey
	}
	return nil
}

type Region struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region *metapb.Region `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	Leader *metapb.Peer   `protobuf:"bytes,2,opt,name=leader,proto3" json:"leader,omitempty"`
	// Leader considers that these peers are down.
	DownPeers []*PeerStats `protobuf:"bytes,3,rep,name=down_peers,json=downPeers,proto3" json:"down_peers,omitempty"`
	// Pending peers are the peers that the leader can't consider as
	// working followers.
	PendingPeers []*metapb.Peer `protobuf:"bytes,4,rep,name=pending_peers,json=pendingPeers,proto3" json:"pending_peers,omitempty"`
}

func (x *Region) Reset() {
	*x = Region{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Region) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Region) ProtoMessage() {}

func (x *Region) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Region.ProtoReflect.Descriptor instead.
func (*Region) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{22}
}

func (x *Region) GetRegion() *metapb.Region {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *Region) GetLeader() *metapb.Peer {
	if x != nil {
		return x.Leader
	}
	return nil
}

func (x *Region) GetDownPeers() []*PeerStats {
	if x != nil {
		return x.DownPeers
	}
	return nil
}

func (x *Region) GetPendingPeers() []*metapb.Peer {
	if x != nil {
		return x.PendingPeers
	}
	return nil
}

type ScanRegionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Keep for backword compatibability.
	RegionMetas []*metapb.Region `protobuf:"bytes,2,rep,name=region_metas,json=regionMetas,proto3" json:"region_metas,omitempty"`
	Leaders     []*metapb.Peer   `protobuf:"bytes,3,rep,name=leaders,proto3" json:"leaders,omitempty"`
	// Extended region info with down/pending peers.
	Regions []*Region `protobuf:"bytes,4,rep,name=regions,proto3" json:"regions,omitempty"`
}

func (x *ScanRegionsResponse) Reset() {
	*x = ScanRegionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanRegionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanRegionsResponse) ProtoMessage() {}

func (x *ScanRegionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanRegionsResponse.ProtoReflect.Descriptor instead.
func (*ScanRegionsResponse) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{23}
}

func (x *ScanRegionsResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ScanRegionsResponse) GetRegionMetas() []*metapb.Region {
	if x != nil {
		return x.RegionMetas
	}
	return nil
}

func (x *ScanRegionsResponse) GetLeaders() []*metapb.Peer {
	if x != nil {
		return x.Leaders
	}
	return nil
}

func (x *ScanRegionsResponse) GetRegions() []*Region {
	if x != nil {
		return x.Regions
	}
	return nil
}

type GetClusterConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *GetClusterConfigRequest) Reset() {
	*x = GetClusterConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterConfigRequest) ProtoMessage() {}

func (x *GetClusterConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterConfigRequest.ProtoReflect.Descriptor instead.
func (*GetClusterConfigRequest) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{24}
}

func (x *GetClusterConfigRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type GetClusterConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Cluster *metapb.Cluster `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *GetClusterConfigResponse) Reset() {
	*x = GetClusterConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterConfigResponse) ProtoMessage() {}

func (x *GetClusterConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterConfigResponse.ProtoReflect.Descriptor instead.
func (*GetClusterConfigResponse) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{25}
}

func (x *GetClusterConfigResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetClusterConfigResponse) GetCluster() *metapb.Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type PutClusterConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *RequestHeader  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Cluster *metapb.Cluster `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *PutClusterConfigRequest) Reset() {
	*x = PutClusterConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutClusterConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutClusterConfigRequest) ProtoMessage() {}

func (x *PutClusterConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutClusterConfigRequest.ProtoReflect.Descriptor instead.
func (*PutClusterConfigRequest) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{26}
}

func (x *PutClusterConfigRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PutClusterConfigRequest) GetCluster() *metapb.Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type PutClusterConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *PutClusterConfigResponse) Reset() {
	*x = PutClusterConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutClusterConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutClusterConfigResponse) ProtoMessage() {}

func (x *PutClusterConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutClusterConfigResponse.ProtoReflect.Descriptor instead.
func (*PutClusterConfigResponse) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{27}
}

func (x *PutClusterConfigResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the PD member.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// member_id is the unique id of the PD member.
	MemberId       uint64   `protobuf:"varint,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	PeerUrls       []string `protobuf:"bytes,3,rep,name=peer_urls,json=peerUrls,proto3" json:"peer_urls,omitempty"`
	ClientUrls     []string `protobuf:"bytes,4,rep,name=client_urls,json=clientUrls,proto3" json:"client_urls,omitempty"`
	LeaderPriority int32    `protobuf:"varint,5,opt,name=leader_priority,json=leaderPriority,proto3" json:"leader_priority,omitempty"`
	DeployPath     string   `protobuf:"bytes,6,opt,name=deploy_path,json=deployPath,proto3" json:"deploy_path,omitempty"`
	BinaryVersion  string   `protobuf:"bytes,7,opt,name=binary_version,json=binaryVersion,proto3" json:"binary_version,omitempty"`
	GitHash        string   `protobuf:"bytes,8,opt,name=git_hash,json=gitHash,proto3" json:"git_hash,omitempty"`
	DcLocation     string   `protobuf:"bytes,9,opt,name=dc_location,json=dcLocation,proto3" json:"dc_location,omitempty"`
}

func (x *Member) Reset() {
	*x = Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

func (x *Member) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{28}
}

func (x *Member) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Member) GetMemberId() uint64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *Member) GetPeerUrls() []string {
	if x != nil {
		return x.PeerUrls
	}
	return nil
}

func (x *Member) GetClientUrls() []string {
	if x != nil {
		return x.ClientUrls
	}
	return nil
}

func (x *Member) GetLeaderPriority() int32 {
	if x != nil {
		return x.LeaderPriority
	}
	return 0
}

func (x *Member) GetDeployPath() string {
	if x != nil {
		return x.DeployPath
	}
	return ""
}

func (x *Member) GetBinaryVersion() string {
	if x != nil {
		return x.BinaryVersion
	}
	return ""
}

func (x *Member) GetGitHash() string {
	if x != nil {
		return x.GitHash
	}
	return ""
}

func (x *Member) GetDcLocation() string {
	if x != nil {
		return x.DcLocation
	}
	return ""
}

type GetMembersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *GetMembersRequest) Reset() {
	*x = GetMembersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMembersRequest) ProtoMessage() {}

func (x *GetMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMembersRequest.ProtoReflect.Descriptor instead.
func (*GetMembersRequest) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{29}
}

func (x *GetMembersRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type GetMembersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header              *ResponseHeader    `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Members             []*Member          `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
	Leader              *Member            `protobuf:"bytes,3,opt,name=leader,proto3" json:"leader,omitempty"`
	EtcdLeader          *Member            `protobuf:"bytes,4,opt,name=etcd_leader,json=etcdLeader,proto3" json:"etcd_leader,omitempty"`
	TsoAllocatorLeaders map[string]*Member `protobuf:"bytes,5,rep,name=tso_allocator_leaders,json=tsoAllocatorLeaders,proto3" json:"tso_allocator_leaders,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetMembersResponse) Reset() {
	*x = GetMembersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMembersResponse) ProtoMessage() {}

func (x *GetMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMembersResponse.ProtoReflect.Descriptor instead.
func (*GetMembersResponse) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{30}
}

func (x *GetMembersResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetMembersResponse) GetMembers() []*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *GetMembersResponse) GetLeader() *Member {
	if x != nil {
		return x.Leader
	}
	return nil
}

func (x *GetMembersResponse) GetEtcdLeader() *Member {
	if x != nil {
		return x.EtcdLeader
	}
	return nil
}

func (x *GetMembersResponse) GetTsoAllocatorLeaders() map[string]*Member {
	if x != nil {
		return x.TsoAllocatorLeaders
	}
	return nil
}

type PeerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peer        *metapb.Peer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	DownSeconds uint64       `protobuf:"varint,2,opt,name=down_seconds,json=downSeconds,proto3" json:"down_seconds,omitempty"`
}

func (x *PeerStats) Reset() {
	*x = PeerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerStats) ProtoMessage() {}

func (x *PeerStats) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerStats.ProtoReflect.Descriptor instead.
func (*PeerStats) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{31}
}

func (x *PeerStats) GetPeer() *metapb.Peer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *PeerStats) GetDownSeconds() uint64 {
	if x != nil {
		return x.DownSeconds
	}
	return 0
}

type RegionHeartbeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Region *metapb.Region `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	// Leader Peer sending the heartbeat.
	Leader *metapb.Peer `protobuf:"bytes,3,opt,name=leader,proto3" json:"leader,omitempty"`
	// Leader considers that these peers are down.
	DownPeers []*PeerStats `protobuf:"bytes,4,rep,name=down_peers,json=downPeers,proto3" json:"down_peers,omitempty"`
	// Pending peers are the peers that the leader can't consider as
	// working followers.
	PendingPeers []*metapb.Peer `protobuf:"bytes,5,rep,name=pending_peers,json=pendingPeers,proto3" json:"pending_peers,omitempty"`
	// Bytes read/written during this period.
	BytesWritten uint64 `protobuf:"varint,6,opt,name=bytes_written,json=bytesWritten,proto3" json:"bytes_written,omitempty"`
	BytesRead    uint64 `protobuf:"varint,7,opt,name=bytes_read,json=bytesRead,proto3" json:"bytes_read,omitempty"`
	// Keys read/written during this period.
	KeysWritten uint64 `protobuf:"varint,8,opt,name=keys_written,json=keysWritten,proto3" json:"keys_written,omitempty"`
	KeysRead    uint64 `protobuf:"varint,9,opt,name=keys_read,json=keysRead,proto3" json:"keys_read,omitempty"`
	// Approximate region size.
	ApproximateSize uint64 `protobuf:"varint,10,opt,name=approximate_size,json=approximateSize,proto3" json:"approximate_size,omitempty"`
	// Actually reported time interval
	Interval *TimeInterval `protobuf:"bytes,12,opt,name=interval,proto3" json:"interval,omitempty"`
	// Approximate number of keys.
	ApproximateKeys uint64 `protobuf:"varint,13,opt,name=approximate_keys,json=approximateKeys,proto3" json:"approximate_keys,omitempty"`
	// Term is the term of raft group.
	Term              uint64                                      `protobuf:"varint,14,opt,name=term,proto3" json:"term,omitempty"`
	ReplicationStatus *replication_modepb.RegionReplicationStatus `protobuf:"bytes,15,opt,name=replication_status,json=replicationStatus,proto3" json:"replication_status,omitempty"`
	// QueryStats reported write query stats, and there are read query stats in store heartbeat
	QueryStats *QueryStats `protobuf:"bytes,16,opt,name=query_stats,json=queryStats,proto3" json:"query_stats,omitempty"`
	// cpu_usage is the CPU time usage of the leader region since the last heartbeat,
	// which is calculated by cpu_time_delta/heartbeat_reported_interval.
	CpuUsage uint64 `protobuf:"varint,17,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`
}

func (x *RegionHeartbeatRequest) Reset() {
	*x = RegionHeartbeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionHeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionHeartbeatRequest) ProtoMessage() {}

func (x *RegionHeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionHeartbeatRequest.ProtoReflect.Descriptor instead.
func (*RegionHeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{32}
}

func (x *RegionHeartbeatRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RegionHeartbeatRequest) GetRegion() *metapb.Region {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *RegionHeartbeatRequest) GetLeader() *metapb.Peer {
	if x != nil {
		return x.Leader
	}
	return nil
}

func (x *RegionHeartbeatRequest) GetDownPeers() []*PeerStats {
	if x != nil {
		return x.DownPeers
	}
	return nil
}

func (x *RegionHeartbeatRequest) GetPendingPeers() []*metapb.Peer {
	if x != nil {
		return x.PendingPeers
	}
	return nil
}

func (x *RegionHeartbeatRequest) GetBytesWritten() uint64 {
	if x != nil {
		return x.BytesWritten
	}
	return 0
}

func (x *RegionHeartbeatRequest) GetBytesRead() uint64 {
	if x != nil {
		return x.BytesRead
	}
	return 0
}

func (x *RegionHeartbeatRequest) GetKeysWritten() uint64 {
	if x != nil {
		return x.KeysWritten
	}
	return 0
}

func (x *RegionHeartbeatRequest) GetKeysRead() uint64 {
	if x != nil {
		return x.KeysRead
	}
	return 0
}

func (x *RegionHeartbeatRequest) GetApproximateSize() uint64 {
	if x != nil {
		return x.ApproximateSize
	}
	return 0
}

func (x *RegionHeartbeatRequest) GetInterval() *TimeInterval {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *RegionHeartbeatRequest) GetApproximateKeys() uint64 {
	if x != nil {
		return x.ApproximateKeys
	}
	return 0
}

func (x *RegionHeartbeatRequest) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *RegionHeartbeatRequest) GetReplicationStatus() *replication_modepb.RegionReplicationStatus {
	if x != nil {
		return x.ReplicationStatus
	}
	return nil
}

func (x *RegionHeartbeatRequest) GetQueryStats() *QueryStats {
	if x != nil {
		return x.QueryStats
	}
	return nil
}

func (x *RegionHeartbeatRequest) GetCpuUsage() uint64 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

type ChangePeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peer       *metapb.Peer           `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	ChangeType eraftpb.ConfChangeType `protobuf:"varint,2,opt,name=change_type,json=changeType,proto3,enum=eraftpb.ConfChangeType" json:"change_type,omitempty"`
}

func (x *ChangePeer) Reset() {
	*x = ChangePeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePeer) ProtoMessage() {}

func (x *ChangePeer) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePeer.ProtoReflect.Descriptor instead.
func (*ChangePeer) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{33}
}

func (x *ChangePeer) GetPeer() *metapb.Peer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *ChangePeer) GetChangeType() eraftpb.ConfChangeType {
	if x != nil {
		return x.ChangeType
	}
	return eraftpb.ConfChangeType_AddNode
}

type ChangePeerV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If changes is empty, it means that to exit joint state.
	Changes []*ChangePeer `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *ChangePeerV2) Reset() {
	*x = ChangePeerV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePeerV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePeerV2) ProtoMessage() {}

func (x *ChangePeerV2) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePeerV2.ProtoReflect.Descriptor instead.
func (*ChangePeerV2) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{34}
}

func (x *ChangePeerV2) GetChanges() []*ChangePeer {
	if x != nil {
		return x.Changes
	}
	return nil
}

type TransferLeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peer  *metapb.Peer   `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Peers []*metapb.Peer `protobuf:"bytes,2,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (x *TransferLeader) Reset() {
	*x = TransferLeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferLeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferLeader) ProtoMessage() {}

func (x *TransferLeader) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferLeader.ProtoReflect.Descriptor instead.
func (*TransferLeader) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{35}
}

func (x *TransferLeader) GetPeer() *metapb.Peer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TransferLeader) GetPeers() []*metapb.Peer {
	if x != nil {
		return x.Peers
	}
	return nil
}

type Merge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target *metapb.Region `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *Merge) Reset() {
	*x = Merge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Merge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Merge) ProtoMessage() {}

func (x *Merge) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Merge.ProtoReflect.Descriptor instead.
func (*Merge) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{36}
}

func (x *Merge) GetTarget() *metapb.Region {
	if x != nil {
		return x.Target
	}
	return nil
}

type SplitRegion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy CheckPolicy `protobuf:"varint,1,opt,name=policy,proto3,enum=pdpb.CheckPolicy" json:"policy,omitempty"`
	Keys   [][]byte    `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *SplitRegion) Reset() {
	*x = SplitRegion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitRegion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitRegion) ProtoMessage() {}

func (x *SplitRegion) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitRegion.ProtoReflect.Descriptor instead.
func (*SplitRegion) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{37}
}

func (x *SplitRegion) GetPolicy() CheckPolicy {
	if x != nil {
		return x.Policy
	}
	return CheckPolicy_SCAN
}

func (x *SplitRegion) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

type RegionHeartbeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Notice, Pd only allows handling reported epoch >= current pd's.
	// Leader peer reports region status with RegionHeartbeatRequest
	// to pd regularly, pd will determine whether this region
	// should do ChangePeer or not.
	// E,g, max peer number is 3, region A, first only peer 1 in A.
	// 1. Pd region state -> Peers (1), ConfVer (1).
	// 2. Leader peer 1 reports region state to pd, pd finds the
	// peer number is < 3, so first changes its current region
	// state -> Peers (1, 2), ConfVer (1), and returns ChangePeer Adding 2.
	// 3. Leader does ChangePeer, then reports Peers (1, 2), ConfVer (2),
	// pd updates its state -> Peers (1, 2), ConfVer (2).
	// 4. Leader may report old Peers (1), ConfVer (1) to pd before ConfChange
	// finished, pd stills responses ChangePeer Adding 2, of course, we must
	// guarantee the second ChangePeer can't be applied in TiKV.
	ChangePeer *ChangePeer `protobuf:"bytes,2,opt,name=change_peer,json=changePeer,proto3" json:"change_peer,omitempty"`
	// Pd can return transfer_leader to let TiKV does leader transfer itself.
	TransferLeader *TransferLeader `protobuf:"bytes,3,opt,name=transfer_leader,json=transferLeader,proto3" json:"transfer_leader,omitempty"`
	// ID of the region
	RegionId    uint64              `protobuf:"varint,4,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	RegionEpoch *metapb.RegionEpoch `protobuf:"bytes,5,opt,name=region_epoch,json=regionEpoch,proto3" json:"region_epoch,omitempty"`
	// Leader of the region at the moment of the corresponding request was made.
	TargetPeer *metapb.Peer `protobuf:"bytes,6,opt,name=target_peer,json=targetPeer,proto3" json:"target_peer,omitempty"`
	Merge      *Merge       `protobuf:"bytes,7,opt,name=merge,proto3" json:"merge,omitempty"`
	// PD sends split_region to let TiKV split a region into two regions.
	SplitRegion *SplitRegion `protobuf:"bytes,8,opt,name=split_region,json=splitRegion,proto3" json:"split_region,omitempty"`
	// Multiple change peer operations atomically.
	// Note: PD can use both ChangePeer and ChangePeerV2 at the same time
	//       (not in the same RegionHeartbeatResponse).
	//       Now, PD use ChangePeerV2 only for replacing peers.
	ChangePeerV2 *ChangePeerV2 `protobuf:"bytes,9,opt,name=change_peer_v2,json=changePeerV2,proto3" json:"change_peer_v2,omitempty"`
}

func (x *RegionHeartbeatResponse) Reset() {
	*x = RegionHeartbeatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionHeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionHeartbeatResponse) ProtoMessage() {}

func (x *RegionHeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionHeartbeatResponse.ProtoReflect.Descriptor instead.
func (*RegionHeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{38}
}

func (x *RegionHeartbeatResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RegionHeartbeatResponse) GetChangePeer() *ChangePeer {
	if x != nil {
		return x.ChangePeer
	}
	return nil
}

func (x *RegionHeartbeatResponse) GetTransferLeader() *TransferLeader {
	if x != nil {
		return x.TransferLeader
	}
	return nil
}

func (x *RegionHeartbeatResponse) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *RegionHeartbeatResponse) GetRegionEpoch() *metapb.RegionEpoch {
	if x != nil {
		return x.RegionEpoch
	}
	return nil
}

func (x *RegionHeartbeatResponse) GetTargetPeer() *metapb.Peer {
	if x != nil {
		return x.TargetPeer
	}
	return nil
}

func (x *RegionHeartbeatResponse) GetMerge() *Merge {
	if x != nil {
		return x.Merge
	}
	return nil
}

func (x *RegionHeartbeatResponse) GetSplitRegion() *SplitRegion {
	if x != nil {
		return x.SplitRegion
	}
	return nil
}

func (x *RegionHeartbeatResponse) GetChangePeerV2() *ChangePeerV2 {
	if x != nil {
		return x.ChangePeerV2
	}
	return nil
}

type AskSplitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Region *metapb.Region `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *AskSplitRequest) Reset() {
	*x = AskSplitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskSplitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskSplitRequest) ProtoMessage() {}

func (x *AskSplitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskSplitRequest.ProtoReflect.Descriptor instead.
func (*AskSplitRequest) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{39}
}

func (x *AskSplitRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AskSplitRequest) GetRegion() *metapb.Region {
	if x != nil {
		return x.Region
	}
	return nil
}

type AskSplitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// We split the region into two, first uses the origin
	// parent region id, and the second uses the new_region_id.
	// We must guarantee that the new_region_id is global unique.
	NewRegionId uint64 `protobuf:"varint,2,opt,name=new_region_id,json=newRegionId,proto3" json:"new_region_id,omitempty"`
	// The peer ids for the new split region.
	NewPeerIds []uint64 `protobuf:"varint,3,rep,packed,name=new_peer_ids,json=newPeerIds,proto3" json:"new_peer_ids,omitempty"`
}

func (x *AskSplitResponse) Reset() {
	*x = AskSplitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskSplitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskSplitResponse) ProtoMessage() {}

func (x *AskSplitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskSplitResponse.ProtoReflect.Descriptor instead.
func (*AskSplitResponse) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{40}
}

func (x *AskSplitResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AskSplitResponse) GetNewRegionId() uint64 {
	if x != nil {
		return x.NewRegionId
	}
	return 0
}

func (x *AskSplitResponse) GetNewPeerIds() []uint64 {
	if x != nil {
		return x.NewPeerIds
	}
	return nil
}

type ReportSplitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Left   *metapb.Region `protobuf:"bytes,2,opt,name=left,proto3" json:"left,omitempty"`
	Right  *metapb.Region `protobuf:"bytes,3,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *ReportSplitRequest) Reset() {
	*x = ReportSplitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportSplitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportSplitRequest) ProtoMessage() {}

func (x *ReportSplitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportSplitRequest.ProtoReflect.Descriptor instead.
func (*ReportSplitRequest) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{41}
}

func (x *ReportSplitRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ReportSplitRequest) GetLeft() *metapb.Region {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *ReportSplitRequest) GetRight() *metapb.Region {
	if x != nil {
		return x.Right
	}
	return nil
}

type ReportSplitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *ReportSplitResponse) Reset() {
	*x = ReportSplitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportSplitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportSplitResponse) ProtoMessage() {}

func (x *ReportSplitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportSplitResponse.ProtoReflect.Descriptor instead.
func (*ReportSplitResponse) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{42}
}

func (x *ReportSplitResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type AskBatchSplitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header     *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Region     *metapb.Region `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	SplitCount uint32         `protobuf:"varint,3,opt,name=split_count,json=splitCount,proto3" json:"split_count,omitempty"`
}

func (x *AskBatchSplitRequest) Reset() {
	*x = AskBatchSplitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskBatchSplitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskBatchSplitRequest) ProtoMessage() {}

func (x *AskBatchSplitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskBatchSplitRequest.ProtoReflect.Descriptor instead.
func (*AskBatchSplitRequest) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{43}
}

func (x *AskBatchSplitRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AskBatchSplitRequest) GetRegion() *metapb.Region {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *AskBatchSplitRequest) GetSplitCount() uint32 {
	if x != nil {
		return x.SplitCount
	}
	return 0
}

type SplitID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewRegionId uint64   `protobuf:"varint,1,opt,name=new_region_id,json=newRegionId,proto3" json:"new_region_id,omitempty"`
	NewPeerIds  []uint64 `protobuf:"varint,2,rep,packed,name=new_peer_ids,json=newPeerIds,proto3" json:"new_peer_ids,omitempty"`
}

func (x *SplitID) Reset() {
	*x = SplitID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitID) ProtoMessage() {}

func (x *SplitID) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitID.ProtoReflect.Descriptor instead.
func (*SplitID) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{44}
}

func (x *SplitID) GetNewRegionId() uint64 {
	if x != nil {
		return x.NewRegionId
	}
	return 0
}

func (x *SplitID) GetNewPeerIds() []uint64 {
	if x != nil {
		return x.NewPeerIds
	}
	return nil
}

type AskBatchSplitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Ids    []*SplitID      `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *AskBatchSplitResponse) Reset() {
	*x = AskBatchSplitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskBatchSplitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskBatchSplitResponse) ProtoMessage() {}

func (x *AskBatchSplitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskBatchSplitResponse.ProtoReflect.Descriptor instead.
func (*AskBatchSplitResponse) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{45}
}

func (x *AskBatchSplitResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AskBatchSplitResponse) GetIds() []*SplitID {
	if x != nil {
		return x.Ids
	}
	return nil
}

type ReportBatchSplitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *RequestHeader   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Regions []*metapb.Region `protobuf:"bytes,2,rep,name=regions,proto3" json:"regions,omitempty"`
}

func (x *ReportBatchSplitRequest) Reset() {
	*x = ReportBatchSplitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportBatchSplitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportBatchSplitRequest) ProtoMessage() {}

func (x *ReportBatchSplitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportBatchSplitRequest.ProtoReflect.Descriptor instead.
func (*ReportBatchSplitRequest) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{46}
}

func (x *ReportBatchSplitRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ReportBatchSplitRequest) GetRegions() []*metapb.Region {
	if x != nil {
		return x.Regions
	}
	return nil
}

type ReportBatchSplitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *ReportBatchSplitResponse) Reset() {
	*x = ReportBatchSplitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportBatchSplitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportBatchSplitResponse) ProtoMessage() {}

func (x *ReportBatchSplitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportBatchSplitResponse.ProtoReflect.Descriptor instead.
func (*ReportBatchSplitResponse) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{47}
}

func (x *ReportBatchSplitResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type TimeInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unix timestamp in seconds of the start of this period.
	StartTimestamp uint64 `protobuf:"varint,1,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	// The unix timestamp in seconds of the end of this period.
	EndTimestamp uint64 `protobuf:"varint,2,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
}

func (x *TimeInterval) Reset() {
	*x = TimeInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeInterval) ProtoMessage() {}

func (x *TimeInterval) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeInterval.ProtoReflect.Descriptor instead.
func (*TimeInterval) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{48}
}

func (x *TimeInterval) GetStartTimestamp() uint64 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *TimeInterval) GetEndTimestamp() uint64 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

type RecordPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value uint64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RecordPair) Reset() {
	*x = RecordPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordPair) ProtoMessage() {}

func (x *RecordPair) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordPair.ProtoReflect.Descriptor instead.
func (*RecordPair) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{49}
}

func (x *RecordPair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RecordPair) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type PeerStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId   uint64      `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	ReadKeys   uint64      `protobuf:"varint,2,opt,name=read_keys,json=readKeys,proto3" json:"read_keys,omitempty"`
	ReadBytes  uint64      `protobuf:"varint,3,opt,name=read_bytes,json=readBytes,proto3" json:"read_bytes,omitempty"`
	QueryStats *QueryStats `protobuf:"bytes,4,opt,name=query_stats,json=queryStats,proto3" json:"query_stats,omitempty"`
}

func (x *PeerStat) Reset() {
	*x = PeerStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerStat) ProtoMessage() {}

func (x *PeerStat) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerStat.ProtoReflect.Descriptor instead.
func (*PeerStat) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{50}
}

func (x *PeerStat) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *PeerStat) GetReadKeys() uint64 {
	if x != nil {
		return x.ReadKeys
	}
	return 0
}

func (x *PeerStat) GetReadBytes() uint64 {
	if x != nil {
		return x.ReadBytes
	}
	return 0
}

func (x *PeerStat) GetQueryStats() *QueryStats {
	if x != nil {
		return x.QueryStats
	}
	return nil
}

type StoreStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreId uint64 `protobuf:"varint,1,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	// Capacity for the store.
	Capacity uint64 `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
	// Available size for the store.
	Available uint64 `protobuf:"varint,3,opt,name=available,proto3" json:"available,omitempty"`
	// Total region count in this store.
	RegionCount uint32 `protobuf:"varint,4,opt,name=region_count,json=regionCount,proto3" json:"region_count,omitempty"`
	// Current sending snapshot count.
	SendingSnapCount uint32 `protobuf:"varint,5,opt,name=sending_snap_count,json=sendingSnapCount,proto3" json:"sending_snap_count,omitempty"`
	// Current receiving snapshot count.
	ReceivingSnapCount uint32 `protobuf:"varint,6,opt,name=receiving_snap_count,json=receivingSnapCount,proto3" json:"receiving_snap_count,omitempty"`
	// When the store is started (unix timestamp in seconds).
	StartTime uint32 `protobuf:"varint,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// How many region is applying snapshot.
	ApplyingSnapCount uint32 `protobuf:"varint,8,opt,name=applying_snap_count,json=applyingSnapCount,proto3" json:"applying_snap_count,omitempty"`
	// If the store is busy
	IsBusy bool `protobuf:"varint,9,opt,name=is_busy,json=isBusy,proto3" json:"is_busy,omitempty"`
	// Actually used space by db
	UsedSize uint64 `protobuf:"varint,10,opt,name=used_size,json=usedSize,proto3" json:"used_size,omitempty"`
	// Bytes written for the store during this period.
	BytesWritten uint64 `protobuf:"varint,11,opt,name=bytes_written,json=bytesWritten,proto3" json:"bytes_written,omitempty"`
	// Keys written for the store during this period.
	KeysWritten uint64 `protobuf:"varint,12,opt,name=keys_written,json=keysWritten,proto3" json:"keys_written,omitempty"`
	// Bytes read for the store during this period.
	BytesRead uint64 `protobuf:"varint,13,opt,name=bytes_read,json=bytesRead,proto3" json:"bytes_read,omitempty"`
	// Keys read for the store during this period.
	KeysRead uint64 `protobuf:"varint,14,opt,name=keys_read,json=keysRead,proto3" json:"keys_read,omitempty"`
	// Actually reported time interval
	Interval *TimeInterval `protobuf:"bytes,15,opt,name=interval,proto3" json:"interval,omitempty"`
	// Threads' CPU usages in the store
	CpuUsages []*RecordPair `protobuf:"bytes,16,rep,name=cpu_usages,json=cpuUsages,proto3" json:"cpu_usages,omitempty"`
	// Threads' read disk I/O rates in the store
	ReadIoRates []*RecordPair `protobuf:"bytes,17,rep,name=read_io_rates,json=readIoRates,proto3" json:"read_io_rates,omitempty"`
	// Threads' write disk I/O rates in the store
	WriteIoRates []*RecordPair `protobuf:"bytes,18,rep,name=write_io_rates,json=writeIoRates,proto3" json:"write_io_rates,omitempty"`
	// Operations' latencies in the store
	OpLatencies []*RecordPair `protobuf:"bytes,19,rep,name=op_latencies,json=opLatencies,proto3" json:"op_latencies,omitempty"`
	// Hot peer stat in the store
	PeerStats []*PeerStat `protobuf:"bytes,20,rep,name=peer_stats,json=peerStats,proto3" json:"peer_stats,omitempty"`
	// Store query stats
	QueryStats *QueryStats `protobuf:"bytes,21,opt,name=query_stats,json=queryStats,proto3" json:"query_stats,omitempty"`
	// Score that represents the speed of the store, ranges in [1, 100], lower is better.
	SlowScore uint64 `protobuf:"varint,22,opt,name=slow_score,json=slowScore,proto3" json:"slow_score,omitempty"`
	// Damaged regions on the store that need to be removed by PD.
	DamagedRegionsId []uint64 `protobuf:"varint,23,rep,packed,name=damaged_regions_id,json=damagedRegionsId,proto3" json:"damaged_regions_id,omitempty"`
}

func (x *StoreStats) Reset() {
	*x = StoreStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreStats) ProtoMessage() {}

func (x *StoreStats) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreStats.ProtoReflect.Descriptor instead.
func (*StoreStats) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{51}
}

func (x *StoreStats) GetStoreId() uint64 {
	if x != nil {
		return x.StoreId
	}
	return 0
}

func (x *StoreStats) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *StoreStats) GetAvailable() uint64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *StoreStats) GetRegionCount() uint32 {
	if x != nil {
		return x.RegionCount
	}
	return 0
}

func (x *StoreStats) GetSendingSnapCount() uint32 {
	if x != nil {
		return x.SendingSnapCount
	}
	return 0
}

func (x *StoreStats) GetReceivingSnapCount() uint32 {
	if x != nil {
		return x.ReceivingSnapCount
	}
	return 0
}

func (x *StoreStats) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *StoreStats) GetApplyingSnapCount() uint32 {
	if x != nil {
		return x.ApplyingSnapCount
	}
	return 0
}

func (x *StoreStats) GetIsBusy() bool {
	if x != nil {
		return x.IsBusy
	}
	return false
}

func (x *StoreStats) GetUsedSize() uint64 {
	if x != nil {
		return x.UsedSize
	}
	return 0
}

func (x *StoreStats) GetBytesWritten() uint64 {
	if x != nil {
		return x.BytesWritten
	}
	return 0
}

func (x *StoreStats) GetKeysWritten() uint64 {
	if x != nil {
		return x.KeysWritten
	}
	return 0
}

func (x *StoreStats) GetBytesRead() uint64 {
	if x != nil {
		return x.BytesRead
	}
	return 0
}

func (x *StoreStats) GetKeysRead() uint64 {
	if x != nil {
		return x.KeysRead
	}
	return 0
}

func (x *StoreStats) GetInterval() *TimeInterval {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *StoreStats) GetCpuUsages() []*RecordPair {
	if x != nil {
		return x.CpuUsages
	}
	return nil
}

func (x *StoreStats) GetReadIoRates() []*RecordPair {
	if x != nil {
		return x.ReadIoRates
	}
	return nil
}

func (x *StoreStats) GetWriteIoRates() []*RecordPair {
	if x != nil {
		return x.WriteIoRates
	}
	return nil
}

func (x *StoreStats) GetOpLatencies() []*RecordPair {
	if x != nil {
		return x.OpLatencies
	}
	return nil
}

func (x *StoreStats) GetPeerStats() []*PeerStat {
	if x != nil {
		return x.PeerStats
	}
	return nil
}

func (x *StoreStats) GetQueryStats() *QueryStats {
	if x != nil {
		return x.QueryStats
	}
	return nil
}

func (x *StoreStats) GetSlowScore() uint64 {
	if x != nil {
		return x.SlowScore
	}
	return 0
}

func (x *StoreStats) GetDamagedRegionsId() []uint64 {
	if x != nil {
		return x.DamagedRegionsId
	}
	return nil
}

type PeerReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RaftState   *raft_serverpb.RaftLocalState   `protobuf:"bytes,1,opt,name=raft_state,json=raftState,proto3" json:"raft_state,omitempty"`
	RegionState *raft_serverpb.RegionLocalState `protobuf:"bytes,2,opt,name=region_state,json=regionState,proto3" json:"region_state,omitempty"`
}

func (x *PeerReport) Reset() {
	*x = PeerReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerReport) ProtoMessage() {}

func (x *PeerReport) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerReport.ProtoReflect.Descriptor instead.
func (*PeerReport) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{52}
}

func (x *PeerReport) GetRaftState() *raft_serverpb.RaftLocalState {
	if x != nil {
		return x.RaftState
	}
	return nil
}

func (x *PeerReport) GetRegionState() *raft_serverpb.RegionLocalState {
	if x != nil {
		return x.RegionState
	}
	return nil
}

type StoreReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerReports []*PeerReport `protobuf:"bytes,1,rep,name=peer_reports,json=peerReports,proto3" json:"peer_reports,omitempty"`
}

func (x *StoreReport) Reset() {
	*x = StoreReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreReport) ProtoMessage() {}

func (x *StoreReport) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreReport.ProtoReflect.Descriptor instead.
func (*StoreReport) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{53}
}

func (x *StoreReport) GetPeerReports() []*PeerReport {
	if x != nil {
		return x.PeerReports
	}
	return nil
}

type StoreHeartbeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Stats  *StoreStats    `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"`
	// Detailed store report that is only filled up on PD's demand for online unsafe recover.
	StoreReport *StoreReport `protobuf:"bytes,3,opt,name=store_report,json=storeReport,proto3" json:"store_report,omitempty"`
}

func (x *StoreHeartbeatRequest) Reset() {
	*x = StoreHeartbeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreHeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreHeartbeatRequest) ProtoMessage() {}

func (x *StoreHeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreHeartbeatRequest.ProtoReflect.Descriptor instead.
func (*StoreHeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{54}
}

func (x *StoreHeartbeatRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *StoreHeartbeatRequest) GetStats() *StoreStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *StoreHeartbeatRequest) GetStoreReport() *StoreReport {
	if x != nil {
		return x.StoreReport
	}
	return nil
}

type RecoveryPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Creates []*metapb.Region `protobuf:"bytes,1,rep,name=creates,proto3" json:"creates,omitempty"`
	Updates []*metapb.Region `protobuf:"bytes,2,rep,name=updates,proto3" json:"updates,omitempty"`
	Deletes []uint64         `protobuf:"varint,3,rep,packed,name=deletes,proto3" json:"deletes,omitempty"`
}

func (x *RecoveryPlan) Reset() {
	*x = RecoveryPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryPlan) ProtoMessage() {}

func (x *RecoveryPlan) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryPlan.ProtoReflect.Descriptor instead.
func (*RecoveryPlan) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{55}
}

func (x *RecoveryPlan) GetCreates() []*metapb.Region {
	if x != nil {
		return x.Creates
	}
	return nil
}

func (x *RecoveryPlan) GetUpdates() []*metapb.Region {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *RecoveryPlan) GetDeletes() []uint64 {
	if x != nil {
		return x.Deletes
	}
	return nil
}

type StoreHeartbeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header                *ResponseHeader                       `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	ReplicationStatus     *replication_modepb.ReplicationStatus `protobuf:"bytes,2,opt,name=replication_status,json=replicationStatus,proto3" json:"replication_status,omitempty"`
	ClusterVersion        string                                `protobuf:"bytes,3,opt,name=cluster_version,json=clusterVersion,proto3" json:"cluster_version,omitempty"`
	RequireDetailedReport bool                                  `protobuf:"varint,4,opt,name=require_detailed_report,json=requireDetailedReport,proto3" json:"require_detailed_report,omitempty"`
	Plan                  *RecoveryPlan                         `protobuf:"bytes,5,opt,name=plan,proto3" json:"plan,omitempty"`
}

func (x *StoreHeartbeatResponse) Reset() {
	*x = StoreHeartbeatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreHeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreHeartbeatResponse) ProtoMessage() {}

func (x *StoreHeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreHeartbeatResponse.ProtoReflect.Descriptor instead.
func (*StoreHeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{56}
}

func (x *StoreHeartbeatResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *StoreHeartbeatResponse) GetReplicationStatus() *replication_modepb.ReplicationStatus {
	if x != nil {
		return x.ReplicationStatus
	}
	return nil
}

func (x *StoreHeartbeatResponse) GetClusterVersion() string {
	if x != nil {
		return x.ClusterVersion
	}
	return ""
}

func (x *StoreHeartbeatResponse) GetRequireDetailedReport() bool {
	if x != nil {
		return x.RequireDetailedReport
	}
	return false
}

func (x *StoreHeartbeatResponse) GetPlan() *RecoveryPlan {
	if x != nil {
		return x.Plan
	}
	return nil
}

type ScatterRegionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Deprecated: Do not use.
	RegionId uint64 `protobuf:"varint,2,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// PD will use these region information if it can't find the region.
	// For example, the region is just split and hasn't report to PD yet.
	Region *metapb.Region `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	Leader *metapb.Peer   `protobuf:"bytes,4,opt,name=leader,proto3" json:"leader,omitempty"`
	// If group is defined, the regions with the same group would be scattered as a whole group.
	// If not defined, the regions would be scattered in a cluster level.
	Group string `protobuf:"bytes,5,opt,name=group,proto3" json:"group,omitempty"`
	// If regions_id is defined, the region_id would be ignored.
	RegionsId  []uint64 `protobuf:"varint,6,rep,packed,name=regions_id,json=regionsId,proto3" json:"regions_id,omitempty"`
	RetryLimit uint64   `protobuf:"varint,7,opt,name=retry_limit,json=retryLimit,proto3" json:"retry_limit,omitempty"`
}

func (x *ScatterRegionRequest) Reset() {
	*x = ScatterRegionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScatterRegionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScatterRegionRequest) ProtoMessage() {}

func (x *ScatterRegionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScatterRegionRequest.ProtoReflect.Descriptor instead.
func (*ScatterRegionRequest) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{57}
}

func (x *ScatterRegionRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// Deprecated: Do not use.
func (x *ScatterRegionRequest) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *ScatterRegionRequest) GetRegion() *metapb.Region {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *ScatterRegionRequest) GetLeader() *metapb.Peer {
	if x != nil {
		return x.Leader
	}
	return nil
}

func (x *ScatterRegionRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *ScatterRegionRequest) GetRegionsId() []uint64 {
	if x != nil {
		return x.RegionsId
	}
	return nil
}

func (x *ScatterRegionRequest) GetRetryLimit() uint64 {
	if x != nil {
		return x.RetryLimit
	}
	return 0
}

type ScatterRegionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header             *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	FinishedPercentage uint64          `protobuf:"varint,2,opt,name=finished_percentage,json=finishedPercentage,proto3" json:"finished_percentage,omitempty"`
}

func (x *ScatterRegionResponse) Reset() {
	*x = ScatterRegionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScatterRegionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScatterRegionResponse) ProtoMessage() {}

func (x *ScatterRegionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScatterRegionResponse.ProtoReflect.Descriptor instead.
func (*ScatterRegionResponse) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{58}
}

func (x *ScatterRegionResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ScatterRegionResponse) GetFinishedPercentage() uint64 {
	if x != nil {
		return x.FinishedPercentage
	}
	return 0
}

type GetGCSafePointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *GetGCSafePointRequest) Reset() {
	*x = GetGCSafePointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGCSafePointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGCSafePointRequest) ProtoMessage() {}

func (x *GetGCSafePointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGCSafePointRequest.ProtoReflect.Descriptor instead.
func (*GetGCSafePointRequest) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{59}
}

func (x *GetGCSafePointRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type GetGCSafePointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	SafePoint uint64          `protobuf:"varint,2,opt,name=safe_point,json=safePoint,proto3" json:"safe_point,omitempty"`
}

func (x *GetGCSafePointResponse) Reset() {
	*x = GetGCSafePointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGCSafePointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGCSafePointResponse) ProtoMessage() {}

func (x *GetGCSafePointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGCSafePointResponse.ProtoReflect.Descriptor instead.
func (*GetGCSafePointResponse) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{60}
}

func (x *GetGCSafePointResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetGCSafePointResponse) GetSafePoint() uint64 {
	if x != nil {
		return x.SafePoint
	}
	return 0
}

type UpdateGCSafePointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	SafePoint uint64         `protobuf:"varint,2,opt,name=safe_point,json=safePoint,proto3" json:"safe_point,omitempty"`
}

func (x *UpdateGCSafePointRequest) Reset() {
	*x = UpdateGCSafePointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGCSafePointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGCSafePointRequest) ProtoMessage() {}

func (x *UpdateGCSafePointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGCSafePointRequest.ProtoReflect.Descriptor instead.
func (*UpdateGCSafePointRequest) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{61}
}

func (x *UpdateGCSafePointRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UpdateGCSafePointRequest) GetSafePoint() uint64 {
	if x != nil {
		return x.SafePoint
	}
	return 0
}

type UpdateGCSafePointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	NewSafePoint uint64          `protobuf:"varint,2,opt,name=new_safe_point,json=newSafePoint,proto3" json:"new_safe_point,omitempty"`
}

func (x *UpdateGCSafePointResponse) Reset() {
	*x = UpdateGCSafePointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGCSafePointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGCSafePointResponse) ProtoMessage() {}

func (x *UpdateGCSafePointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGCSafePointResponse.ProtoReflect.Descriptor instead.
func (*UpdateGCSafePointResponse) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{62}
}

func (x *UpdateGCSafePointResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UpdateGCSafePointResponse) GetNewSafePoint() uint64 {
	if x != nil {
		return x.NewSafePoint
	}
	return 0
}

type UpdateServiceGCSafePointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	ServiceId []byte         `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	TTL       int64          `protobuf:"varint,3,opt,name=TTL,proto3" json:"TTL,omitempty"`
	SafePoint uint64         `protobuf:"varint,4,opt,name=safe_point,json=safePoint,proto3" json:"safe_point,omitempty"`
}

func (x *UpdateServiceGCSafePointRequest) Reset() {
	*x = UpdateServiceGCSafePointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServiceGCSafePointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServiceGCSafePointRequest) ProtoMessage() {}

func (x *UpdateServiceGCSafePointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServiceGCSafePointRequest.ProtoReflect.Descriptor instead.
func (*UpdateServiceGCSafePointRequest) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{63}
}

func (x *UpdateServiceGCSafePointRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UpdateServiceGCSafePointRequest) GetServiceId() []byte {
	if x != nil {
		return x.ServiceId
	}
	return nil
}

func (x *UpdateServiceGCSafePointRequest) GetTTL() int64 {
	if x != nil {
		return x.TTL
	}
	return 0
}

func (x *UpdateServiceGCSafePointRequest) GetSafePoint() uint64 {
	if x != nil {
		return x.SafePoint
	}
	return 0
}

type UpdateServiceGCSafePointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	ServiceId    []byte          `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	TTL          int64           `protobuf:"varint,3,opt,name=TTL,proto3" json:"TTL,omitempty"`
	MinSafePoint uint64          `protobuf:"varint,4,opt,name=min_safe_point,json=minSafePoint,proto3" json:"min_safe_point,omitempty"`
}

func (x *UpdateServiceGCSafePointResponse) Reset() {
	*x = UpdateServiceGCSafePointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServiceGCSafePointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServiceGCSafePointResponse) ProtoMessage() {}

func (x *UpdateServiceGCSafePointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServiceGCSafePointResponse.ProtoReflect.Descriptor instead.
func (*UpdateServiceGCSafePointResponse) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{64}
}

func (x *UpdateServiceGCSafePointResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UpdateServiceGCSafePointResponse) GetServiceId() []byte {
	if x != nil {
		return x.ServiceId
	}
	return nil
}

func (x *UpdateServiceGCSafePointResponse) GetTTL() int64 {
	if x != nil {
		return x.TTL
	}
	return 0
}

func (x *UpdateServiceGCSafePointResponse) GetMinSafePoint() uint64 {
	if x != nil {
		return x.MinSafePoint
	}
	return 0
}

type RegionStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bytes read/written during this period.
	BytesWritten uint64 `protobuf:"varint,1,opt,name=bytes_written,json=bytesWritten,proto3" json:"bytes_written,omitempty"`
	BytesRead    uint64 `protobuf:"varint,2,opt,name=bytes_read,json=bytesRead,proto3" json:"bytes_read,omitempty"`
	// Keys read/written during this period.
	KeysWritten uint64 `protobuf:"varint,3,opt,name=keys_written,json=keysWritten,proto3" json:"keys_written,omitempty"`
	KeysRead    uint64 `protobuf:"varint,4,opt,name=keys_read,json=keysRead,proto3" json:"keys_read,omitempty"`
}

func (x *RegionStat) Reset() {
	*x = RegionStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionStat) ProtoMessage() {}

func (x *RegionStat) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionStat.ProtoReflect.Descriptor instead.
func (*RegionStat) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{65}
}

func (x *RegionStat) GetBytesWritten() uint64 {
	if x != nil {
		return x.BytesWritten
	}
	return 0
}

func (x *RegionStat) GetBytesRead() uint64 {
	if x != nil {
		return x.BytesRead
	}
	return 0
}

func (x *RegionStat) GetKeysWritten() uint64 {
	if x != nil {
		return x.KeysWritten
	}
	return 0
}

func (x *RegionStat) GetKeysRead() uint64 {
	if x != nil {
		return x.KeysRead
	}
	return 0
}

type SyncRegionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Member *Member        `protobuf:"bytes,2,opt,name=member,proto3" json:"member,omitempty"`
	// the follower PD will use the start index to locate historical changes
	// that require synchronization.
	StartIndex uint64 `protobuf:"varint,3,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
}

func (x *SyncRegionRequest) Reset() {
	*x = SyncRegionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncRegionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncRegionRequest) ProtoMessage() {}

func (x *SyncRegionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncRegionRequest.ProtoReflect.Descriptor instead.
func (*SyncRegionRequest) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{66}
}

func (x *SyncRegionRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SyncRegionRequest) GetMember() *Member {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *SyncRegionRequest) GetStartIndex() uint64 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

type SyncRegionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// the leader PD will send the repsonds include
	// changed regions records and the index of the first record.
	Regions       []*metapb.Region `protobuf:"bytes,2,rep,name=regions,proto3" json:"regions,omitempty"`
	StartIndex    uint64           `protobuf:"varint,3,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
	RegionStats   []*RegionStat    `protobuf:"bytes,4,rep,name=region_stats,json=regionStats,proto3" json:"region_stats,omitempty"`
	RegionLeaders []*metapb.Peer   `protobuf:"bytes,5,rep,name=region_leaders,json=regionLeaders,proto3" json:"region_leaders,omitempty"`
}

func (x *SyncRegionResponse) Reset() {
	*x = SyncRegionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncRegionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncRegionResponse) ProtoMessage() {}

func (x *SyncRegionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncRegionResponse.ProtoReflect.Descriptor instead.
func (*SyncRegionResponse) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{67}
}

func (x *SyncRegionResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SyncRegionResponse) GetRegions() []*metapb.Region {
	if x != nil {
		return x.Regions
	}
	return nil
}

func (x *SyncRegionResponse) GetStartIndex() uint64 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

func (x *SyncRegionResponse) GetRegionStats() []*RegionStat {
	if x != nil {
		return x.RegionStats
	}
	return nil
}

func (x *SyncRegionResponse) GetRegionLeaders() []*metapb.Peer {
	if x != nil {
		return x.RegionLeaders
	}
	return nil
}

type GetOperatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header   *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	RegionId uint64         `protobuf:"varint,2,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
}

func (x *GetOperatorRequest) Reset() {
	*x = GetOperatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOperatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperatorRequest) ProtoMessage() {}

func (x *GetOperatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperatorRequest.ProtoReflect.Descriptor instead.
func (*GetOperatorRequest) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{68}
}

func (x *GetOperatorRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetOperatorRequest) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

type GetOperatorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header   *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	RegionId uint64          `protobuf:"varint,2,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	Desc     []byte          `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Status   OperatorStatus  `protobuf:"varint,4,opt,name=status,proto3,enum=pdpb.OperatorStatus" json:"status,omitempty"`
	Kind     []byte          `protobuf:"bytes,5,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *GetOperatorResponse) Reset() {
	*x = GetOperatorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOperatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperatorResponse) ProtoMessage() {}

func (x *GetOperatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperatorResponse.ProtoReflect.Descriptor instead.
func (*GetOperatorResponse) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{69}
}

func (x *GetOperatorResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetOperatorResponse) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *GetOperatorResponse) GetDesc() []byte {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *GetOperatorResponse) GetStatus() OperatorStatus {
	if x != nil {
		return x.Status
	}
	return OperatorStatus_SUCCESS
}

func (x *GetOperatorResponse) GetKind() []byte {
	if x != nil {
		return x.Kind
	}
	return nil
}

type SyncMaxTSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	MaxTs  *Timestamp     `protobuf:"bytes,2,opt,name=max_ts,json=maxTs,proto3" json:"max_ts,omitempty"`
	// If skip_check is true, the sync will try to write the max_ts without checking whether it's bigger.
	SkipCheck bool `protobuf:"varint,3,opt,name=skip_check,json=skipCheck,proto3" json:"skip_check,omitempty"`
}

func (x *SyncMaxTSRequest) Reset() {
	*x = SyncMaxTSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncMaxTSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncMaxTSRequest) ProtoMessage() {}

func (x *SyncMaxTSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncMaxTSRequest.ProtoReflect.Descriptor instead.
func (*SyncMaxTSRequest) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{70}
}

func (x *SyncMaxTSRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SyncMaxTSRequest) GetMaxTs() *Timestamp {
	if x != nil {
		return x.MaxTs
	}
	return nil
}

func (x *SyncMaxTSRequest) GetSkipCheck() bool {
	if x != nil {
		return x.SkipCheck
	}
	return false
}

type SyncMaxTSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header     *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	MaxLocalTs *Timestamp      `protobuf:"bytes,2,opt,name=max_local_ts,json=maxLocalTs,proto3" json:"max_local_ts,omitempty"`
	SyncedDcs  []string        `protobuf:"bytes,3,rep,name=synced_dcs,json=syncedDcs,proto3" json:"synced_dcs,omitempty"`
}

func (x *SyncMaxTSResponse) Reset() {
	*x = SyncMaxTSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncMaxTSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncMaxTSResponse) ProtoMessage() {}

func (x *SyncMaxTSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncMaxTSResponse.ProtoReflect.Descriptor instead.
func (*SyncMaxTSResponse) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{71}
}

func (x *SyncMaxTSResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SyncMaxTSResponse) GetMaxLocalTs() *Timestamp {
	if x != nil {
		return x.MaxLocalTs
	}
	return nil
}

func (x *SyncMaxTSResponse) GetSyncedDcs() []string {
	if x != nil {
		return x.SyncedDcs
	}
	return nil
}

type SplitRegionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header     *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	SplitKeys  [][]byte       `protobuf:"bytes,2,rep,name=split_keys,json=splitKeys,proto3" json:"split_keys,omitempty"`
	RetryLimit uint64         `protobuf:"varint,3,opt,name=retry_limit,json=retryLimit,proto3" json:"retry_limit,omitempty"`
}

func (x *SplitRegionsRequest) Reset() {
	*x = SplitRegionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitRegionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitRegionsRequest) ProtoMessage() {}

func (x *SplitRegionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitRegionsRequest.ProtoReflect.Descriptor instead.
func (*SplitRegionsRequest) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{72}
}

func (x *SplitRegionsRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SplitRegionsRequest) GetSplitKeys() [][]byte {
	if x != nil {
		return x.SplitKeys
	}
	return nil
}

func (x *SplitRegionsRequest) GetRetryLimit() uint64 {
	if x != nil {
		return x.RetryLimit
	}
	return 0
}

type SplitRegionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header             *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	FinishedPercentage uint64          `protobuf:"varint,2,opt,name=finished_percentage,json=finishedPercentage,proto3" json:"finished_percentage,omitempty"`
	RegionsId          []uint64        `protobuf:"varint,3,rep,packed,name=regions_id,json=regionsId,proto3" json:"regions_id,omitempty"`
}

func (x *SplitRegionsResponse) Reset() {
	*x = SplitRegionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitRegionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitRegionsResponse) ProtoMessage() {}

func (x *SplitRegionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitRegionsResponse.ProtoReflect.Descriptor instead.
func (*SplitRegionsResponse) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{73}
}

func (x *SplitRegionsResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SplitRegionsResponse) GetFinishedPercentage() uint64 {
	if x != nil {
		return x.FinishedPercentage
	}
	return 0
}

func (x *SplitRegionsResponse) GetRegionsId() []uint64 {
	if x != nil {
		return x.RegionsId
	}
	return nil
}

type SplitAndScatterRegionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header     *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	SplitKeys  [][]byte       `protobuf:"bytes,2,rep,name=split_keys,json=splitKeys,proto3" json:"split_keys,omitempty"`
	Group      string         `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	RetryLimit uint64         `protobuf:"varint,4,opt,name=retry_limit,json=retryLimit,proto3" json:"retry_limit,omitempty"`
}

func (x *SplitAndScatterRegionsRequest) Reset() {
	*x = SplitAndScatterRegionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitAndScatterRegionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitAndScatterRegionsRequest) ProtoMessage() {}

func (x *SplitAndScatterRegionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitAndScatterRegionsRequest.ProtoReflect.Descriptor instead.
func (*SplitAndScatterRegionsRequest) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{74}
}

func (x *SplitAndScatterRegionsRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SplitAndScatterRegionsRequest) GetSplitKeys() [][]byte {
	if x != nil {
		return x.SplitKeys
	}
	return nil
}

func (x *SplitAndScatterRegionsRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *SplitAndScatterRegionsRequest) GetRetryLimit() uint64 {
	if x != nil {
		return x.RetryLimit
	}
	return 0
}

type SplitAndScatterRegionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header                    *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	SplitFinishedPercentage   uint64          `protobuf:"varint,2,opt,name=split_finished_percentage,json=splitFinishedPercentage,proto3" json:"split_finished_percentage,omitempty"`
	ScatterFinishedPercentage uint64          `protobuf:"varint,3,opt,name=scatter_finished_percentage,json=scatterFinishedPercentage,proto3" json:"scatter_finished_percentage,omitempty"`
	RegionsId                 []uint64        `protobuf:"varint,4,rep,packed,name=regions_id,json=regionsId,proto3" json:"regions_id,omitempty"`
}

func (x *SplitAndScatterRegionsResponse) Reset() {
	*x = SplitAndScatterRegionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitAndScatterRegionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitAndScatterRegionsResponse) ProtoMessage() {}

func (x *SplitAndScatterRegionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitAndScatterRegionsResponse.ProtoReflect.Descriptor instead.
func (*SplitAndScatterRegionsResponse) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{75}
}

func (x *SplitAndScatterRegionsResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SplitAndScatterRegionsResponse) GetSplitFinishedPercentage() uint64 {
	if x != nil {
		return x.SplitFinishedPercentage
	}
	return 0
}

func (x *SplitAndScatterRegionsResponse) GetScatterFinishedPercentage() uint64 {
	if x != nil {
		return x.ScatterFinishedPercentage
	}
	return 0
}

func (x *SplitAndScatterRegionsResponse) GetRegionsId() []uint64 {
	if x != nil {
		return x.RegionsId
	}
	return nil
}

type GetDCLocationInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header     *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	DcLocation string         `protobuf:"bytes,2,opt,name=dc_location,json=dcLocation,proto3" json:"dc_location,omitempty"`
}

func (x *GetDCLocationInfoRequest) Reset() {
	*x = GetDCLocationInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDCLocationInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDCLocationInfoRequest) ProtoMessage() {}

func (x *GetDCLocationInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDCLocationInfoRequest.ProtoReflect.Descriptor instead.
func (*GetDCLocationInfoRequest) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{76}
}

func (x *GetDCLocationInfoRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetDCLocationInfoRequest) GetDcLocation() string {
	if x != nil {
		return x.DcLocation
	}
	return ""
}

type GetDCLocationInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// suffix sign
	Suffix int32 `protobuf:"varint,2,opt,name=suffix,proto3" json:"suffix,omitempty"`
	// max_ts will be included into this response if PD leader think the receiver needs,
	// which it's set when the number of the max suffix bits changes.
	MaxTs *Timestamp `protobuf:"bytes,3,opt,name=max_ts,json=maxTs,proto3" json:"max_ts,omitempty"`
}

func (x *GetDCLocationInfoResponse) Reset() {
	*x = GetDCLocationInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDCLocationInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDCLocationInfoResponse) ProtoMessage() {}

func (x *GetDCLocationInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDCLocationInfoResponse.ProtoReflect.Descriptor instead.
func (*GetDCLocationInfoResponse) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{77}
}

func (x *GetDCLocationInfoResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetDCLocationInfoResponse) GetSuffix() int32 {
	if x != nil {
		return x.Suffix
	}
	return 0
}

func (x *GetDCLocationInfoResponse) GetMaxTs() *Timestamp {
	if x != nil {
		return x.MaxTs
	}
	return nil
}

type QueryStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GC                     uint64 `protobuf:"varint,1,opt,name=GC,proto3" json:"GC,omitempty"`
	Get                    uint64 `protobuf:"varint,2,opt,name=Get,proto3" json:"Get,omitempty"`
	Scan                   uint64 `protobuf:"varint,3,opt,name=Scan,proto3" json:"Scan,omitempty"`
	Coprocessor            uint64 `protobuf:"varint,4,opt,name=Coprocessor,proto3" json:"Coprocessor,omitempty"`
	Delete                 uint64 `protobuf:"varint,5,opt,name=Delete,proto3" json:"Delete,omitempty"`
	DeleteRange            uint64 `protobuf:"varint,6,opt,name=DeleteRange,proto3" json:"DeleteRange,omitempty"`
	Put                    uint64 `protobuf:"varint,7,opt,name=Put,proto3" json:"Put,omitempty"`
	Prewrite               uint64 `protobuf:"varint,8,opt,name=Prewrite,proto3" json:"Prewrite,omitempty"`
	AcquirePessimisticLock uint64 `protobuf:"varint,9,opt,name=AcquirePessimisticLock,proto3" json:"AcquirePessimisticLock,omitempty"`
	Commit                 uint64 `protobuf:"varint,10,opt,name=Commit,proto3" json:"Commit,omitempty"`
	Rollback               uint64 `protobuf:"varint,11,opt,name=Rollback,proto3" json:"Rollback,omitempty"`
}

func (x *QueryStats) Reset() {
	*x = QueryStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdpb_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStats) ProtoMessage() {}

func (x *QueryStats) ProtoReflect() protoreflect.Message {
	mi := &file_pdpb_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStats.ProtoReflect.Descriptor instead.
func (*QueryStats) Descriptor() ([]byte, []int) {
	return file_pdpb_proto_rawDescGZIP(), []int{78}
}

func (x *QueryStats) GetGC() uint64 {
	if x != nil {
		return x.GC
	}
	return 0
}

func (x *QueryStats) GetGet() uint64 {
	if x != nil {
		return x.Get
	}
	return 0
}

func (x *QueryStats) GetScan() uint64 {
	if x != nil {
		return x.Scan
	}
	return 0
}

func (x *QueryStats) GetCoprocessor() uint64 {
	if x != nil {
		return x.Coprocessor
	}
	return 0
}

func (x *QueryStats) GetDelete() uint64 {
	if x != nil {
		return x.Delete
	}
	return 0
}

func (x *QueryStats) GetDeleteRange() uint64 {
	if x != nil {
		return x.DeleteRange
	}
	return 0
}

func (x *QueryStats) GetPut() uint64 {
	if x != nil {
		return x.Put
	}
	return 0
}

func (x *QueryStats) GetPrewrite() uint64 {
	if x != nil {
		return x.Prewrite
	}
	return 0
}

func (x *QueryStats) GetAcquirePessimisticLock() uint64 {
	if x != nil {
		return x.AcquirePessimisticLock
	}
	return 0
}

func (x *QueryStats) GetCommit() uint64 {
	if x != nil {
		return x.Commit
	}
	return 0
}

func (x *QueryStats) GetRollback() uint64 {
	if x != nil {
		return x.Rollback
	}
	return 0
}

var File_pdpb_proto protoreflect.FileDescriptor

var file_pdpb_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x70, 0x64,
	0x70, 0x62, 0x1a, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0d, 0x65, 0x72, 0x61, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x13, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14,
	0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x72, 0x75, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4b, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x52, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x46, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x70, 0x64, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x70,
	0x0a, 0x0a, 0x54, 0x73, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x63, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x63, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x62, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x62, 0x69,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x42, 0x69, 0x74, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x0b, 0x54, 0x73, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x64,
	0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x8c, 0x01, 0x0a, 0x10, 0x42, 0x6f, 0x6f, 0x74,
	0x73, 0x74, 0x72, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70,
	0x62, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x26,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x97, 0x01, 0x0a, 0x11, 0x42, 0x6f, 0x6f, 0x74, 0x73,
	0x74, 0x72, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x12, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x44, 0x0a, 0x15, 0x49, 0x73, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x64, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x6a, 0x0a, 0x16, 0x49, 0x73, 0x42, 0x6f, 0x6f, 0x74,
	0x73, 0x74, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x22, 0x3d, 0x0a, 0x0e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x22, 0x4f, 0x0a, 0x0f, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x59, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x22, 0x8d, 0x01,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x63, 0x0a,
	0x0f, 0x50, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a,
	0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x10, 0x50, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7c, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x38, 0x0a, 0x18, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x6d, 0x62, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x16, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x6f, 0x6d, 0x62, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x22, 0x6b, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x25, 0x0a, 0x06, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x06,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x22, 0x5e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x64, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0xf8, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x0a, 0x64, 0x6f, 0x77, 0x6e,
	0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x64, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x64,
	0x6f, 0x77, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x0d, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x0c, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x65, 0x72, 0x73, 0x4a, 0x04, 0x08, 0x04, 0x10,
	0x05, 0x22, 0x60, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x64, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x12, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x64, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e,
	0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x65, 0x6e, 0x64,
	0x4b, 0x65, 0x79, 0x22, 0xb9, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x0a,
	0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x09, 0x64, 0x6f, 0x77, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x0d,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x0c, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x65, 0x72, 0x73, 0x22,
	0xc6, 0x01, 0x0a, 0x13, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x73, 0x12, 0x26, 0x0a, 0x07, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x07, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x26, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x46, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x22, 0x73, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x71, 0x0a, 0x17, 0x50, 0x75, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x29, 0x0a,
	0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x48, 0x0a, 0x18, 0x50, 0x75, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x22, 0xa4, 0x02, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x63, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x63, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x40, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0xfc, 0x02, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2d,
	0x0a, 0x0b, 0x65, 0x74, 0x63, 0x64, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x0a, 0x65, 0x74, 0x63, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x65, 0x0a,
	0x15, 0x74, 0x73, 0x6f, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70,
	0x64, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x73, 0x6f, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x13, 0x74, 0x73, 0x6f, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x1a, 0x54, 0x0a, 0x18, 0x54, 0x73, 0x6f, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x50, 0x0a, 0x09, 0x50, 0x65,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x77,
	0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xc6, 0x05, 0x0a,
	0x16, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x06,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x2e, 0x0a, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x64, 0x6f, 0x77, 0x6e, 0x50, 0x65, 0x65,
	0x72, 0x73, 0x12, 0x31, 0x0a, 0x0d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65,
	0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x0c, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x77,
	0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6b, 0x65, 0x79,
	0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x6b, 0x65, 0x79, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x6b, 0x65, 0x79, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74,
	0x65, 0x72, 0x6d, 0x12, 0x5a, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x31, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4a,
	0x04, 0x08, 0x0b, 0x10, 0x0c, 0x22, 0x68, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x65, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65, 0x72, 0x61,
	0x66, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x3a, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x65, 0x72, 0x56, 0x32, 0x12,
	0x2a, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65,
	0x65, 0x72, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x56, 0x0a, 0x0e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x05, 0x70, 0x65,
	0x65, 0x72, 0x73, 0x22, 0x2f, 0x0a, 0x05, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x22, 0x4c, 0x0a, 0x0b, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x22, 0xd0, 0x03, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x65, 0x72, 0x12,
	0x3d, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0c, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x2d, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x65,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70,
	0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x65,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x05, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x05,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x64,
	0x70, 0x62, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x73, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0e, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x76, 0x32, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x65, 0x65, 0x72, 0x56, 0x32, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x65, 0x65, 0x72, 0x56, 0x32, 0x22, 0x66, 0x0a, 0x0f, 0x41, 0x73, 0x6b, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x86, 0x01,
	0x0a, 0x10, 0x41, 0x73, 0x6b, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x50,
	0x65, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x65,
	0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x24,
	0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x22, 0x43, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x64,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x8c, 0x01, 0x0a, 0x14, 0x41, 0x73,
	0x6b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x26, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4f, 0x0a, 0x07, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x6e,
	0x65, 0x77, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x66, 0x0a, 0x15, 0x41, 0x73, 0x6b,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x49, 0x44, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x22, 0x70, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x07, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x48, 0x0a, 0x18, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x5c, 0x0a,
	0x0c, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x34, 0x0a, 0x0a, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x96, 0x01, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x72, 0x65, 0x61, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65,
	0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x64, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0xa0, 0x07, 0x0a, 0x0a, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6e, 0x61,
	0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x6e, 0x61, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x30, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6e, 0x61,
	0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x53, 0x6e, 0x61, 0x70, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6e, 0x61,
	0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x6e, 0x61, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x62, 0x75, 0x73, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x42, 0x75, 0x73, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6b,
	0x65, 0x79, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x64, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x0a, 0x63, 0x70,
	0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x09, 0x63, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0d, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x69, 0x6f, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6f, 0x52, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x36, 0x0a, 0x0e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x6f, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x64, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0c, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x49, 0x6f, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x0c, 0x6f, 0x70, 0x5f,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x69,
	0x72, 0x52, 0x0b, 0x6f, 0x70, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2d,
	0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x52, 0x09, 0x70, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x31, 0x0a,
	0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x03, 0x28, 0x04, 0x52, 0x10, 0x64, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x64, 0x22, 0x8e, 0x01,
	0x0a, 0x0a, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3c, 0x0a, 0x0a,
	0x72, 0x61, 0x66, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62,
	0x2e, 0x52, 0x61, 0x66, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x09, 0x72, 0x61, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x42,
	0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x33, 0x0a,
	0x0c, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0b, 0x70, 0x65, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x34, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x7c, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x28, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x73, 0x22, 0xa5, 0x02, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x54,
	0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a,
	0x17, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x22, 0x88, 0x02,
	0x0a, 0x14, 0x53, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x06,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x76, 0x0a, 0x15, 0x53, 0x63, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x2f, 0x0a, 0x13, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x22, 0x44, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x47, 0x43, 0x53, 0x61, 0x66, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x64, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x65, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x47, 0x43, 0x53,
	0x61, 0x66, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x73, 0x61, 0x66, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x66, 0x0a,
	0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x43, 0x53, 0x61, 0x66, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x64, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x61, 0x66, 0x65,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x6f, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x43, 0x53, 0x61, 0x66, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x53, 0x61, 0x66,
	0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x43, 0x53, 0x61, 0x66, 0x65, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x64, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x54, 0x4c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x54, 0x54, 0x4c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x66, 0x65,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x61,
	0x66, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xa7, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x43, 0x53, 0x61, 0x66, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x54, 0x4c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x54, 0x54, 0x4c, 0x12, 0x24, 0x0a, 0x0e, 0x6d,
	0x69, 0x6e, 0x5f, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x53, 0x61, 0x66, 0x65, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x22, 0x90, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72,
	0x69, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x61, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x77, 0x72, 0x69,
	0x74, 0x74, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x73,
	0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x73, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73,
	0x52, 0x65, 0x61, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x11, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x64, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xf7,
	0x01, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x33,
	0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0x5e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xb6, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12,
	0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x22, 0x86, 0x01, 0x0a, 0x10, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x61, 0x78, 0x54, 0x53, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x54, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x6b, 0x69, 0x70, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x73, 0x6b, 0x69, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x22, 0x93, 0x01, 0x0a, 0x11, 0x53,
	0x79, 0x6e, 0x63, 0x4d, 0x61, 0x78, 0x54, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x31,
	0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x54,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x64, 0x63, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x44, 0x63, 0x73,
	0x22, 0x82, 0x01, 0x0a, 0x13, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x4b, 0x65, 0x79, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x14, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x13,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x64, 0x22, 0xa2, 0x01, 0x0a,
	0x1d, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x09, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0xe9, 0x01, 0x0a, 0x1e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x63,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x3a, 0x0a, 0x19, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3e,
	0x0a, 0x1b, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x19, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x64, 0x22, 0x68, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x44, 0x43, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x64, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x63, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x63, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44,
	0x43, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x26, 0x0a, 0x06, 0x6d,
	0x61, 0x78, 0x5f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x64,
	0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x6d, 0x61,
	0x78, 0x54, 0x73, 0x22, 0xb8, 0x02, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x47, 0x43, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x47, 0x43, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x47, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x63, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x43,
	0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x50, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x50, 0x72, 0x65, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x50, 0x65, 0x73,
	0x73, 0x69, 0x6d, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4c, 0x6f, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x16, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x50, 0x65, 0x73, 0x73, 0x69,
	0x6d, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x2a, 0x95,
	0x01, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02,
	0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x54, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x53, 0x54, 0x52,
	0x41, 0x50, 0x50, 0x45, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x4f, 0x52, 0x45,
	0x5f, 0x54, 0x4f, 0x4d, 0x42, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14,
	0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x53, 0x54, 0x52, 0x41,
	0x50, 0x50, 0x45, 0x44, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50,
	0x41, 0x54, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x05,
	0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x06, 0x2a, 0x34, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x58, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x55, 0x53, 0x45, 0x4b, 0x45, 0x59, 0x10, 0x02, 0x2a, 0x50, 0x0a, 0x0e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54,
	0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10,
	0x03, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x2a, 0xad,
	0x01, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0a, 0x0a, 0x06,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x43, 0x10, 0x01,
	0x12, 0x07, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x63, 0x61,
	0x6e, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x05,
	0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x10,
	0x06, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x75, 0x74, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x72,
	0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x63, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x50, 0x65, 0x73, 0x73, 0x69, 0x6d, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4c, 0x6f,
	0x63, 0x6b, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x10, 0x0a,
	0x12, 0x0c, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x0b, 0x32, 0xc6,
	0x11, 0x0a, 0x02, 0x50, 0x44, 0x12, 0x41, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x17, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70,
	0x64, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x03, 0x54, 0x73, 0x6f, 0x12,
	0x10, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x54, 0x73, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x11, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x54, 0x73, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x3e, 0x0a, 0x09, 0x42, 0x6f,
	0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x12, 0x16, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x42,
	0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0e, 0x49, 0x73,
	0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x1b, 0x2e, 0x70,
	0x64, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x64, 0x70, 0x62,
	0x2e, 0x49, 0x73, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x07, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x49, 0x44, 0x12, 0x14, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x64, 0x70,
	0x62, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x15, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x3b, 0x0a, 0x08, 0x50, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x15, 0x2e, 0x70,
	0x64, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x19, 0x2e,
	0x70, 0x64, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x1b, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x3e, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x65, 0x76, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x70,
	0x64, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x46, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44,
	0x12, 0x1a, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70,
	0x64, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0b, 0x53, 0x63, 0x61, 0x6e, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x63,
	0x61, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a,
	0x08, 0x41, 0x73, 0x6b, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x15, 0x2e, 0x70, 0x64, 0x70, 0x62,
	0x2e, 0x41, 0x73, 0x6b, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x6b, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x47, 0x0a,
	0x0b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x18, 0x2e, 0x70,
	0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x4a, 0x0a, 0x0d, 0x41, 0x73, 0x6b, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x1a, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x41,
	0x73, 0x6b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x6b, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x53, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x1d, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x2e, 0x70, 0x64,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x64, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x10,
	0x50, 0x75, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1d, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4a, 0x0a, 0x0d, 0x53, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x47, 0x43, 0x53, 0x61, 0x66, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x1b, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x43, 0x53, 0x61, 0x66, 0x65,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70,
	0x64, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x43, 0x53, 0x61, 0x66, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x43, 0x53, 0x61, 0x66, 0x65, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x1e, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x43, 0x53, 0x61, 0x66, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x43, 0x53, 0x61, 0x66, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x43, 0x53, 0x61, 0x66, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x25, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x43, 0x53, 0x61, 0x66, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x43, 0x53, 0x61,
	0x66, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x46, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x17, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x64, 0x70, 0x62,
	0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x44, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x3e, 0x0a, 0x09, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x61, 0x78, 0x54, 0x53, 0x12, 0x16, 0x2e, 0x70,
	0x64, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x61, 0x78, 0x54, 0x53, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63,
	0x4d, 0x61, 0x78, 0x54, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x47, 0x0a, 0x0c, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x19, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x64, 0x70,
	0x62, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x16, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x41, 0x6e, 0x64, 0x53, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x41,
	0x6e, 0x64, 0x53, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x56, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x43, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x43, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x64, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x43, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x53, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x2e, 0x74,
	0x69, 0x6b, 0x76, 0x2e, 0x6b, 0x76, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x2f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x70, 0x2f,
	0x6b, 0x76, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6b, 0x69,
	0x74, 0x65, 0x78, 0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x64, 0x70, 0x62, 0xe0, 0xe2, 0x1e, 0x01,
	0xc8, 0xe2, 0x1e, 0x01, 0xd0, 0xe2, 0x1e, 0x01, 0xd8, 0xa8, 0x08, 0x01, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pdpb_proto_rawDescOnce sync.Once
	file_pdpb_proto_rawDescData = file_pdpb_proto_rawDesc
)

func file_pdpb_proto_rawDescGZIP() []byte {
	file_pdpb_proto_rawDescOnce.Do(func() {
		file_pdpb_proto_rawDescData = protoimpl.X.CompressGZIP(file_pdpb_proto_rawDescData)
	})
	return file_pdpb_proto_rawDescData
}

var file_pdpb_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_pdpb_proto_msgTypes = make([]protoimpl.MessageInfo, 80)
var file_pdpb_proto_goTypes = []interface{}{
	(ErrorType)(0),                                     // 0: pdpb.ErrorType
	(CheckPolicy)(0),                                   // 1: pdpb.CheckPolicy
	(OperatorStatus)(0),                                // 2: pdpb.OperatorStatus
	(QueryKind)(0),                                     // 3: pdpb.QueryKind
	(*RequestHeader)(nil),                              // 4: pdpb.RequestHeader
	(*ResponseHeader)(nil),                             // 5: pdpb.ResponseHeader
	(*Error)(nil),                                      // 6: pdpb.Error
	(*TsoRequest)(nil),                                 // 7: pdpb.TsoRequest
	(*Timestamp)(nil),                                  // 8: pdpb.Timestamp
	(*TsoResponse)(nil),                                // 9: pdpb.TsoResponse
	(*BootstrapRequest)(nil),                           // 10: pdpb.BootstrapRequest
	(*BootstrapResponse)(nil),                          // 11: pdpb.BootstrapResponse
	(*IsBootstrappedRequest)(nil),                      // 12: pdpb.IsBootstrappedRequest
	(*IsBootstrappedResponse)(nil),                     // 13: pdpb.IsBootstrappedResponse
	(*AllocIDRequest)(nil),                             // 14: pdpb.AllocIDRequest
	(*AllocIDResponse)(nil),                            // 15: pdpb.AllocIDResponse
	(*GetStoreRequest)(nil),                            // 16: pdpb.GetStoreRequest
	(*GetStoreResponse)(nil),                           // 17: pdpb.GetStoreResponse
	(*PutStoreRequest)(nil),                            // 18: pdpb.PutStoreRequest
	(*PutStoreResponse)(nil),                           // 19: pdpb.PutStoreResponse
	(*GetAllStoresRequest)(nil),                        // 20: pdpb.GetAllStoresRequest
	(*GetAllStoresResponse)(nil),                       // 21: pdpb.GetAllStoresResponse
	(*GetRegionRequest)(nil),                           // 22: pdpb.GetRegionRequest
	(*GetRegionResponse)(nil),                          // 23: pdpb.GetRegionResponse
	(*GetRegionByIDRequest)(nil),                       // 24: pdpb.GetRegionByIDRequest
	(*ScanRegionsRequest)(nil),                         // 25: pdpb.ScanRegionsRequest
	(*Region)(nil),                                     // 26: pdpb.Region
	(*ScanRegionsResponse)(nil),                        // 27: pdpb.ScanRegionsResponse
	(*GetClusterConfigRequest)(nil),                    // 28: pdpb.GetClusterConfigRequest
	(*GetClusterConfigResponse)(nil),                   // 29: pdpb.GetClusterConfigResponse
	(*PutClusterConfigRequest)(nil),                    // 30: pdpb.PutClusterConfigRequest
	(*PutClusterConfigResponse)(nil),                   // 31: pdpb.PutClusterConfigResponse
	(*Member)(nil),                                     // 32: pdpb.Member
	(*GetMembersRequest)(nil),                          // 33: pdpb.GetMembersRequest
	(*GetMembersResponse)(nil),                         // 34: pdpb.GetMembersResponse
	(*PeerStats)(nil),                                  // 35: pdpb.PeerStats
	(*RegionHeartbeatRequest)(nil),                     // 36: pdpb.RegionHeartbeatRequest
	(*ChangePeer)(nil),                                 // 37: pdpb.ChangePeer
	(*ChangePeerV2)(nil),                               // 38: pdpb.ChangePeerV2
	(*TransferLeader)(nil),                             // 39: pdpb.TransferLeader
	(*Merge)(nil),                                      // 40: pdpb.Merge
	(*SplitRegion)(nil),                                // 41: pdpb.SplitRegion
	(*RegionHeartbeatResponse)(nil),                    // 42: pdpb.RegionHeartbeatResponse
	(*AskSplitRequest)(nil),                            // 43: pdpb.AskSplitRequest
	(*AskSplitResponse)(nil),                           // 44: pdpb.AskSplitResponse
	(*ReportSplitRequest)(nil),                         // 45: pdpb.ReportSplitRequest
	(*ReportSplitResponse)(nil),                        // 46: pdpb.ReportSplitResponse
	(*AskBatchSplitRequest)(nil),                       // 47: pdpb.AskBatchSplitRequest
	(*SplitID)(nil),                                    // 48: pdpb.SplitID
	(*AskBatchSplitResponse)(nil),                      // 49: pdpb.AskBatchSplitResponse
	(*ReportBatchSplitRequest)(nil),                    // 50: pdpb.ReportBatchSplitRequest
	(*ReportBatchSplitResponse)(nil),                   // 51: pdpb.ReportBatchSplitResponse
	(*TimeInterval)(nil),                               // 52: pdpb.TimeInterval
	(*RecordPair)(nil),                                 // 53: pdpb.RecordPair
	(*PeerStat)(nil),                                   // 54: pdpb.PeerStat
	(*StoreStats)(nil),                                 // 55: pdpb.StoreStats
	(*PeerReport)(nil),                                 // 56: pdpb.PeerReport
	(*StoreReport)(nil),                                // 57: pdpb.StoreReport
	(*StoreHeartbeatRequest)(nil),                      // 58: pdpb.StoreHeartbeatRequest
	(*RecoveryPlan)(nil),                               // 59: pdpb.RecoveryPlan
	(*StoreHeartbeatResponse)(nil),                     // 60: pdpb.StoreHeartbeatResponse
	(*ScatterRegionRequest)(nil),                       // 61: pdpb.ScatterRegionRequest
	(*ScatterRegionResponse)(nil),                      // 62: pdpb.ScatterRegionResponse
	(*GetGCSafePointRequest)(nil),                      // 63: pdpb.GetGCSafePointRequest
	(*GetGCSafePointResponse)(nil),                     // 64: pdpb.GetGCSafePointResponse
	(*UpdateGCSafePointRequest)(nil),                   // 65: pdpb.UpdateGCSafePointRequest
	(*UpdateGCSafePointResponse)(nil),                  // 66: pdpb.UpdateGCSafePointResponse
	(*UpdateServiceGCSafePointRequest)(nil),            // 67: pdpb.UpdateServiceGCSafePointRequest
	(*UpdateServiceGCSafePointResponse)(nil),           // 68: pdpb.UpdateServiceGCSafePointResponse
	(*RegionStat)(nil),                                 // 69: pdpb.RegionStat
	(*SyncRegionRequest)(nil),                          // 70: pdpb.SyncRegionRequest
	(*SyncRegionResponse)(nil),                         // 71: pdpb.SyncRegionResponse
	(*GetOperatorRequest)(nil),                         // 72: pdpb.GetOperatorRequest
	(*GetOperatorResponse)(nil),                        // 73: pdpb.GetOperatorResponse
	(*SyncMaxTSRequest)(nil),                           // 74: pdpb.SyncMaxTSRequest
	(*SyncMaxTSResponse)(nil),                          // 75: pdpb.SyncMaxTSResponse
	(*SplitRegionsRequest)(nil),                        // 76: pdpb.SplitRegionsRequest
	(*SplitRegionsResponse)(nil),                       // 77: pdpb.SplitRegionsResponse
	(*SplitAndScatterRegionsRequest)(nil),              // 78: pdpb.SplitAndScatterRegionsRequest
	(*SplitAndScatterRegionsResponse)(nil),             // 79: pdpb.SplitAndScatterRegionsResponse
	(*GetDCLocationInfoRequest)(nil),                   // 80: pdpb.GetDCLocationInfoRequest
	(*GetDCLocationInfoResponse)(nil),                  // 81: pdpb.GetDCLocationInfoResponse
	(*QueryStats)(nil),                                 // 82: pdpb.QueryStats
	nil,                                                // 83: pdpb.GetMembersResponse.TsoAllocatorLeadersEntry
	(*metapb.Store)(nil),                               // 84: metapb.Store
	(*metapb.Region)(nil),                              // 85: metapb.Region
	(*replication_modepb.ReplicationStatus)(nil),       // 86: replication_modepb.ReplicationStatus
	(*metapb.Peer)(nil),                                // 87: metapb.Peer
	(*metapb.Cluster)(nil),                             // 88: metapb.Cluster
	(*replication_modepb.RegionReplicationStatus)(nil), // 89: replication_modepb.RegionReplicationStatus
	(eraftpb.ConfChangeType)(0),                        // 90: eraftpb.ConfChangeType
	(*metapb.RegionEpoch)(nil),                         // 91: metapb.RegionEpoch
	(*raft_serverpb.RaftLocalState)(nil),               // 92: raft_serverpb.RaftLocalState
	(*raft_serverpb.RegionLocalState)(nil),             // 93: raft_serverpb.RegionLocalState
}
var file_pdpb_proto_depIdxs = []int32{
	6,   // 0: pdpb.ResponseHeader.error:type_name -> pdpb.Error
	0,   // 1: pdpb.Error.type:type_name -> pdpb.ErrorType
	4,   // 2: pdpb.TsoRequest.header:type_name -> pdpb.RequestHeader
	5,   // 3: pdpb.TsoResponse.header:type_name -> pdpb.ResponseHeader
	8,   // 4: pdpb.TsoResponse.timestamp:type_name -> pdpb.Timestamp
	4,   // 5: pdpb.BootstrapRequest.header:type_name -> pdpb.RequestHeader
	84,  // 6: pdpb.BootstrapRequest.store:type_name -> metapb.Store
	85,  // 7: pdpb.BootstrapRequest.region:type_name -> metapb.Region
	5,   // 8: pdpb.BootstrapResponse.header:type_name -> pdpb.ResponseHeader
	86,  // 9: pdpb.BootstrapResponse.replication_status:type_name -> replication_modepb.ReplicationStatus
	4,   // 10: pdpb.IsBootstrappedRequest.header:type_name -> pdpb.RequestHeader
	5,   // 11: pdpb.IsBootstrappedResponse.header:type_name -> pdpb.ResponseHeader
	4,   // 12: pdpb.AllocIDRequest.header:type_name -> pdpb.RequestHeader
	5,   // 13: pdpb.AllocIDResponse.header:type_name -> pdpb.ResponseHeader
	4,   // 14: pdpb.GetStoreRequest.header:type_name -> pdpb.RequestHeader
	5,   // 15: pdpb.GetStoreResponse.header:type_name -> pdpb.ResponseHeader
	84,  // 16: pdpb.GetStoreResponse.store:type_name -> metapb.Store
	55,  // 17: pdpb.GetStoreResponse.stats:type_name -> pdpb.StoreStats
	4,   // 18: pdpb.PutStoreRequest.header:type_name -> pdpb.RequestHeader
	84,  // 19: pdpb.PutStoreRequest.store:type_name -> metapb.Store
	5,   // 20: pdpb.PutStoreResponse.header:type_name -> pdpb.ResponseHeader
	86,  // 21: pdpb.PutStoreResponse.replication_status:type_name -> replication_modepb.ReplicationStatus
	4,   // 22: pdpb.GetAllStoresRequest.header:type_name -> pdpb.RequestHeader
	5,   // 23: pdpb.GetAllStoresResponse.header:type_name -> pdpb.ResponseHeader
	84,  // 24: pdpb.GetAllStoresResponse.stores:type_name -> metapb.Store
	4,   // 25: pdpb.GetRegionRequest.header:type_name -> pdpb.RequestHeader
	5,   // 26: pdpb.GetRegionResponse.header:type_name -> pdpb.ResponseHeader
	85,  // 27: pdpb.GetRegionResponse.region:type_name -> metapb.Region
	87,  // 28: pdpb.GetRegionResponse.leader:type_name -> metapb.Peer
	35,  // 29: pdpb.GetRegionResponse.down_peers:type_name -> pdpb.PeerStats
	87,  // 30: pdpb.GetRegionResponse.pending_peers:type_name -> metapb.Peer
	4,   // 31: pdpb.GetRegionByIDRequest.header:type_name -> pdpb.RequestHeader
	4,   // 32: pdpb.ScanRegionsRequest.header:type_name -> pdpb.RequestHeader
	85,  // 33: pdpb.Region.region:type_name -> metapb.Region
	87,  // 34: pdpb.Region.leader:type_name -> metapb.Peer
	35,  // 35: pdpb.Region.down_peers:type_name -> pdpb.PeerStats
	87,  // 36: pdpb.Region.pending_peers:type_name -> metapb.Peer
	5,   // 37: pdpb.ScanRegionsResponse.header:type_name -> pdpb.ResponseHeader
	85,  // 38: pdpb.ScanRegionsResponse.region_metas:type_name -> metapb.Region
	87,  // 39: pdpb.ScanRegionsResponse.leaders:type_name -> metapb.Peer
	26,  // 40: pdpb.ScanRegionsResponse.regions:type_name -> pdpb.Region
	4,   // 41: pdpb.GetClusterConfigRequest.header:type_name -> pdpb.RequestHeader
	5,   // 42: pdpb.GetClusterConfigResponse.header:type_name -> pdpb.ResponseHeader
	88,  // 43: pdpb.GetClusterConfigResponse.cluster:type_name -> metapb.Cluster
	4,   // 44: pdpb.PutClusterConfigRequest.header:type_name -> pdpb.RequestHeader
	88,  // 45: pdpb.PutClusterConfigRequest.cluster:type_name -> metapb.Cluster
	5,   // 46: pdpb.PutClusterConfigResponse.header:type_name -> pdpb.ResponseHeader
	4,   // 47: pdpb.GetMembersRequest.header:type_name -> pdpb.RequestHeader
	5,   // 48: pdpb.GetMembersResponse.header:type_name -> pdpb.ResponseHeader
	32,  // 49: pdpb.GetMembersResponse.members:type_name -> pdpb.Member
	32,  // 50: pdpb.GetMembersResponse.leader:type_name -> pdpb.Member
	32,  // 51: pdpb.GetMembersResponse.etcd_leader:type_name -> pdpb.Member
	83,  // 52: pdpb.GetMembersResponse.tso_allocator_leaders:type_name -> pdpb.GetMembersResponse.TsoAllocatorLeadersEntry
	87,  // 53: pdpb.PeerStats.peer:type_name -> metapb.Peer
	4,   // 54: pdpb.RegionHeartbeatRequest.header:type_name -> pdpb.RequestHeader
	85,  // 55: pdpb.RegionHeartbeatRequest.region:type_name -> metapb.Region
	87,  // 56: pdpb.RegionHeartbeatRequest.leader:type_name -> metapb.Peer
	35,  // 57: pdpb.RegionHeartbeatRequest.down_peers:type_name -> pdpb.PeerStats
	87,  // 58: pdpb.RegionHeartbeatRequest.pending_peers:type_name -> metapb.Peer
	52,  // 59: pdpb.RegionHeartbeatRequest.interval:type_name -> pdpb.TimeInterval
	89,  // 60: pdpb.RegionHeartbeatRequest.replication_status:type_name -> replication_modepb.RegionReplicationStatus
	82,  // 61: pdpb.RegionHeartbeatRequest.query_stats:type_name -> pdpb.QueryStats
	87,  // 62: pdpb.ChangePeer.peer:type_name -> metapb.Peer
	90,  // 63: pdpb.ChangePeer.change_type:type_name -> eraftpb.ConfChangeType
	37,  // 64: pdpb.ChangePeerV2.changes:type_name -> pdpb.ChangePeer
	87,  // 65: pdpb.TransferLeader.peer:type_name -> metapb.Peer
	87,  // 66: pdpb.TransferLeader.peers:type_name -> metapb.Peer
	85,  // 67: pdpb.Merge.target:type_name -> metapb.Region
	1,   // 68: pdpb.SplitRegion.policy:type_name -> pdpb.CheckPolicy
	5,   // 69: pdpb.RegionHeartbeatResponse.header:type_name -> pdpb.ResponseHeader
	37,  // 70: pdpb.RegionHeartbeatResponse.change_peer:type_name -> pdpb.ChangePeer
	39,  // 71: pdpb.RegionHeartbeatResponse.transfer_leader:type_name -> pdpb.TransferLeader
	91,  // 72: pdpb.RegionHeartbeatResponse.region_epoch:type_name -> metapb.RegionEpoch
	87,  // 73: pdpb.RegionHeartbeatResponse.target_peer:type_name -> metapb.Peer
	40,  // 74: pdpb.RegionHeartbeatResponse.merge:type_name -> pdpb.Merge
	41,  // 75: pdpb.RegionHeartbeatResponse.split_region:type_name -> pdpb.SplitRegion
	38,  // 76: pdpb.RegionHeartbeatResponse.change_peer_v2:type_name -> pdpb.ChangePeerV2
	4,   // 77: pdpb.AskSplitRequest.header:type_name -> pdpb.RequestHeader
	85,  // 78: pdpb.AskSplitRequest.region:type_name -> metapb.Region
	5,   // 79: pdpb.AskSplitResponse.header:type_name -> pdpb.ResponseHeader
	4,   // 80: pdpb.ReportSplitRequest.header:type_name -> pdpb.RequestHeader
	85,  // 81: pdpb.ReportSplitRequest.left:type_name -> metapb.Region
	85,  // 82: pdpb.ReportSplitRequest.right:type_name -> metapb.Region
	5,   // 83: pdpb.ReportSplitResponse.header:type_name -> pdpb.ResponseHeader
	4,   // 84: pdpb.AskBatchSplitRequest.header:type_name -> pdpb.RequestHeader
	85,  // 85: pdpb.AskBatchSplitRequest.region:type_name -> metapb.Region
	5,   // 86: pdpb.AskBatchSplitResponse.header:type_name -> pdpb.ResponseHeader
	48,  // 87: pdpb.AskBatchSplitResponse.ids:type_name -> pdpb.SplitID
	4,   // 88: pdpb.ReportBatchSplitRequest.header:type_name -> pdpb.RequestHeader
	85,  // 89: pdpb.ReportBatchSplitRequest.regions:type_name -> metapb.Region
	5,   // 90: pdpb.ReportBatchSplitResponse.header:type_name -> pdpb.ResponseHeader
	82,  // 91: pdpb.PeerStat.query_stats:type_name -> pdpb.QueryStats
	52,  // 92: pdpb.StoreStats.interval:type_name -> pdpb.TimeInterval
	53,  // 93: pdpb.StoreStats.cpu_usages:type_name -> pdpb.RecordPair
	53,  // 94: pdpb.StoreStats.read_io_rates:type_name -> pdpb.RecordPair
	53,  // 95: pdpb.StoreStats.write_io_rates:type_name -> pdpb.RecordPair
	53,  // 96: pdpb.StoreStats.op_latencies:type_name -> pdpb.RecordPair
	54,  // 97: pdpb.StoreStats.peer_stats:type_name -> pdpb.PeerStat
	82,  // 98: pdpb.StoreStats.query_stats:type_name -> pdpb.QueryStats
	92,  // 99: pdpb.PeerReport.raft_state:type_name -> raft_serverpb.RaftLocalState
	93,  // 100: pdpb.PeerReport.region_state:type_name -> raft_serverpb.RegionLocalState
	56,  // 101: pdpb.StoreReport.peer_reports:type_name -> pdpb.PeerReport
	4,   // 102: pdpb.StoreHeartbeatRequest.header:type_name -> pdpb.RequestHeader
	55,  // 103: pdpb.StoreHeartbeatRequest.stats:type_name -> pdpb.StoreStats
	57,  // 104: pdpb.StoreHeartbeatRequest.store_report:type_name -> pdpb.StoreReport
	85,  // 105: pdpb.RecoveryPlan.creates:type_name -> metapb.Region
	85,  // 106: pdpb.RecoveryPlan.updates:type_name -> metapb.Region
	5,   // 107: pdpb.StoreHeartbeatResponse.header:type_name -> pdpb.ResponseHeader
	86,  // 108: pdpb.StoreHeartbeatResponse.replication_status:type_name -> replication_modepb.ReplicationStatus
	59,  // 109: pdpb.StoreHeartbeatResponse.plan:type_name -> pdpb.RecoveryPlan
	4,   // 110: pdpb.ScatterRegionRequest.header:type_name -> pdpb.RequestHeader
	85,  // 111: pdpb.ScatterRegionRequest.region:type_name -> metapb.Region
	87,  // 112: pdpb.ScatterRegionRequest.leader:type_name -> metapb.Peer
	5,   // 113: pdpb.ScatterRegionResponse.header:type_name -> pdpb.ResponseHeader
	4,   // 114: pdpb.GetGCSafePointRequest.header:type_name -> pdpb.RequestHeader
	5,   // 115: pdpb.GetGCSafePointResponse.header:type_name -> pdpb.ResponseHeader
	4,   // 116: pdpb.UpdateGCSafePointRequest.header:type_name -> pdpb.RequestHeader
	5,   // 117: pdpb.UpdateGCSafePointResponse.header:type_name -> pdpb.ResponseHeader
	4,   // 118: pdpb.UpdateServiceGCSafePointRequest.header:type_name -> pdpb.RequestHeader
	5,   // 119: pdpb.UpdateServiceGCSafePointResponse.header:type_name -> pdpb.ResponseHeader
	4,   // 120: pdpb.SyncRegionRequest.header:type_name -> pdpb.RequestHeader
	32,  // 121: pdpb.SyncRegionRequest.member:type_name -> pdpb.Member
	5,   // 122: pdpb.SyncRegionResponse.header:type_name -> pdpb.ResponseHeader
	85,  // 123: pdpb.SyncRegionResponse.regions:type_name -> metapb.Region
	69,  // 124: pdpb.SyncRegionResponse.region_stats:type_name -> pdpb.RegionStat
	87,  // 125: pdpb.SyncRegionResponse.region_leaders:type_name -> metapb.Peer
	4,   // 126: pdpb.GetOperatorRequest.header:type_name -> pdpb.RequestHeader
	5,   // 127: pdpb.GetOperatorResponse.header:type_name -> pdpb.ResponseHeader
	2,   // 128: pdpb.GetOperatorResponse.status:type_name -> pdpb.OperatorStatus
	4,   // 129: pdpb.SyncMaxTSRequest.header:type_name -> pdpb.RequestHeader
	8,   // 130: pdpb.SyncMaxTSRequest.max_ts:type_name -> pdpb.Timestamp
	5,   // 131: pdpb.SyncMaxTSResponse.header:type_name -> pdpb.ResponseHeader
	8,   // 132: pdpb.SyncMaxTSResponse.max_local_ts:type_name -> pdpb.Timestamp
	4,   // 133: pdpb.SplitRegionsRequest.header:type_name -> pdpb.RequestHeader
	5,   // 134: pdpb.SplitRegionsResponse.header:type_name -> pdpb.ResponseHeader
	4,   // 135: pdpb.SplitAndScatterRegionsRequest.header:type_name -> pdpb.RequestHeader
	5,   // 136: pdpb.SplitAndScatterRegionsResponse.header:type_name -> pdpb.ResponseHeader
	4,   // 137: pdpb.GetDCLocationInfoRequest.header:type_name -> pdpb.RequestHeader
	5,   // 138: pdpb.GetDCLocationInfoResponse.header:type_name -> pdpb.ResponseHeader
	8,   // 139: pdpb.GetDCLocationInfoResponse.max_ts:type_name -> pdpb.Timestamp
	32,  // 140: pdpb.GetMembersResponse.TsoAllocatorLeadersEntry.value:type_name -> pdpb.Member
	33,  // 141: pdpb.PD.GetMembers:input_type -> pdpb.GetMembersRequest
	7,   // 142: pdpb.PD.Tso:input_type -> pdpb.TsoRequest
	10,  // 143: pdpb.PD.Bootstrap:input_type -> pdpb.BootstrapRequest
	12,  // 144: pdpb.PD.IsBootstrapped:input_type -> pdpb.IsBootstrappedRequest
	14,  // 145: pdpb.PD.AllocID:input_type -> pdpb.AllocIDRequest
	16,  // 146: pdpb.PD.GetStore:input_type -> pdpb.GetStoreRequest
	18,  // 147: pdpb.PD.PutStore:input_type -> pdpb.PutStoreRequest
	20,  // 148: pdpb.PD.GetAllStores:input_type -> pdpb.GetAllStoresRequest
	58,  // 149: pdpb.PD.StoreHeartbeat:input_type -> pdpb.StoreHeartbeatRequest
	36,  // 150: pdpb.PD.RegionHeartbeat:input_type -> pdpb.RegionHeartbeatRequest
	22,  // 151: pdpb.PD.GetRegion:input_type -> pdpb.GetRegionRequest
	22,  // 152: pdpb.PD.GetPrevRegion:input_type -> pdpb.GetRegionRequest
	24,  // 153: pdpb.PD.GetRegionByID:input_type -> pdpb.GetRegionByIDRequest
	25,  // 154: pdpb.PD.ScanRegions:input_type -> pdpb.ScanRegionsRequest
	43,  // 155: pdpb.PD.AskSplit:input_type -> pdpb.AskSplitRequest
	45,  // 156: pdpb.PD.ReportSplit:input_type -> pdpb.ReportSplitRequest
	47,  // 157: pdpb.PD.AskBatchSplit:input_type -> pdpb.AskBatchSplitRequest
	50,  // 158: pdpb.PD.ReportBatchSplit:input_type -> pdpb.ReportBatchSplitRequest
	28,  // 159: pdpb.PD.GetClusterConfig:input_type -> pdpb.GetClusterConfigRequest
	30,  // 160: pdpb.PD.PutClusterConfig:input_type -> pdpb.PutClusterConfigRequest
	61,  // 161: pdpb.PD.ScatterRegion:input_type -> pdpb.ScatterRegionRequest
	63,  // 162: pdpb.PD.GetGCSafePoint:input_type -> pdpb.GetGCSafePointRequest
	65,  // 163: pdpb.PD.UpdateGCSafePoint:input_type -> pdpb.UpdateGCSafePointRequest
	67,  // 164: pdpb.PD.UpdateServiceGCSafePoint:input_type -> pdpb.UpdateServiceGCSafePointRequest
	70,  // 165: pdpb.PD.SyncRegions:input_type -> pdpb.SyncRegionRequest
	72,  // 166: pdpb.PD.GetOperator:input_type -> pdpb.GetOperatorRequest
	74,  // 167: pdpb.PD.SyncMaxTS:input_type -> pdpb.SyncMaxTSRequest
	76,  // 168: pdpb.PD.SplitRegions:input_type -> pdpb.SplitRegionsRequest
	78,  // 169: pdpb.PD.SplitAndScatterRegions:input_type -> pdpb.SplitAndScatterRegionsRequest
	80,  // 170: pdpb.PD.GetDCLocationInfo:input_type -> pdpb.GetDCLocationInfoRequest
	34,  // 171: pdpb.PD.GetMembers:output_type -> pdpb.GetMembersResponse
	9,   // 172: pdpb.PD.Tso:output_type -> pdpb.TsoResponse
	11,  // 173: pdpb.PD.Bootstrap:output_type -> pdpb.BootstrapResponse
	13,  // 174: pdpb.PD.IsBootstrapped:output_type -> pdpb.IsBootstrappedResponse
	15,  // 175: pdpb.PD.AllocID:output_type -> pdpb.AllocIDResponse
	17,  // 176: pdpb.PD.GetStore:output_type -> pdpb.GetStoreResponse
	19,  // 177: pdpb.PD.PutStore:output_type -> pdpb.PutStoreResponse
	21,  // 178: pdpb.PD.GetAllStores:output_type -> pdpb.GetAllStoresResponse
	60,  // 179: pdpb.PD.StoreHeartbeat:output_type -> pdpb.StoreHeartbeatResponse
	42,  // 180: pdpb.PD.RegionHeartbeat:output_type -> pdpb.RegionHeartbeatResponse
	23,  // 181: pdpb.PD.GetRegion:output_type -> pdpb.GetRegionResponse
	23,  // 182: pdpb.PD.GetPrevRegion:output_type -> pdpb.GetRegionResponse
	23,  // 183: pdpb.PD.GetRegionByID:output_type -> pdpb.GetRegionResponse
	27,  // 184: pdpb.PD.ScanRegions:output_type -> pdpb.ScanRegionsResponse
	44,  // 185: pdpb.PD.AskSplit:output_type -> pdpb.AskSplitResponse
	46,  // 186: pdpb.PD.ReportSplit:output_type -> pdpb.ReportSplitResponse
	49,  // 187: pdpb.PD.AskBatchSplit:output_type -> pdpb.AskBatchSplitResponse
	51,  // 188: pdpb.PD.ReportBatchSplit:output_type -> pdpb.ReportBatchSplitResponse
	29,  // 189: pdpb.PD.GetClusterConfig:output_type -> pdpb.GetClusterConfigResponse
	31,  // 190: pdpb.PD.PutClusterConfig:output_type -> pdpb.PutClusterConfigResponse
	62,  // 191: pdpb.PD.ScatterRegion:output_type -> pdpb.ScatterRegionResponse
	64,  // 192: pdpb.PD.GetGCSafePoint:output_type -> pdpb.GetGCSafePointResponse
	66,  // 193: pdpb.PD.UpdateGCSafePoint:output_type -> pdpb.UpdateGCSafePointResponse
	68,  // 194: pdpb.PD.UpdateServiceGCSafePoint:output_type -> pdpb.UpdateServiceGCSafePointResponse
	71,  // 195: pdpb.PD.SyncRegions:output_type -> pdpb.SyncRegionResponse
	73,  // 196: pdpb.PD.GetOperator:output_type -> pdpb.GetOperatorResponse
	75,  // 197: pdpb.PD.SyncMaxTS:output_type -> pdpb.SyncMaxTSResponse
	77,  // 198: pdpb.PD.SplitRegions:output_type -> pdpb.SplitRegionsResponse
	79,  // 199: pdpb.PD.SplitAndScatterRegions:output_type -> pdpb.SplitAndScatterRegionsResponse
	81,  // 200: pdpb.PD.GetDCLocationInfo:output_type -> pdpb.GetDCLocationInfoResponse
	171, // [171:201] is the sub-list for method output_type
	141, // [141:171] is the sub-list for method input_type
	141, // [141:141] is the sub-list for extension type_name
	141, // [141:141] is the sub-list for extension extendee
	0,   // [0:141] is the sub-list for field type_name
}

func init() { file_pdpb_proto_init() }
func file_pdpb_proto_init() {
	if File_pdpb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pdpb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BootstrapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BootstrapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsBootstrappedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsBootstrappedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutStoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutStoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllStoresRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllStoresResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegionByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanRegionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Region); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanRegionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutClusterConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutClusterConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMembersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMembersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionHeartbeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePeerV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferLeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Merge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitRegion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionHeartbeatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AskSplitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AskSplitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportSplitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportSplitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AskBatchSplitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AskBatchSplitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportBatchSplitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportBatchSplitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreHeartbeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreHeartbeatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScatterRegionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScatterRegionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGCSafePointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGCSafePointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGCSafePointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGCSafePointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServiceGCSafePointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServiceGCSafePointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncRegionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncRegionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOperatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOperatorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncMaxTSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncMaxTSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitRegionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitRegionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitAndScatterRegionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitAndScatterRegionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDCLocationInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDCLocationInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdpb_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pdpb_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   80,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pdpb_proto_goTypes,
		DependencyIndexes: file_pdpb_proto_depIdxs,
		EnumInfos:         file_pdpb_proto_enumTypes,
		MessageInfos:      file_pdpb_proto_msgTypes,
	}.Build()
	File_pdpb_proto = out.File
	file_pdpb_proto_rawDesc = nil
	file_pdpb_proto_goTypes = nil
	file_pdpb_proto_depIdxs = nil
}

var _ context.Context

// Code generated by Kitex v0.1.3. DO NOT EDIT.

type PD interface {
	GetMembers(ctx context.Context, req *GetMembersRequest) (res *GetMembersResponse, err error)
	Tso(stream PD_TsoServer) (err error)
	Bootstrap(ctx context.Context, req *BootstrapRequest) (res *BootstrapResponse, err error)
	IsBootstrapped(ctx context.Context, req *IsBootstrappedRequest) (res *IsBootstrappedResponse, err error)
	AllocID(ctx context.Context, req *AllocIDRequest) (res *AllocIDResponse, err error)
	GetStore(ctx context.Context, req *GetStoreRequest) (res *GetStoreResponse, err error)
	PutStore(ctx context.Context, req *PutStoreRequest) (res *PutStoreResponse, err error)
	GetAllStores(ctx context.Context, req *GetAllStoresRequest) (res *GetAllStoresResponse, err error)
	StoreHeartbeat(ctx context.Context, req *StoreHeartbeatRequest) (res *StoreHeartbeatResponse, err error)
	RegionHeartbeat(stream PD_RegionHeartbeatServer) (err error)
	GetRegion(ctx context.Context, req *GetRegionRequest) (res *GetRegionResponse, err error)
	GetPrevRegion(ctx context.Context, req *GetRegionRequest) (res *GetRegionResponse, err error)
	GetRegionByID(ctx context.Context, req *GetRegionByIDRequest) (res *GetRegionResponse, err error)
	ScanRegions(ctx context.Context, req *ScanRegionsRequest) (res *ScanRegionsResponse, err error)
	AskSplit(ctx context.Context, req *AskSplitRequest) (res *AskSplitResponse, err error)
	ReportSplit(ctx context.Context, req *ReportSplitRequest) (res *ReportSplitResponse, err error)
	AskBatchSplit(ctx context.Context, req *AskBatchSplitRequest) (res *AskBatchSplitResponse, err error)
	ReportBatchSplit(ctx context.Context, req *ReportBatchSplitRequest) (res *ReportBatchSplitResponse, err error)
	GetClusterConfig(ctx context.Context, req *GetClusterConfigRequest) (res *GetClusterConfigResponse, err error)
	PutClusterConfig(ctx context.Context, req *PutClusterConfigRequest) (res *PutClusterConfigResponse, err error)
	ScatterRegion(ctx context.Context, req *ScatterRegionRequest) (res *ScatterRegionResponse, err error)
	GetGCSafePoint(ctx context.Context, req *GetGCSafePointRequest) (res *GetGCSafePointResponse, err error)
	UpdateGCSafePoint(ctx context.Context, req *UpdateGCSafePointRequest) (res *UpdateGCSafePointResponse, err error)
	UpdateServiceGCSafePoint(ctx context.Context, req *UpdateServiceGCSafePointRequest) (res *UpdateServiceGCSafePointResponse, err error)
	SyncRegions(stream PD_SyncRegionsServer) (err error)
	GetOperator(ctx context.Context, req *GetOperatorRequest) (res *GetOperatorResponse, err error)
	SyncMaxTS(ctx context.Context, req *SyncMaxTSRequest) (res *SyncMaxTSResponse, err error)
	SplitRegions(ctx context.Context, req *SplitRegionsRequest) (res *SplitRegionsResponse, err error)
	SplitAndScatterRegions(ctx context.Context, req *SplitAndScatterRegionsRequest) (res *SplitAndScatterRegionsResponse, err error)
	GetDCLocationInfo(ctx context.Context, req *GetDCLocationInfoRequest) (res *GetDCLocationInfoResponse, err error)
}

type PD_TsoServer interface {
	streaming.Stream
	Recv() (*TsoRequest, error)
	Send(*TsoResponse) error
}

type PD_RegionHeartbeatServer interface {
	streaming.Stream
	Recv() (*RegionHeartbeatRequest, error)
	Send(*RegionHeartbeatResponse) error
}

type PD_SyncRegionsServer interface {
	streaming.Stream
	Recv() (*SyncRegionRequest, error)
	Send(*SyncRegionResponse) error
}
