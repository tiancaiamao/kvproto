// Code generated by Kitex v0.1.3. DO NOT EDIT.

package pd

import (
	"context"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
	"github.com/cloudwego/kitex/pkg/streaming"
	"github.com/cloudwego/kitex/transport"
	"github.com/pingcap/kvproto/proto/kitex_gen/pdpb"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	GetMembers(ctx context.Context, Req *pdpb.GetMembersRequest, callOptions ...callopt.Option) (r *pdpb.GetMembersResponse, err error)
	Tso(ctx context.Context, callOptions ...callopt.Option) (stream PD_TsoClient, err error)
	Bootstrap(ctx context.Context, Req *pdpb.BootstrapRequest, callOptions ...callopt.Option) (r *pdpb.BootstrapResponse, err error)
	IsBootstrapped(ctx context.Context, Req *pdpb.IsBootstrappedRequest, callOptions ...callopt.Option) (r *pdpb.IsBootstrappedResponse, err error)
	AllocID(ctx context.Context, Req *pdpb.AllocIDRequest, callOptions ...callopt.Option) (r *pdpb.AllocIDResponse, err error)
	GetStore(ctx context.Context, Req *pdpb.GetStoreRequest, callOptions ...callopt.Option) (r *pdpb.GetStoreResponse, err error)
	PutStore(ctx context.Context, Req *pdpb.PutStoreRequest, callOptions ...callopt.Option) (r *pdpb.PutStoreResponse, err error)
	GetAllStores(ctx context.Context, Req *pdpb.GetAllStoresRequest, callOptions ...callopt.Option) (r *pdpb.GetAllStoresResponse, err error)
	StoreHeartbeat(ctx context.Context, Req *pdpb.StoreHeartbeatRequest, callOptions ...callopt.Option) (r *pdpb.StoreHeartbeatResponse, err error)
	RegionHeartbeat(ctx context.Context, callOptions ...callopt.Option) (stream PD_RegionHeartbeatClient, err error)
	GetRegion(ctx context.Context, Req *pdpb.GetRegionRequest, callOptions ...callopt.Option) (r *pdpb.GetRegionResponse, err error)
	GetPrevRegion(ctx context.Context, Req *pdpb.GetRegionRequest, callOptions ...callopt.Option) (r *pdpb.GetRegionResponse, err error)
	GetRegionByID(ctx context.Context, Req *pdpb.GetRegionByIDRequest, callOptions ...callopt.Option) (r *pdpb.GetRegionResponse, err error)
	ScanRegions(ctx context.Context, Req *pdpb.ScanRegionsRequest, callOptions ...callopt.Option) (r *pdpb.ScanRegionsResponse, err error)
	AskSplit(ctx context.Context, Req *pdpb.AskSplitRequest, callOptions ...callopt.Option) (r *pdpb.AskSplitResponse, err error)
	ReportSplit(ctx context.Context, Req *pdpb.ReportSplitRequest, callOptions ...callopt.Option) (r *pdpb.ReportSplitResponse, err error)
	AskBatchSplit(ctx context.Context, Req *pdpb.AskBatchSplitRequest, callOptions ...callopt.Option) (r *pdpb.AskBatchSplitResponse, err error)
	ReportBatchSplit(ctx context.Context, Req *pdpb.ReportBatchSplitRequest, callOptions ...callopt.Option) (r *pdpb.ReportBatchSplitResponse, err error)
	GetClusterConfig(ctx context.Context, Req *pdpb.GetClusterConfigRequest, callOptions ...callopt.Option) (r *pdpb.GetClusterConfigResponse, err error)
	PutClusterConfig(ctx context.Context, Req *pdpb.PutClusterConfigRequest, callOptions ...callopt.Option) (r *pdpb.PutClusterConfigResponse, err error)
	ScatterRegion(ctx context.Context, Req *pdpb.ScatterRegionRequest, callOptions ...callopt.Option) (r *pdpb.ScatterRegionResponse, err error)
	GetGCSafePoint(ctx context.Context, Req *pdpb.GetGCSafePointRequest, callOptions ...callopt.Option) (r *pdpb.GetGCSafePointResponse, err error)
	UpdateGCSafePoint(ctx context.Context, Req *pdpb.UpdateGCSafePointRequest, callOptions ...callopt.Option) (r *pdpb.UpdateGCSafePointResponse, err error)
	UpdateServiceGCSafePoint(ctx context.Context, Req *pdpb.UpdateServiceGCSafePointRequest, callOptions ...callopt.Option) (r *pdpb.UpdateServiceGCSafePointResponse, err error)
	SyncRegions(ctx context.Context, callOptions ...callopt.Option) (stream PD_SyncRegionsClient, err error)
	GetOperator(ctx context.Context, Req *pdpb.GetOperatorRequest, callOptions ...callopt.Option) (r *pdpb.GetOperatorResponse, err error)
	SyncMaxTS(ctx context.Context, Req *pdpb.SyncMaxTSRequest, callOptions ...callopt.Option) (r *pdpb.SyncMaxTSResponse, err error)
	SplitRegions(ctx context.Context, Req *pdpb.SplitRegionsRequest, callOptions ...callopt.Option) (r *pdpb.SplitRegionsResponse, err error)
	SplitAndScatterRegions(ctx context.Context, Req *pdpb.SplitAndScatterRegionsRequest, callOptions ...callopt.Option) (r *pdpb.SplitAndScatterRegionsResponse, err error)
	GetDCLocationInfo(ctx context.Context, Req *pdpb.GetDCLocationInfoRequest, callOptions ...callopt.Option) (r *pdpb.GetDCLocationInfoResponse, err error)
}

type PD_TsoClient interface {
	streaming.Stream
	Send(*pdpb.TsoRequest) error
	Recv() (*pdpb.TsoResponse, error)
}

type PD_RegionHeartbeatClient interface {
	streaming.Stream
	Send(*pdpb.RegionHeartbeatRequest) error
	Recv() (*pdpb.RegionHeartbeatResponse, error)
}

type PD_SyncRegionsClient interface {
	streaming.Stream
	Send(*pdpb.SyncRegionRequest) error
	Recv() (*pdpb.SyncRegionResponse, error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, client.WithTransportProtocol(transport.GRPC))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kPDClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kPDClient struct {
	*kClient
}

func (p *kPDClient) GetMembers(ctx context.Context, Req *pdpb.GetMembersRequest, callOptions ...callopt.Option) (r *pdpb.GetMembersResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetMembers(ctx, Req)
}

func (p *kPDClient) Tso(ctx context.Context, callOptions ...callopt.Option) (stream PD_TsoClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Tso(ctx)
}

func (p *kPDClient) Bootstrap(ctx context.Context, Req *pdpb.BootstrapRequest, callOptions ...callopt.Option) (r *pdpb.BootstrapResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Bootstrap(ctx, Req)
}

func (p *kPDClient) IsBootstrapped(ctx context.Context, Req *pdpb.IsBootstrappedRequest, callOptions ...callopt.Option) (r *pdpb.IsBootstrappedResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.IsBootstrapped(ctx, Req)
}

func (p *kPDClient) AllocID(ctx context.Context, Req *pdpb.AllocIDRequest, callOptions ...callopt.Option) (r *pdpb.AllocIDResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AllocID(ctx, Req)
}

func (p *kPDClient) GetStore(ctx context.Context, Req *pdpb.GetStoreRequest, callOptions ...callopt.Option) (r *pdpb.GetStoreResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetStore(ctx, Req)
}

func (p *kPDClient) PutStore(ctx context.Context, Req *pdpb.PutStoreRequest, callOptions ...callopt.Option) (r *pdpb.PutStoreResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PutStore(ctx, Req)
}

func (p *kPDClient) GetAllStores(ctx context.Context, Req *pdpb.GetAllStoresRequest, callOptions ...callopt.Option) (r *pdpb.GetAllStoresResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetAllStores(ctx, Req)
}

func (p *kPDClient) StoreHeartbeat(ctx context.Context, Req *pdpb.StoreHeartbeatRequest, callOptions ...callopt.Option) (r *pdpb.StoreHeartbeatResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.StoreHeartbeat(ctx, Req)
}

func (p *kPDClient) RegionHeartbeat(ctx context.Context, callOptions ...callopt.Option) (stream PD_RegionHeartbeatClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RegionHeartbeat(ctx)
}

func (p *kPDClient) GetRegion(ctx context.Context, Req *pdpb.GetRegionRequest, callOptions ...callopt.Option) (r *pdpb.GetRegionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetRegion(ctx, Req)
}

func (p *kPDClient) GetPrevRegion(ctx context.Context, Req *pdpb.GetRegionRequest, callOptions ...callopt.Option) (r *pdpb.GetRegionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetPrevRegion(ctx, Req)
}

func (p *kPDClient) GetRegionByID(ctx context.Context, Req *pdpb.GetRegionByIDRequest, callOptions ...callopt.Option) (r *pdpb.GetRegionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetRegionByID(ctx, Req)
}

func (p *kPDClient) ScanRegions(ctx context.Context, Req *pdpb.ScanRegionsRequest, callOptions ...callopt.Option) (r *pdpb.ScanRegionsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ScanRegions(ctx, Req)
}

func (p *kPDClient) AskSplit(ctx context.Context, Req *pdpb.AskSplitRequest, callOptions ...callopt.Option) (r *pdpb.AskSplitResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AskSplit(ctx, Req)
}

func (p *kPDClient) ReportSplit(ctx context.Context, Req *pdpb.ReportSplitRequest, callOptions ...callopt.Option) (r *pdpb.ReportSplitResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ReportSplit(ctx, Req)
}

func (p *kPDClient) AskBatchSplit(ctx context.Context, Req *pdpb.AskBatchSplitRequest, callOptions ...callopt.Option) (r *pdpb.AskBatchSplitResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AskBatchSplit(ctx, Req)
}

func (p *kPDClient) ReportBatchSplit(ctx context.Context, Req *pdpb.ReportBatchSplitRequest, callOptions ...callopt.Option) (r *pdpb.ReportBatchSplitResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ReportBatchSplit(ctx, Req)
}

func (p *kPDClient) GetClusterConfig(ctx context.Context, Req *pdpb.GetClusterConfigRequest, callOptions ...callopt.Option) (r *pdpb.GetClusterConfigResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetClusterConfig(ctx, Req)
}

func (p *kPDClient) PutClusterConfig(ctx context.Context, Req *pdpb.PutClusterConfigRequest, callOptions ...callopt.Option) (r *pdpb.PutClusterConfigResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PutClusterConfig(ctx, Req)
}

func (p *kPDClient) ScatterRegion(ctx context.Context, Req *pdpb.ScatterRegionRequest, callOptions ...callopt.Option) (r *pdpb.ScatterRegionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ScatterRegion(ctx, Req)
}

func (p *kPDClient) GetGCSafePoint(ctx context.Context, Req *pdpb.GetGCSafePointRequest, callOptions ...callopt.Option) (r *pdpb.GetGCSafePointResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetGCSafePoint(ctx, Req)
}

func (p *kPDClient) UpdateGCSafePoint(ctx context.Context, Req *pdpb.UpdateGCSafePointRequest, callOptions ...callopt.Option) (r *pdpb.UpdateGCSafePointResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateGCSafePoint(ctx, Req)
}

func (p *kPDClient) UpdateServiceGCSafePoint(ctx context.Context, Req *pdpb.UpdateServiceGCSafePointRequest, callOptions ...callopt.Option) (r *pdpb.UpdateServiceGCSafePointResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateServiceGCSafePoint(ctx, Req)
}

func (p *kPDClient) SyncRegions(ctx context.Context, callOptions ...callopt.Option) (stream PD_SyncRegionsClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SyncRegions(ctx)
}

func (p *kPDClient) GetOperator(ctx context.Context, Req *pdpb.GetOperatorRequest, callOptions ...callopt.Option) (r *pdpb.GetOperatorResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetOperator(ctx, Req)
}

func (p *kPDClient) SyncMaxTS(ctx context.Context, Req *pdpb.SyncMaxTSRequest, callOptions ...callopt.Option) (r *pdpb.SyncMaxTSResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SyncMaxTS(ctx, Req)
}

func (p *kPDClient) SplitRegions(ctx context.Context, Req *pdpb.SplitRegionsRequest, callOptions ...callopt.Option) (r *pdpb.SplitRegionsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SplitRegions(ctx, Req)
}

func (p *kPDClient) SplitAndScatterRegions(ctx context.Context, Req *pdpb.SplitAndScatterRegionsRequest, callOptions ...callopt.Option) (r *pdpb.SplitAndScatterRegionsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SplitAndScatterRegions(ctx, Req)
}

func (p *kPDClient) GetDCLocationInfo(ctx context.Context, Req *pdpb.GetDCLocationInfoRequest, callOptions ...callopt.Option) (r *pdpb.GetDCLocationInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetDCLocationInfo(ctx, Req)
}
