// Code generated by Kitex v0.1.3. DO NOT EDIT.

package externalstorage

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"github.com/pingcap/kvproto/proto/kitex_gen/brpb"
	"google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return externalStorageServiceInfo
}

var externalStorageServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ExternalStorage"
	handlerType := (*brpb.ExternalStorage)(nil)
	methods := map[string]kitex.MethodInfo{
		"restore": kitex.NewMethodInfo(restoreHandler, newRestoreArgs, newRestoreResult, false),
		"save":    kitex.NewMethodInfo(saveHandler, newSaveArgs, newSaveResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "brpb",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.1.3",
		Extra:           extra,
	}
	return svcInfo
}

func restoreHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(brpb.ExternalStorageRestoreRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(brpb.ExternalStorage).Restore(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RestoreArgs:
		success, err := handler.(brpb.ExternalStorage).Restore(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RestoreResult)
		realResult.Success = success
	}
	return nil
}
func newRestoreArgs() interface{} {
	return &RestoreArgs{}
}

func newRestoreResult() interface{} {
	return &RestoreResult{}
}

type RestoreArgs struct {
	Req *brpb.ExternalStorageRestoreRequest
}

func (p *RestoreArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in RestoreArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *RestoreArgs) Unmarshal(in []byte) error {
	msg := new(brpb.ExternalStorageRestoreRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RestoreArgs_Req_DEFAULT *brpb.ExternalStorageRestoreRequest

func (p *RestoreArgs) GetReq() *brpb.ExternalStorageRestoreRequest {
	if !p.IsSetReq() {
		return RestoreArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RestoreArgs) IsSetReq() bool {
	return p.Req != nil
}

type RestoreResult struct {
	Success *brpb.ExternalStorageRestoreResponse
}

var RestoreResult_Success_DEFAULT *brpb.ExternalStorageRestoreResponse

func (p *RestoreResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in RestoreResult")
	}
	return proto.Marshal(p.Success)
}

func (p *RestoreResult) Unmarshal(in []byte) error {
	msg := new(brpb.ExternalStorageRestoreResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RestoreResult) GetSuccess() *brpb.ExternalStorageRestoreResponse {
	if !p.IsSetSuccess() {
		return RestoreResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RestoreResult) SetSuccess(x interface{}) {
	p.Success = x.(*brpb.ExternalStorageRestoreResponse)
}

func (p *RestoreResult) IsSetSuccess() bool {
	return p.Success != nil
}

func saveHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(brpb.ExternalStorageSaveRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(brpb.ExternalStorage).Save(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SaveArgs:
		success, err := handler.(brpb.ExternalStorage).Save(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SaveResult)
		realResult.Success = success
	}
	return nil
}
func newSaveArgs() interface{} {
	return &SaveArgs{}
}

func newSaveResult() interface{} {
	return &SaveResult{}
}

type SaveArgs struct {
	Req *brpb.ExternalStorageSaveRequest
}

func (p *SaveArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in SaveArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *SaveArgs) Unmarshal(in []byte) error {
	msg := new(brpb.ExternalStorageSaveRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SaveArgs_Req_DEFAULT *brpb.ExternalStorageSaveRequest

func (p *SaveArgs) GetReq() *brpb.ExternalStorageSaveRequest {
	if !p.IsSetReq() {
		return SaveArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SaveArgs) IsSetReq() bool {
	return p.Req != nil
}

type SaveResult struct {
	Success *brpb.ExternalStorageSaveResponse
}

var SaveResult_Success_DEFAULT *brpb.ExternalStorageSaveResponse

func (p *SaveResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in SaveResult")
	}
	return proto.Marshal(p.Success)
}

func (p *SaveResult) Unmarshal(in []byte) error {
	msg := new(brpb.ExternalStorageSaveResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SaveResult) GetSuccess() *brpb.ExternalStorageSaveResponse {
	if !p.IsSetSuccess() {
		return SaveResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SaveResult) SetSuccess(x interface{}) {
	p.Success = x.(*brpb.ExternalStorageSaveResponse)
}

func (p *SaveResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Restore(ctx context.Context, Req *brpb.ExternalStorageRestoreRequest) (r *brpb.ExternalStorageRestoreResponse, err error) {
	var _args RestoreArgs
	_args.Req = Req
	var _result RestoreResult
	if err = p.c.Call(ctx, "restore", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Save(ctx context.Context, Req *brpb.ExternalStorageSaveRequest) (r *brpb.ExternalStorageSaveResponse, err error) {
	var _args SaveArgs
	_args.Req = Req
	var _result SaveResult
	if err = p.c.Call(ctx, "save", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
