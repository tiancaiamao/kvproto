// Code generated by Kitex v0.1.3. DO NOT EDIT.

package backup

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"github.com/pingcap/kvproto/proto/kitex_gen/brpb"
	"google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return backupServiceInfo
}

var backupServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Backup"
	handlerType := (*brpb.Backup)(nil)
	methods := map[string]kitex.MethodInfo{
		"backup": kitex.NewMethodInfo(backupHandler, newBackupArgs, newBackupResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "brpb",
	}
	extra["streaming"] = true
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.1.3",
		Extra:           extra,
	}
	return svcInfo
}

func backupHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st := arg.(*streaming.Args).Stream
	stream := &backupbackupServer{st}
	req := new(brpb.BackupRequest)
	if err := st.RecvMsg(req); err != nil {
		return err
	}
	return handler.(brpb.Backup).Backup(req, stream)
}

type backupbackupClient struct {
	streaming.Stream
}

func (x *backupbackupClient) Recv() (*brpb.BackupResponse, error) {
	m := new(brpb.BackupResponse)
	return m, x.Stream.RecvMsg(m)
}

type backupbackupServer struct {
	streaming.Stream
}

func (x *backupbackupServer) Send(m *brpb.BackupResponse) error {
	return x.Stream.SendMsg(m)
}

func newBackupArgs() interface{} {
	return &BackupArgs{}
}

func newBackupResult() interface{} {
	return &BackupResult{}
}

type BackupArgs struct {
	Req *brpb.BackupRequest
}

func (p *BackupArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in BackupArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *BackupArgs) Unmarshal(in []byte) error {
	msg := new(brpb.BackupRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var BackupArgs_Req_DEFAULT *brpb.BackupRequest

func (p *BackupArgs) GetReq() *brpb.BackupRequest {
	if !p.IsSetReq() {
		return BackupArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *BackupArgs) IsSetReq() bool {
	return p.Req != nil
}

type BackupResult struct {
	Success *brpb.BackupResponse
}

var BackupResult_Success_DEFAULT *brpb.BackupResponse

func (p *BackupResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in BackupResult")
	}
	return proto.Marshal(p.Success)
}

func (p *BackupResult) Unmarshal(in []byte) error {
	msg := new(brpb.BackupResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *BackupResult) GetSuccess() *brpb.BackupResponse {
	if !p.IsSetSuccess() {
		return BackupResult_Success_DEFAULT
	}
	return p.Success
}

func (p *BackupResult) SetSuccess(x interface{}) {
	p.Success = x.(*brpb.BackupResponse)
}

func (p *BackupResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Backup(ctx context.Context, req *brpb.BackupRequest) (Backup_backupClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "backup", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &backupbackupClient{res.Stream}
	if err := stream.Stream.SendMsg(req); err != nil {
		return nil, err
	}
	if err := stream.Stream.Close(); err != nil {
		return nil, err
	}
	return stream, nil
}
