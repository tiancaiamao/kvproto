// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.8.0
// source: mpp.proto

package mpp

import (
	context "context"
	coprocessor "github.com/pingcap/kvproto/proto/kitex_gen/coprocessor"
	_ "github.com/pingcap/kvproto/proto/kitex_gen/github.com/gogo/protobuf/gogoproto"
	metapb "github.com/pingcap/kvproto/proto/kitex_gen/metapb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TaskMeta contains meta of a mpp plan, including query's ts and task address.
type TaskMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTs     uint64 `protobuf:"varint,1,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`             // start ts of a query
	TaskId      int64  `protobuf:"varint,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                // if task id is -1 , it indicates a tidb task.
	PartitionId int64  `protobuf:"varint,3,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"` // Only used for hash partition
	Address     string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`                             // target address of this task.
}

func (x *TaskMeta) Reset() {
	*x = TaskMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskMeta) ProtoMessage() {}

func (x *TaskMeta) ProtoReflect() protoreflect.Message {
	mi := &file_mpp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskMeta.ProtoReflect.Descriptor instead.
func (*TaskMeta) Descriptor() ([]byte, []int) {
	return file_mpp_proto_rawDescGZIP(), []int{0}
}

func (x *TaskMeta) GetStartTs() uint64 {
	if x != nil {
		return x.StartTs
	}
	return 0
}

func (x *TaskMeta) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *TaskMeta) GetPartitionId() int64 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *TaskMeta) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type IsAliveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsAliveRequest) Reset() {
	*x = IsAliveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsAliveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAliveRequest) ProtoMessage() {}

func (x *IsAliveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAliveRequest.ProtoReflect.Descriptor instead.
func (*IsAliveRequest) Descriptor() ([]byte, []int) {
	return file_mpp_proto_rawDescGZIP(), []int{1}
}

type IsAliveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Available bool `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
}

func (x *IsAliveResponse) Reset() {
	*x = IsAliveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsAliveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAliveResponse) ProtoMessage() {}

func (x *IsAliveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAliveResponse.ProtoReflect.Descriptor instead.
func (*IsAliveResponse) Descriptor() ([]byte, []int) {
	return file_mpp_proto_rawDescGZIP(), []int{2}
}

func (x *IsAliveResponse) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

// Dipsatch the task request to different tiflash servers.
type DispatchTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta        *TaskMeta                 `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	EncodedPlan []byte                    `protobuf:"bytes,2,opt,name=encoded_plan,json=encodedPlan,proto3" json:"encoded_plan,omitempty"`
	Timeout     int64                     `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Regions     []*coprocessor.RegionInfo `protobuf:"bytes,4,rep,name=regions,proto3" json:"regions,omitempty"`
	// If this task contains table scan, we still need their region info.
	SchemaVer int64 `protobuf:"varint,5,opt,name=schema_ver,json=schemaVer,proto3" json:"schema_ver,omitempty"`
}

func (x *DispatchTaskRequest) Reset() {
	*x = DispatchTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispatchTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispatchTaskRequest) ProtoMessage() {}

func (x *DispatchTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispatchTaskRequest.ProtoReflect.Descriptor instead.
func (*DispatchTaskRequest) Descriptor() ([]byte, []int) {
	return file_mpp_proto_rawDescGZIP(), []int{3}
}

func (x *DispatchTaskRequest) GetMeta() *TaskMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *DispatchTaskRequest) GetEncodedPlan() []byte {
	if x != nil {
		return x.EncodedPlan
	}
	return nil
}

func (x *DispatchTaskRequest) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *DispatchTaskRequest) GetRegions() []*coprocessor.RegionInfo {
	if x != nil {
		return x.Regions
	}
	return nil
}

func (x *DispatchTaskRequest) GetSchemaVer() int64 {
	if x != nil {
		return x.SchemaVer
	}
	return 0
}

// Get response of DispatchTaskRequest.
type DispatchTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error        *Error           `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	RetryRegions []*metapb.Region `protobuf:"bytes,2,rep,name=retry_regions,json=retryRegions,proto3" json:"retry_regions,omitempty"`
}

func (x *DispatchTaskResponse) Reset() {
	*x = DispatchTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispatchTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispatchTaskResponse) ProtoMessage() {}

func (x *DispatchTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispatchTaskResponse.ProtoReflect.Descriptor instead.
func (*DispatchTaskResponse) Descriptor() ([]byte, []int) {
	return file_mpp_proto_rawDescGZIP(), []int{4}
}

func (x *DispatchTaskResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *DispatchTaskResponse) GetRetryRegions() []*metapb.Region {
	if x != nil {
		return x.RetryRegions
	}
	return nil
}

// CancelTaskRequest closes the execution of a task.
type CancelTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta  *TaskMeta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Error *Error    `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *CancelTaskRequest) Reset() {
	*x = CancelTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTaskRequest) ProtoMessage() {}

func (x *CancelTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTaskRequest.ProtoReflect.Descriptor instead.
func (*CancelTaskRequest) Descriptor() ([]byte, []int) {
	return file_mpp_proto_rawDescGZIP(), []int{5}
}

func (x *CancelTaskRequest) GetMeta() *TaskMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *CancelTaskRequest) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type CancelTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *CancelTaskResponse) Reset() {
	*x = CancelTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTaskResponse) ProtoMessage() {}

func (x *CancelTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTaskResponse.ProtoReflect.Descriptor instead.
func (*CancelTaskResponse) Descriptor() ([]byte, []int) {
	return file_mpp_proto_rawDescGZIP(), []int{6}
}

func (x *CancelTaskResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// build connection between different tasks. Data is sent by the tasks that are closer to the data sources.
type EstablishMPPConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderMeta   *TaskMeta `protobuf:"bytes,1,opt,name=sender_meta,json=senderMeta,proto3" json:"sender_meta,omitempty"`       // node closer to the source
	ReceiverMeta *TaskMeta `protobuf:"bytes,2,opt,name=receiver_meta,json=receiverMeta,proto3" json:"receiver_meta,omitempty"` // node closer to the tidb mpp gather.
}

func (x *EstablishMPPConnectionRequest) Reset() {
	*x = EstablishMPPConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstablishMPPConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstablishMPPConnectionRequest) ProtoMessage() {}

func (x *EstablishMPPConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstablishMPPConnectionRequest.ProtoReflect.Descriptor instead.
func (*EstablishMPPConnectionRequest) Descriptor() ([]byte, []int) {
	return file_mpp_proto_rawDescGZIP(), []int{7}
}

func (x *EstablishMPPConnectionRequest) GetSenderMeta() *TaskMeta {
	if x != nil {
		return x.SenderMeta
	}
	return nil
}

func (x *EstablishMPPConnectionRequest) GetReceiverMeta() *TaskMeta {
	if x != nil {
		return x.ReceiverMeta
	}
	return nil
}

// when TiFlash sends data to TiDB, Data packets wrap tipb.SelectResponse, i.e., serialize tipb.SelectResponse into data;
// when TiFlash sends data to TiFlash, data blocks are serialized into chunks, and the execution_summaries in tipb.SelectResponse are serialized into data only for the last packet.
type MPPDataPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Error  *Error   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Chunks [][]byte `protobuf:"bytes,3,rep,name=chunks,proto3" json:"chunks,omitempty"`
}

func (x *MPPDataPacket) Reset() {
	*x = MPPDataPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MPPDataPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MPPDataPacket) ProtoMessage() {}

func (x *MPPDataPacket) ProtoReflect() protoreflect.Message {
	mi := &file_mpp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MPPDataPacket.ProtoReflect.Descriptor instead.
func (*MPPDataPacket) Descriptor() ([]byte, []int) {
	return file_mpp_proto_rawDescGZIP(), []int{8}
}

func (x *MPPDataPacket) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *MPPDataPacket) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *MPPDataPacket) GetChunks() [][]byte {
	if x != nil {
		return x.Chunks
	}
	return nil
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_mpp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_mpp_proto_rawDescGZIP(), []int{9}
}

func (x *Error) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Error) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_mpp_proto protoreflect.FileDescriptor

var file_mpp_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6d, 0x70, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x6d, 0x70, 0x70,
	0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x63, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x70,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7b, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x10, 0x0a, 0x0e, 0x49, 0x73, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2f, 0x0a, 0x0f, 0x49, 0x73, 0x41, 0x6c, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x6d, 0x70, 0x70, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x64, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x31, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65,
	0x72, 0x22, 0x6d, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6d, 0x70, 0x70, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x0d, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x58, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x70, 0x70, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6d, 0x70, 0x70, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x36, 0x0a, 0x12, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x20, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x6d, 0x70, 0x70, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x83, 0x01, 0x0a, 0x1d, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x4d, 0x50, 0x50, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x70, 0x70, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x70,
	0x70, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x22, 0x5d, 0x0a, 0x0d, 0x4d, 0x50, 0x50, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6d,
	0x70, 0x70, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x22, 0x2d, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x42, 0x4e, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x2e, 0x74, 0x69,
	0x6b, 0x76, 0x2e, 0x6b, 0x76, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x70, 0x2f, 0x6b,
	0x76, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6b, 0x69, 0x74,
	0x65, 0x78, 0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x6d, 0x70, 0x70, 0xc8, 0xe2, 0x1e, 0x01, 0xe0, 0xe2,
	0x1e, 0x01, 0xd0, 0xe2, 0x1e, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mpp_proto_rawDescOnce sync.Once
	file_mpp_proto_rawDescData = file_mpp_proto_rawDesc
)

func file_mpp_proto_rawDescGZIP() []byte {
	file_mpp_proto_rawDescOnce.Do(func() {
		file_mpp_proto_rawDescData = protoimpl.X.CompressGZIP(file_mpp_proto_rawDescData)
	})
	return file_mpp_proto_rawDescData
}

var file_mpp_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_mpp_proto_goTypes = []interface{}{
	(*TaskMeta)(nil),                      // 0: mpp.TaskMeta
	(*IsAliveRequest)(nil),                // 1: mpp.IsAliveRequest
	(*IsAliveResponse)(nil),               // 2: mpp.IsAliveResponse
	(*DispatchTaskRequest)(nil),           // 3: mpp.DispatchTaskRequest
	(*DispatchTaskResponse)(nil),          // 4: mpp.DispatchTaskResponse
	(*CancelTaskRequest)(nil),             // 5: mpp.CancelTaskRequest
	(*CancelTaskResponse)(nil),            // 6: mpp.CancelTaskResponse
	(*EstablishMPPConnectionRequest)(nil), // 7: mpp.EstablishMPPConnectionRequest
	(*MPPDataPacket)(nil),                 // 8: mpp.MPPDataPacket
	(*Error)(nil),                         // 9: mpp.Error
	(*coprocessor.RegionInfo)(nil),        // 10: coprocessor.RegionInfo
	(*metapb.Region)(nil),                 // 11: metapb.Region
}
var file_mpp_proto_depIdxs = []int32{
	0,  // 0: mpp.DispatchTaskRequest.meta:type_name -> mpp.TaskMeta
	10, // 1: mpp.DispatchTaskRequest.regions:type_name -> coprocessor.RegionInfo
	9,  // 2: mpp.DispatchTaskResponse.error:type_name -> mpp.Error
	11, // 3: mpp.DispatchTaskResponse.retry_regions:type_name -> metapb.Region
	0,  // 4: mpp.CancelTaskRequest.meta:type_name -> mpp.TaskMeta
	9,  // 5: mpp.CancelTaskRequest.error:type_name -> mpp.Error
	9,  // 6: mpp.CancelTaskResponse.error:type_name -> mpp.Error
	0,  // 7: mpp.EstablishMPPConnectionRequest.sender_meta:type_name -> mpp.TaskMeta
	0,  // 8: mpp.EstablishMPPConnectionRequest.receiver_meta:type_name -> mpp.TaskMeta
	9,  // 9: mpp.MPPDataPacket.error:type_name -> mpp.Error
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

// func init() { file_mpp_proto_init() }
func file_mpp_proto_init() {
	if File_mpp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mpp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsAliveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsAliveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DispatchTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DispatchTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstablishMPPConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MPPDataPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mpp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mpp_proto_goTypes,
		DependencyIndexes: file_mpp_proto_depIdxs,
		MessageInfos:      file_mpp_proto_msgTypes,
	}.Build()
	File_mpp_proto = out.File
	file_mpp_proto_rawDesc = nil
	file_mpp_proto_goTypes = nil
	file_mpp_proto_depIdxs = nil
}

var _ context.Context

// Code generated by Kitex v0.1.2. DO NOT EDIT.
