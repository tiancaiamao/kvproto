// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.8.0
// source: tikvpb.proto

package tikvpb

import (
	context "context"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	coprocessor "github.com/pingcap/kvproto/proto/kitex_gen/coprocessor"
	_ "github.com/pingcap/kvproto/proto/kitex_gen/github.com/gogo/protobuf/gogoproto"
	kvrpcpb "github.com/pingcap/kvproto/proto/kitex_gen/kvrpcpb"
	mpp "github.com/pingcap/kvproto/proto/kitex_gen/mpp"
	raft_serverpb "github.com/pingcap/kvproto/proto/kitex_gen/raft_serverpb"
	_ "github.com/pingcap/kvproto/proto/kitex_gen/rustproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BatchCommandsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests   []*BatchCommandsRequest_Request `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	RequestIds []uint64                        `protobuf:"varint,2,rep,packed,name=request_ids,json=requestIds,proto3" json:"request_ids,omitempty"`
}

func (x *BatchCommandsRequest) Reset() {
	*x = BatchCommandsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCommandsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCommandsRequest) ProtoMessage() {}

func (x *BatchCommandsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCommandsRequest.ProtoReflect.Descriptor instead.
func (*BatchCommandsRequest) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{0}
}

func (x *BatchCommandsRequest) GetRequests() []*BatchCommandsRequest_Request {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *BatchCommandsRequest) GetRequestIds() []uint64 {
	if x != nil {
		return x.RequestIds
	}
	return nil
}

type BatchCommandsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Responses  []*BatchCommandsResponse_Response `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
	RequestIds []uint64                          `protobuf:"varint,2,rep,packed,name=request_ids,json=requestIds,proto3" json:"request_ids,omitempty"`
	// 280 means TiKV gRPC cpu usage is 280%.
	TransportLayerLoad uint64 `protobuf:"varint,3,opt,name=transport_layer_load,json=transportLayerLoad,proto3" json:"transport_layer_load,omitempty"`
}

func (x *BatchCommandsResponse) Reset() {
	*x = BatchCommandsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCommandsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCommandsResponse) ProtoMessage() {}

func (x *BatchCommandsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCommandsResponse.ProtoReflect.Descriptor instead.
func (*BatchCommandsResponse) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{1}
}

func (x *BatchCommandsResponse) GetResponses() []*BatchCommandsResponse_Response {
	if x != nil {
		return x.Responses
	}
	return nil
}

func (x *BatchCommandsResponse) GetRequestIds() []uint64 {
	if x != nil {
		return x.RequestIds
	}
	return nil
}

func (x *BatchCommandsResponse) GetTransportLayerLoad() uint64 {
	if x != nil {
		return x.TransportLayerLoad
	}
	return 0
}

type BatchRaftMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msgs []*raft_serverpb.RaftMessage `protobuf:"bytes,1,rep,name=msgs,proto3" json:"msgs,omitempty"`
}

func (x *BatchRaftMessage) Reset() {
	*x = BatchRaftMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchRaftMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchRaftMessage) ProtoMessage() {}

func (x *BatchRaftMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchRaftMessage.ProtoReflect.Descriptor instead.
func (*BatchRaftMessage) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{2}
}

func (x *BatchRaftMessage) GetMsgs() []*raft_serverpb.RaftMessage {
	if x != nil {
		return x.Msgs
	}
	return nil
}

type BatchCommandsEmptyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the test request.
	TestId uint64 `protobuf:"varint,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// TiKV needs to delay at least such a time to response the client.
	DelayTime uint64 `protobuf:"varint,2,opt,name=delay_time,json=delayTime,proto3" json:"delay_time,omitempty"`
}

func (x *BatchCommandsEmptyRequest) Reset() {
	*x = BatchCommandsEmptyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCommandsEmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCommandsEmptyRequest) ProtoMessage() {}

func (x *BatchCommandsEmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCommandsEmptyRequest.ProtoReflect.Descriptor instead.
func (*BatchCommandsEmptyRequest) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{3}
}

func (x *BatchCommandsEmptyRequest) GetTestId() uint64 {
	if x != nil {
		return x.TestId
	}
	return 0
}

func (x *BatchCommandsEmptyRequest) GetDelayTime() uint64 {
	if x != nil {
		return x.DelayTime
	}
	return 0
}

type BatchCommandsEmptyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the test request.
	TestId uint64 `protobuf:"varint,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
}

func (x *BatchCommandsEmptyResponse) Reset() {
	*x = BatchCommandsEmptyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCommandsEmptyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCommandsEmptyResponse) ProtoMessage() {}

func (x *BatchCommandsEmptyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCommandsEmptyResponse.ProtoReflect.Descriptor instead.
func (*BatchCommandsEmptyResponse) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{4}
}

func (x *BatchCommandsEmptyResponse) GetTestId() uint64 {
	if x != nil {
		return x.TestId
	}
	return 0
}

type BatchCommandsRequest_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Cmd:
	//	*BatchCommandsRequest_Request_Get
	//	*BatchCommandsRequest_Request_Scan
	//	*BatchCommandsRequest_Request_Prewrite
	//	*BatchCommandsRequest_Request_Commit
	//	*BatchCommandsRequest_Request_Import
	//	*BatchCommandsRequest_Request_Cleanup
	//	*BatchCommandsRequest_Request_BatchGet
	//	*BatchCommandsRequest_Request_BatchRollback
	//	*BatchCommandsRequest_Request_ScanLock
	//	*BatchCommandsRequest_Request_ResolveLock
	//	*BatchCommandsRequest_Request_GC
	//	*BatchCommandsRequest_Request_DeleteRange
	//	*BatchCommandsRequest_Request_RawGet
	//	*BatchCommandsRequest_Request_RawBatchGet
	//	*BatchCommandsRequest_Request_RawPut
	//	*BatchCommandsRequest_Request_RawBatchPut
	//	*BatchCommandsRequest_Request_RawDelete
	//	*BatchCommandsRequest_Request_RawBatchDelete
	//	*BatchCommandsRequest_Request_RawScan
	//	*BatchCommandsRequest_Request_RawDeleteRange
	//	*BatchCommandsRequest_Request_RawBatchScan
	//	*BatchCommandsRequest_Request_Coprocessor
	//	*BatchCommandsRequest_Request_PessimisticLock
	//	*BatchCommandsRequest_Request_PessimisticRollback
	//	*BatchCommandsRequest_Request_CheckTxnStatus
	//	*BatchCommandsRequest_Request_TxnHeartBeat
	//	*BatchCommandsRequest_Request_CheckSecondaryLocks
	//	*BatchCommandsRequest_Request_RawCoprocessor
	//	*BatchCommandsRequest_Request_Empty
	Cmd isBatchCommandsRequest_Request_Cmd `protobuf_oneof:"cmd"`
}

func (x *BatchCommandsRequest_Request) Reset() {
	*x = BatchCommandsRequest_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCommandsRequest_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCommandsRequest_Request) ProtoMessage() {}

func (x *BatchCommandsRequest_Request) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCommandsRequest_Request.ProtoReflect.Descriptor instead.
func (*BatchCommandsRequest_Request) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{0, 0}
}

func (m *BatchCommandsRequest_Request) GetCmd() isBatchCommandsRequest_Request_Cmd {
	if m != nil {
		return m.Cmd
	}
	return nil
}

func (x *BatchCommandsRequest_Request) GetGet() *kvrpcpb.GetRequest {
	if x, ok := x.GetCmd().(*BatchCommandsRequest_Request_Get); ok {
		return x.Get
	}
	return nil
}

func (x *BatchCommandsRequest_Request) GetScan() *kvrpcpb.ScanRequest {
	if x, ok := x.GetCmd().(*BatchCommandsRequest_Request_Scan); ok {
		return x.Scan
	}
	return nil
}

func (x *BatchCommandsRequest_Request) GetPrewrite() *kvrpcpb.PrewriteRequest {
	if x, ok := x.GetCmd().(*BatchCommandsRequest_Request_Prewrite); ok {
		return x.Prewrite
	}
	return nil
}

func (x *BatchCommandsRequest_Request) GetCommit() *kvrpcpb.CommitRequest {
	if x, ok := x.GetCmd().(*BatchCommandsRequest_Request_Commit); ok {
		return x.Commit
	}
	return nil
}

func (x *BatchCommandsRequest_Request) GetImport() *kvrpcpb.ImportRequest {
	if x, ok := x.GetCmd().(*BatchCommandsRequest_Request_Import); ok {
		return x.Import
	}
	return nil
}

func (x *BatchCommandsRequest_Request) GetCleanup() *kvrpcpb.CleanupRequest {
	if x, ok := x.GetCmd().(*BatchCommandsRequest_Request_Cleanup); ok {
		return x.Cleanup
	}
	return nil
}

func (x *BatchCommandsRequest_Request) GetBatchGet() *kvrpcpb.BatchGetRequest {
	if x, ok := x.GetCmd().(*BatchCommandsRequest_Request_BatchGet); ok {
		return x.BatchGet
	}
	return nil
}

func (x *BatchCommandsRequest_Request) GetBatchRollback() *kvrpcpb.BatchRollbackRequest {
	if x, ok := x.GetCmd().(*BatchCommandsRequest_Request_BatchRollback); ok {
		return x.BatchRollback
	}
	return nil
}

func (x *BatchCommandsRequest_Request) GetScanLock() *kvrpcpb.ScanLockRequest {
	if x, ok := x.GetCmd().(*BatchCommandsRequest_Request_ScanLock); ok {
		return x.ScanLock
	}
	return nil
}

func (x *BatchCommandsRequest_Request) GetResolveLock() *kvrpcpb.ResolveLockRequest {
	if x, ok := x.GetCmd().(*BatchCommandsRequest_Request_ResolveLock); ok {
		return x.ResolveLock
	}
	return nil
}

func (x *BatchCommandsRequest_Request) GetGC() *kvrpcpb.GCRequest {
	if x, ok := x.GetCmd().(*BatchCommandsRequest_Request_GC); ok {
		return x.GC
	}
	return nil
}

func (x *BatchCommandsRequest_Request) GetDeleteRange() *kvrpcpb.DeleteRangeRequest {
	if x, ok := x.GetCmd().(*BatchCommandsRequest_Request_DeleteRange); ok {
		return x.DeleteRange
	}
	return nil
}

func (x *BatchCommandsRequest_Request) GetRawGet() *kvrpcpb.RawGetRequest {
	if x, ok := x.GetCmd().(*BatchCommandsRequest_Request_RawGet); ok {
		return x.RawGet
	}
	return nil
}

func (x *BatchCommandsRequest_Request) GetRawBatchGet() *kvrpcpb.RawBatchGetRequest {
	if x, ok := x.GetCmd().(*BatchCommandsRequest_Request_RawBatchGet); ok {
		return x.RawBatchGet
	}
	return nil
}

func (x *BatchCommandsRequest_Request) GetRawPut() *kvrpcpb.RawPutRequest {
	if x, ok := x.GetCmd().(*BatchCommandsRequest_Request_RawPut); ok {
		return x.RawPut
	}
	return nil
}

func (x *BatchCommandsRequest_Request) GetRawBatchPut() *kvrpcpb.RawBatchPutRequest {
	if x, ok := x.GetCmd().(*BatchCommandsRequest_Request_RawBatchPut); ok {
		return x.RawBatchPut
	}
	return nil
}

func (x *BatchCommandsRequest_Request) GetRawDelete() *kvrpcpb.RawDeleteRequest {
	if x, ok := x.GetCmd().(*BatchCommandsRequest_Request_RawDelete); ok {
		return x.RawDelete
	}
	return nil
}

func (x *BatchCommandsRequest_Request) GetRawBatchDelete() *kvrpcpb.RawBatchDeleteRequest {
	if x, ok := x.GetCmd().(*BatchCommandsRequest_Request_RawBatchDelete); ok {
		return x.RawBatchDelete
	}
	return nil
}

func (x *BatchCommandsRequest_Request) GetRawScan() *kvrpcpb.RawScanRequest {
	if x, ok := x.GetCmd().(*BatchCommandsRequest_Request_RawScan); ok {
		return x.RawScan
	}
	return nil
}

func (x *BatchCommandsRequest_Request) GetRawDeleteRange() *kvrpcpb.RawDeleteRangeRequest {
	if x, ok := x.GetCmd().(*BatchCommandsRequest_Request_RawDeleteRange); ok {
		return x.RawDeleteRange
	}
	return nil
}

func (x *BatchCommandsRequest_Request) GetRawBatchScan() *kvrpcpb.RawBatchScanRequest {
	if x, ok := x.GetCmd().(*BatchCommandsRequest_Request_RawBatchScan); ok {
		return x.RawBatchScan
	}
	return nil
}

func (x *BatchCommandsRequest_Request) GetCoprocessor() *coprocessor.Request {
	if x, ok := x.GetCmd().(*BatchCommandsRequest_Request_Coprocessor); ok {
		return x.Coprocessor
	}
	return nil
}

func (x *BatchCommandsRequest_Request) GetPessimisticLock() *kvrpcpb.PessimisticLockRequest {
	if x, ok := x.GetCmd().(*BatchCommandsRequest_Request_PessimisticLock); ok {
		return x.PessimisticLock
	}
	return nil
}

func (x *BatchCommandsRequest_Request) GetPessimisticRollback() *kvrpcpb.PessimisticRollbackRequest {
	if x, ok := x.GetCmd().(*BatchCommandsRequest_Request_PessimisticRollback); ok {
		return x.PessimisticRollback
	}
	return nil
}

func (x *BatchCommandsRequest_Request) GetCheckTxnStatus() *kvrpcpb.CheckTxnStatusRequest {
	if x, ok := x.GetCmd().(*BatchCommandsRequest_Request_CheckTxnStatus); ok {
		return x.CheckTxnStatus
	}
	return nil
}

func (x *BatchCommandsRequest_Request) GetTxnHeartBeat() *kvrpcpb.TxnHeartBeatRequest {
	if x, ok := x.GetCmd().(*BatchCommandsRequest_Request_TxnHeartBeat); ok {
		return x.TxnHeartBeat
	}
	return nil
}

func (x *BatchCommandsRequest_Request) GetCheckSecondaryLocks() *kvrpcpb.CheckSecondaryLocksRequest {
	if x, ok := x.GetCmd().(*BatchCommandsRequest_Request_CheckSecondaryLocks); ok {
		return x.CheckSecondaryLocks
	}
	return nil
}

func (x *BatchCommandsRequest_Request) GetRawCoprocessor() *kvrpcpb.RawCoprocessorRequest {
	if x, ok := x.GetCmd().(*BatchCommandsRequest_Request_RawCoprocessor); ok {
		return x.RawCoprocessor
	}
	return nil
}

func (x *BatchCommandsRequest_Request) GetEmpty() *BatchCommandsEmptyRequest {
	if x, ok := x.GetCmd().(*BatchCommandsRequest_Request_Empty); ok {
		return x.Empty
	}
	return nil
}

type isBatchCommandsRequest_Request_Cmd interface {
	isBatchCommandsRequest_Request_Cmd()
}

type BatchCommandsRequest_Request_Get struct {
	Get *kvrpcpb.GetRequest `protobuf:"bytes,1,opt,name=Get,proto3,oneof"`
}

type BatchCommandsRequest_Request_Scan struct {
	Scan *kvrpcpb.ScanRequest `protobuf:"bytes,2,opt,name=Scan,proto3,oneof"`
}

type BatchCommandsRequest_Request_Prewrite struct {
	Prewrite *kvrpcpb.PrewriteRequest `protobuf:"bytes,3,opt,name=Prewrite,proto3,oneof"`
}

type BatchCommandsRequest_Request_Commit struct {
	Commit *kvrpcpb.CommitRequest `protobuf:"bytes,4,opt,name=Commit,proto3,oneof"`
}

type BatchCommandsRequest_Request_Import struct {
	Import *kvrpcpb.ImportRequest `protobuf:"bytes,5,opt,name=Import,proto3,oneof"`
}

type BatchCommandsRequest_Request_Cleanup struct {
	Cleanup *kvrpcpb.CleanupRequest `protobuf:"bytes,6,opt,name=Cleanup,proto3,oneof"`
}

type BatchCommandsRequest_Request_BatchGet struct {
	BatchGet *kvrpcpb.BatchGetRequest `protobuf:"bytes,7,opt,name=BatchGet,proto3,oneof"`
}

type BatchCommandsRequest_Request_BatchRollback struct {
	BatchRollback *kvrpcpb.BatchRollbackRequest `protobuf:"bytes,8,opt,name=BatchRollback,proto3,oneof"`
}

type BatchCommandsRequest_Request_ScanLock struct {
	ScanLock *kvrpcpb.ScanLockRequest `protobuf:"bytes,9,opt,name=ScanLock,proto3,oneof"`
}

type BatchCommandsRequest_Request_ResolveLock struct {
	ResolveLock *kvrpcpb.ResolveLockRequest `protobuf:"bytes,10,opt,name=ResolveLock,proto3,oneof"`
}

type BatchCommandsRequest_Request_GC struct {
	GC *kvrpcpb.GCRequest `protobuf:"bytes,11,opt,name=GC,proto3,oneof"`
}

type BatchCommandsRequest_Request_DeleteRange struct {
	DeleteRange *kvrpcpb.DeleteRangeRequest `protobuf:"bytes,12,opt,name=DeleteRange,proto3,oneof"`
}

type BatchCommandsRequest_Request_RawGet struct {
	RawGet *kvrpcpb.RawGetRequest `protobuf:"bytes,13,opt,name=RawGet,proto3,oneof"`
}

type BatchCommandsRequest_Request_RawBatchGet struct {
	RawBatchGet *kvrpcpb.RawBatchGetRequest `protobuf:"bytes,14,opt,name=RawBatchGet,proto3,oneof"`
}

type BatchCommandsRequest_Request_RawPut struct {
	RawPut *kvrpcpb.RawPutRequest `protobuf:"bytes,15,opt,name=RawPut,proto3,oneof"`
}

type BatchCommandsRequest_Request_RawBatchPut struct {
	RawBatchPut *kvrpcpb.RawBatchPutRequest `protobuf:"bytes,16,opt,name=RawBatchPut,proto3,oneof"`
}

type BatchCommandsRequest_Request_RawDelete struct {
	RawDelete *kvrpcpb.RawDeleteRequest `protobuf:"bytes,17,opt,name=RawDelete,proto3,oneof"`
}

type BatchCommandsRequest_Request_RawBatchDelete struct {
	RawBatchDelete *kvrpcpb.RawBatchDeleteRequest `protobuf:"bytes,18,opt,name=RawBatchDelete,proto3,oneof"`
}

type BatchCommandsRequest_Request_RawScan struct {
	RawScan *kvrpcpb.RawScanRequest `protobuf:"bytes,19,opt,name=RawScan,proto3,oneof"`
}

type BatchCommandsRequest_Request_RawDeleteRange struct {
	RawDeleteRange *kvrpcpb.RawDeleteRangeRequest `protobuf:"bytes,20,opt,name=RawDeleteRange,proto3,oneof"`
}

type BatchCommandsRequest_Request_RawBatchScan struct {
	RawBatchScan *kvrpcpb.RawBatchScanRequest `protobuf:"bytes,21,opt,name=RawBatchScan,proto3,oneof"`
}

type BatchCommandsRequest_Request_Coprocessor struct {
	Coprocessor *coprocessor.Request `protobuf:"bytes,22,opt,name=Coprocessor,proto3,oneof"`
}

type BatchCommandsRequest_Request_PessimisticLock struct {
	PessimisticLock *kvrpcpb.PessimisticLockRequest `protobuf:"bytes,23,opt,name=PessimisticLock,proto3,oneof"`
}

type BatchCommandsRequest_Request_PessimisticRollback struct {
	PessimisticRollback *kvrpcpb.PessimisticRollbackRequest `protobuf:"bytes,24,opt,name=PessimisticRollback,proto3,oneof"`
}

type BatchCommandsRequest_Request_CheckTxnStatus struct {
	CheckTxnStatus *kvrpcpb.CheckTxnStatusRequest `protobuf:"bytes,25,opt,name=CheckTxnStatus,proto3,oneof"`
}

type BatchCommandsRequest_Request_TxnHeartBeat struct {
	TxnHeartBeat *kvrpcpb.TxnHeartBeatRequest `protobuf:"bytes,26,opt,name=TxnHeartBeat,proto3,oneof"`
}

type BatchCommandsRequest_Request_CheckSecondaryLocks struct {
	CheckSecondaryLocks *kvrpcpb.CheckSecondaryLocksRequest `protobuf:"bytes,33,opt,name=CheckSecondaryLocks,proto3,oneof"`
}

type BatchCommandsRequest_Request_RawCoprocessor struct {
	RawCoprocessor *kvrpcpb.RawCoprocessorRequest `protobuf:"bytes,34,opt,name=RawCoprocessor,proto3,oneof"`
}

type BatchCommandsRequest_Request_Empty struct {
	// For some test cases.
	Empty *BatchCommandsEmptyRequest `protobuf:"bytes,255,opt,name=Empty,proto3,oneof"`
}

func (*BatchCommandsRequest_Request_Get) isBatchCommandsRequest_Request_Cmd() {}

func (*BatchCommandsRequest_Request_Scan) isBatchCommandsRequest_Request_Cmd() {}

func (*BatchCommandsRequest_Request_Prewrite) isBatchCommandsRequest_Request_Cmd() {}

func (*BatchCommandsRequest_Request_Commit) isBatchCommandsRequest_Request_Cmd() {}

func (*BatchCommandsRequest_Request_Import) isBatchCommandsRequest_Request_Cmd() {}

func (*BatchCommandsRequest_Request_Cleanup) isBatchCommandsRequest_Request_Cmd() {}

func (*BatchCommandsRequest_Request_BatchGet) isBatchCommandsRequest_Request_Cmd() {}

func (*BatchCommandsRequest_Request_BatchRollback) isBatchCommandsRequest_Request_Cmd() {}

func (*BatchCommandsRequest_Request_ScanLock) isBatchCommandsRequest_Request_Cmd() {}

func (*BatchCommandsRequest_Request_ResolveLock) isBatchCommandsRequest_Request_Cmd() {}

func (*BatchCommandsRequest_Request_GC) isBatchCommandsRequest_Request_Cmd() {}

func (*BatchCommandsRequest_Request_DeleteRange) isBatchCommandsRequest_Request_Cmd() {}

func (*BatchCommandsRequest_Request_RawGet) isBatchCommandsRequest_Request_Cmd() {}

func (*BatchCommandsRequest_Request_RawBatchGet) isBatchCommandsRequest_Request_Cmd() {}

func (*BatchCommandsRequest_Request_RawPut) isBatchCommandsRequest_Request_Cmd() {}

func (*BatchCommandsRequest_Request_RawBatchPut) isBatchCommandsRequest_Request_Cmd() {}

func (*BatchCommandsRequest_Request_RawDelete) isBatchCommandsRequest_Request_Cmd() {}

func (*BatchCommandsRequest_Request_RawBatchDelete) isBatchCommandsRequest_Request_Cmd() {}

func (*BatchCommandsRequest_Request_RawScan) isBatchCommandsRequest_Request_Cmd() {}

func (*BatchCommandsRequest_Request_RawDeleteRange) isBatchCommandsRequest_Request_Cmd() {}

func (*BatchCommandsRequest_Request_RawBatchScan) isBatchCommandsRequest_Request_Cmd() {}

func (*BatchCommandsRequest_Request_Coprocessor) isBatchCommandsRequest_Request_Cmd() {}

func (*BatchCommandsRequest_Request_PessimisticLock) isBatchCommandsRequest_Request_Cmd() {}

func (*BatchCommandsRequest_Request_PessimisticRollback) isBatchCommandsRequest_Request_Cmd() {}

func (*BatchCommandsRequest_Request_CheckTxnStatus) isBatchCommandsRequest_Request_Cmd() {}

func (*BatchCommandsRequest_Request_TxnHeartBeat) isBatchCommandsRequest_Request_Cmd() {}

func (*BatchCommandsRequest_Request_CheckSecondaryLocks) isBatchCommandsRequest_Request_Cmd() {}

func (*BatchCommandsRequest_Request_RawCoprocessor) isBatchCommandsRequest_Request_Cmd() {}

func (*BatchCommandsRequest_Request_Empty) isBatchCommandsRequest_Request_Cmd() {}

type BatchCommandsResponse_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Cmd:
	//	*BatchCommandsResponse_Response_Get
	//	*BatchCommandsResponse_Response_Scan
	//	*BatchCommandsResponse_Response_Prewrite
	//	*BatchCommandsResponse_Response_Commit
	//	*BatchCommandsResponse_Response_Import
	//	*BatchCommandsResponse_Response_Cleanup
	//	*BatchCommandsResponse_Response_BatchGet
	//	*BatchCommandsResponse_Response_BatchRollback
	//	*BatchCommandsResponse_Response_ScanLock
	//	*BatchCommandsResponse_Response_ResolveLock
	//	*BatchCommandsResponse_Response_GC
	//	*BatchCommandsResponse_Response_DeleteRange
	//	*BatchCommandsResponse_Response_RawGet
	//	*BatchCommandsResponse_Response_RawBatchGet
	//	*BatchCommandsResponse_Response_RawPut
	//	*BatchCommandsResponse_Response_RawBatchPut
	//	*BatchCommandsResponse_Response_RawDelete
	//	*BatchCommandsResponse_Response_RawBatchDelete
	//	*BatchCommandsResponse_Response_RawScan
	//	*BatchCommandsResponse_Response_RawDeleteRange
	//	*BatchCommandsResponse_Response_RawBatchScan
	//	*BatchCommandsResponse_Response_Coprocessor
	//	*BatchCommandsResponse_Response_PessimisticLock
	//	*BatchCommandsResponse_Response_PessimisticRollback
	//	*BatchCommandsResponse_Response_CheckTxnStatus
	//	*BatchCommandsResponse_Response_TxnHeartBeat
	//	*BatchCommandsResponse_Response_CheckSecondaryLocks
	//	*BatchCommandsResponse_Response_RawCoprocessor
	//	*BatchCommandsResponse_Response_Empty
	Cmd isBatchCommandsResponse_Response_Cmd `protobuf_oneof:"cmd"`
}

func (x *BatchCommandsResponse_Response) Reset() {
	*x = BatchCommandsResponse_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tikvpb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCommandsResponse_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCommandsResponse_Response) ProtoMessage() {}

func (x *BatchCommandsResponse_Response) ProtoReflect() protoreflect.Message {
	mi := &file_tikvpb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCommandsResponse_Response.ProtoReflect.Descriptor instead.
func (*BatchCommandsResponse_Response) Descriptor() ([]byte, []int) {
	return file_tikvpb_proto_rawDescGZIP(), []int{1, 0}
}

func (m *BatchCommandsResponse_Response) GetCmd() isBatchCommandsResponse_Response_Cmd {
	if m != nil {
		return m.Cmd
	}
	return nil
}

func (x *BatchCommandsResponse_Response) GetGet() *kvrpcpb.GetResponse {
	if x, ok := x.GetCmd().(*BatchCommandsResponse_Response_Get); ok {
		return x.Get
	}
	return nil
}

func (x *BatchCommandsResponse_Response) GetScan() *kvrpcpb.ScanResponse {
	if x, ok := x.GetCmd().(*BatchCommandsResponse_Response_Scan); ok {
		return x.Scan
	}
	return nil
}

func (x *BatchCommandsResponse_Response) GetPrewrite() *kvrpcpb.PrewriteResponse {
	if x, ok := x.GetCmd().(*BatchCommandsResponse_Response_Prewrite); ok {
		return x.Prewrite
	}
	return nil
}

func (x *BatchCommandsResponse_Response) GetCommit() *kvrpcpb.CommitResponse {
	if x, ok := x.GetCmd().(*BatchCommandsResponse_Response_Commit); ok {
		return x.Commit
	}
	return nil
}

func (x *BatchCommandsResponse_Response) GetImport() *kvrpcpb.ImportResponse {
	if x, ok := x.GetCmd().(*BatchCommandsResponse_Response_Import); ok {
		return x.Import
	}
	return nil
}

func (x *BatchCommandsResponse_Response) GetCleanup() *kvrpcpb.CleanupResponse {
	if x, ok := x.GetCmd().(*BatchCommandsResponse_Response_Cleanup); ok {
		return x.Cleanup
	}
	return nil
}

func (x *BatchCommandsResponse_Response) GetBatchGet() *kvrpcpb.BatchGetResponse {
	if x, ok := x.GetCmd().(*BatchCommandsResponse_Response_BatchGet); ok {
		return x.BatchGet
	}
	return nil
}

func (x *BatchCommandsResponse_Response) GetBatchRollback() *kvrpcpb.BatchRollbackResponse {
	if x, ok := x.GetCmd().(*BatchCommandsResponse_Response_BatchRollback); ok {
		return x.BatchRollback
	}
	return nil
}

func (x *BatchCommandsResponse_Response) GetScanLock() *kvrpcpb.ScanLockResponse {
	if x, ok := x.GetCmd().(*BatchCommandsResponse_Response_ScanLock); ok {
		return x.ScanLock
	}
	return nil
}

func (x *BatchCommandsResponse_Response) GetResolveLock() *kvrpcpb.ResolveLockResponse {
	if x, ok := x.GetCmd().(*BatchCommandsResponse_Response_ResolveLock); ok {
		return x.ResolveLock
	}
	return nil
}

func (x *BatchCommandsResponse_Response) GetGC() *kvrpcpb.GCResponse {
	if x, ok := x.GetCmd().(*BatchCommandsResponse_Response_GC); ok {
		return x.GC
	}
	return nil
}

func (x *BatchCommandsResponse_Response) GetDeleteRange() *kvrpcpb.DeleteRangeResponse {
	if x, ok := x.GetCmd().(*BatchCommandsResponse_Response_DeleteRange); ok {
		return x.DeleteRange
	}
	return nil
}

func (x *BatchCommandsResponse_Response) GetRawGet() *kvrpcpb.RawGetResponse {
	if x, ok := x.GetCmd().(*BatchCommandsResponse_Response_RawGet); ok {
		return x.RawGet
	}
	return nil
}

func (x *BatchCommandsResponse_Response) GetRawBatchGet() *kvrpcpb.RawBatchGetResponse {
	if x, ok := x.GetCmd().(*BatchCommandsResponse_Response_RawBatchGet); ok {
		return x.RawBatchGet
	}
	return nil
}

func (x *BatchCommandsResponse_Response) GetRawPut() *kvrpcpb.RawPutResponse {
	if x, ok := x.GetCmd().(*BatchCommandsResponse_Response_RawPut); ok {
		return x.RawPut
	}
	return nil
}

func (x *BatchCommandsResponse_Response) GetRawBatchPut() *kvrpcpb.RawBatchPutResponse {
	if x, ok := x.GetCmd().(*BatchCommandsResponse_Response_RawBatchPut); ok {
		return x.RawBatchPut
	}
	return nil
}

func (x *BatchCommandsResponse_Response) GetRawDelete() *kvrpcpb.RawDeleteResponse {
	if x, ok := x.GetCmd().(*BatchCommandsResponse_Response_RawDelete); ok {
		return x.RawDelete
	}
	return nil
}

func (x *BatchCommandsResponse_Response) GetRawBatchDelete() *kvrpcpb.RawBatchDeleteResponse {
	if x, ok := x.GetCmd().(*BatchCommandsResponse_Response_RawBatchDelete); ok {
		return x.RawBatchDelete
	}
	return nil
}

func (x *BatchCommandsResponse_Response) GetRawScan() *kvrpcpb.RawScanResponse {
	if x, ok := x.GetCmd().(*BatchCommandsResponse_Response_RawScan); ok {
		return x.RawScan
	}
	return nil
}

func (x *BatchCommandsResponse_Response) GetRawDeleteRange() *kvrpcpb.RawDeleteRangeResponse {
	if x, ok := x.GetCmd().(*BatchCommandsResponse_Response_RawDeleteRange); ok {
		return x.RawDeleteRange
	}
	return nil
}

func (x *BatchCommandsResponse_Response) GetRawBatchScan() *kvrpcpb.RawBatchScanResponse {
	if x, ok := x.GetCmd().(*BatchCommandsResponse_Response_RawBatchScan); ok {
		return x.RawBatchScan
	}
	return nil
}

func (x *BatchCommandsResponse_Response) GetCoprocessor() *coprocessor.Response {
	if x, ok := x.GetCmd().(*BatchCommandsResponse_Response_Coprocessor); ok {
		return x.Coprocessor
	}
	return nil
}

func (x *BatchCommandsResponse_Response) GetPessimisticLock() *kvrpcpb.PessimisticLockResponse {
	if x, ok := x.GetCmd().(*BatchCommandsResponse_Response_PessimisticLock); ok {
		return x.PessimisticLock
	}
	return nil
}

func (x *BatchCommandsResponse_Response) GetPessimisticRollback() *kvrpcpb.PessimisticRollbackResponse {
	if x, ok := x.GetCmd().(*BatchCommandsResponse_Response_PessimisticRollback); ok {
		return x.PessimisticRollback
	}
	return nil
}

func (x *BatchCommandsResponse_Response) GetCheckTxnStatus() *kvrpcpb.CheckTxnStatusResponse {
	if x, ok := x.GetCmd().(*BatchCommandsResponse_Response_CheckTxnStatus); ok {
		return x.CheckTxnStatus
	}
	return nil
}

func (x *BatchCommandsResponse_Response) GetTxnHeartBeat() *kvrpcpb.TxnHeartBeatResponse {
	if x, ok := x.GetCmd().(*BatchCommandsResponse_Response_TxnHeartBeat); ok {
		return x.TxnHeartBeat
	}
	return nil
}

func (x *BatchCommandsResponse_Response) GetCheckSecondaryLocks() *kvrpcpb.CheckSecondaryLocksResponse {
	if x, ok := x.GetCmd().(*BatchCommandsResponse_Response_CheckSecondaryLocks); ok {
		return x.CheckSecondaryLocks
	}
	return nil
}

func (x *BatchCommandsResponse_Response) GetRawCoprocessor() *kvrpcpb.RawCoprocessorResponse {
	if x, ok := x.GetCmd().(*BatchCommandsResponse_Response_RawCoprocessor); ok {
		return x.RawCoprocessor
	}
	return nil
}

func (x *BatchCommandsResponse_Response) GetEmpty() *BatchCommandsEmptyResponse {
	if x, ok := x.GetCmd().(*BatchCommandsResponse_Response_Empty); ok {
		return x.Empty
	}
	return nil
}

type isBatchCommandsResponse_Response_Cmd interface {
	isBatchCommandsResponse_Response_Cmd()
}

type BatchCommandsResponse_Response_Get struct {
	Get *kvrpcpb.GetResponse `protobuf:"bytes,1,opt,name=Get,proto3,oneof"`
}

type BatchCommandsResponse_Response_Scan struct {
	Scan *kvrpcpb.ScanResponse `protobuf:"bytes,2,opt,name=Scan,proto3,oneof"`
}

type BatchCommandsResponse_Response_Prewrite struct {
	Prewrite *kvrpcpb.PrewriteResponse `protobuf:"bytes,3,opt,name=Prewrite,proto3,oneof"`
}

type BatchCommandsResponse_Response_Commit struct {
	Commit *kvrpcpb.CommitResponse `protobuf:"bytes,4,opt,name=Commit,proto3,oneof"`
}

type BatchCommandsResponse_Response_Import struct {
	Import *kvrpcpb.ImportResponse `protobuf:"bytes,5,opt,name=Import,proto3,oneof"`
}

type BatchCommandsResponse_Response_Cleanup struct {
	Cleanup *kvrpcpb.CleanupResponse `protobuf:"bytes,6,opt,name=Cleanup,proto3,oneof"`
}

type BatchCommandsResponse_Response_BatchGet struct {
	BatchGet *kvrpcpb.BatchGetResponse `protobuf:"bytes,7,opt,name=BatchGet,proto3,oneof"`
}

type BatchCommandsResponse_Response_BatchRollback struct {
	BatchRollback *kvrpcpb.BatchRollbackResponse `protobuf:"bytes,8,opt,name=BatchRollback,proto3,oneof"`
}

type BatchCommandsResponse_Response_ScanLock struct {
	ScanLock *kvrpcpb.ScanLockResponse `protobuf:"bytes,9,opt,name=ScanLock,proto3,oneof"`
}

type BatchCommandsResponse_Response_ResolveLock struct {
	ResolveLock *kvrpcpb.ResolveLockResponse `protobuf:"bytes,10,opt,name=ResolveLock,proto3,oneof"`
}

type BatchCommandsResponse_Response_GC struct {
	GC *kvrpcpb.GCResponse `protobuf:"bytes,11,opt,name=GC,proto3,oneof"`
}

type BatchCommandsResponse_Response_DeleteRange struct {
	DeleteRange *kvrpcpb.DeleteRangeResponse `protobuf:"bytes,12,opt,name=DeleteRange,proto3,oneof"`
}

type BatchCommandsResponse_Response_RawGet struct {
	RawGet *kvrpcpb.RawGetResponse `protobuf:"bytes,13,opt,name=RawGet,proto3,oneof"`
}

type BatchCommandsResponse_Response_RawBatchGet struct {
	RawBatchGet *kvrpcpb.RawBatchGetResponse `protobuf:"bytes,14,opt,name=RawBatchGet,proto3,oneof"`
}

type BatchCommandsResponse_Response_RawPut struct {
	RawPut *kvrpcpb.RawPutResponse `protobuf:"bytes,15,opt,name=RawPut,proto3,oneof"`
}

type BatchCommandsResponse_Response_RawBatchPut struct {
	RawBatchPut *kvrpcpb.RawBatchPutResponse `protobuf:"bytes,16,opt,name=RawBatchPut,proto3,oneof"`
}

type BatchCommandsResponse_Response_RawDelete struct {
	RawDelete *kvrpcpb.RawDeleteResponse `protobuf:"bytes,17,opt,name=RawDelete,proto3,oneof"`
}

type BatchCommandsResponse_Response_RawBatchDelete struct {
	RawBatchDelete *kvrpcpb.RawBatchDeleteResponse `protobuf:"bytes,18,opt,name=RawBatchDelete,proto3,oneof"`
}

type BatchCommandsResponse_Response_RawScan struct {
	RawScan *kvrpcpb.RawScanResponse `protobuf:"bytes,19,opt,name=RawScan,proto3,oneof"`
}

type BatchCommandsResponse_Response_RawDeleteRange struct {
	RawDeleteRange *kvrpcpb.RawDeleteRangeResponse `protobuf:"bytes,20,opt,name=RawDeleteRange,proto3,oneof"`
}

type BatchCommandsResponse_Response_RawBatchScan struct {
	RawBatchScan *kvrpcpb.RawBatchScanResponse `protobuf:"bytes,21,opt,name=RawBatchScan,proto3,oneof"`
}

type BatchCommandsResponse_Response_Coprocessor struct {
	Coprocessor *coprocessor.Response `protobuf:"bytes,22,opt,name=Coprocessor,proto3,oneof"`
}

type BatchCommandsResponse_Response_PessimisticLock struct {
	PessimisticLock *kvrpcpb.PessimisticLockResponse `protobuf:"bytes,23,opt,name=PessimisticLock,proto3,oneof"`
}

type BatchCommandsResponse_Response_PessimisticRollback struct {
	PessimisticRollback *kvrpcpb.PessimisticRollbackResponse `protobuf:"bytes,24,opt,name=PessimisticRollback,proto3,oneof"`
}

type BatchCommandsResponse_Response_CheckTxnStatus struct {
	CheckTxnStatus *kvrpcpb.CheckTxnStatusResponse `protobuf:"bytes,25,opt,name=CheckTxnStatus,proto3,oneof"`
}

type BatchCommandsResponse_Response_TxnHeartBeat struct {
	TxnHeartBeat *kvrpcpb.TxnHeartBeatResponse `protobuf:"bytes,26,opt,name=TxnHeartBeat,proto3,oneof"`
}

type BatchCommandsResponse_Response_CheckSecondaryLocks struct {
	CheckSecondaryLocks *kvrpcpb.CheckSecondaryLocksResponse `protobuf:"bytes,33,opt,name=CheckSecondaryLocks,proto3,oneof"`
}

type BatchCommandsResponse_Response_RawCoprocessor struct {
	RawCoprocessor *kvrpcpb.RawCoprocessorResponse `protobuf:"bytes,34,opt,name=RawCoprocessor,proto3,oneof"`
}

type BatchCommandsResponse_Response_Empty struct {
	// For some test cases.
	Empty *BatchCommandsEmptyResponse `protobuf:"bytes,255,opt,name=Empty,proto3,oneof"`
}

func (*BatchCommandsResponse_Response_Get) isBatchCommandsResponse_Response_Cmd() {}

func (*BatchCommandsResponse_Response_Scan) isBatchCommandsResponse_Response_Cmd() {}

func (*BatchCommandsResponse_Response_Prewrite) isBatchCommandsResponse_Response_Cmd() {}

func (*BatchCommandsResponse_Response_Commit) isBatchCommandsResponse_Response_Cmd() {}

func (*BatchCommandsResponse_Response_Import) isBatchCommandsResponse_Response_Cmd() {}

func (*BatchCommandsResponse_Response_Cleanup) isBatchCommandsResponse_Response_Cmd() {}

func (*BatchCommandsResponse_Response_BatchGet) isBatchCommandsResponse_Response_Cmd() {}

func (*BatchCommandsResponse_Response_BatchRollback) isBatchCommandsResponse_Response_Cmd() {}

func (*BatchCommandsResponse_Response_ScanLock) isBatchCommandsResponse_Response_Cmd() {}

func (*BatchCommandsResponse_Response_ResolveLock) isBatchCommandsResponse_Response_Cmd() {}

func (*BatchCommandsResponse_Response_GC) isBatchCommandsResponse_Response_Cmd() {}

func (*BatchCommandsResponse_Response_DeleteRange) isBatchCommandsResponse_Response_Cmd() {}

func (*BatchCommandsResponse_Response_RawGet) isBatchCommandsResponse_Response_Cmd() {}

func (*BatchCommandsResponse_Response_RawBatchGet) isBatchCommandsResponse_Response_Cmd() {}

func (*BatchCommandsResponse_Response_RawPut) isBatchCommandsResponse_Response_Cmd() {}

func (*BatchCommandsResponse_Response_RawBatchPut) isBatchCommandsResponse_Response_Cmd() {}

func (*BatchCommandsResponse_Response_RawDelete) isBatchCommandsResponse_Response_Cmd() {}

func (*BatchCommandsResponse_Response_RawBatchDelete) isBatchCommandsResponse_Response_Cmd() {}

func (*BatchCommandsResponse_Response_RawScan) isBatchCommandsResponse_Response_Cmd() {}

func (*BatchCommandsResponse_Response_RawDeleteRange) isBatchCommandsResponse_Response_Cmd() {}

func (*BatchCommandsResponse_Response_RawBatchScan) isBatchCommandsResponse_Response_Cmd() {}

func (*BatchCommandsResponse_Response_Coprocessor) isBatchCommandsResponse_Response_Cmd() {}

func (*BatchCommandsResponse_Response_PessimisticLock) isBatchCommandsResponse_Response_Cmd() {}

func (*BatchCommandsResponse_Response_PessimisticRollback) isBatchCommandsResponse_Response_Cmd() {}

func (*BatchCommandsResponse_Response_CheckTxnStatus) isBatchCommandsResponse_Response_Cmd() {}

func (*BatchCommandsResponse_Response_TxnHeartBeat) isBatchCommandsResponse_Response_Cmd() {}

func (*BatchCommandsResponse_Response_CheckSecondaryLocks) isBatchCommandsResponse_Response_Cmd() {}

func (*BatchCommandsResponse_Response_RawCoprocessor) isBatchCommandsResponse_Response_Cmd() {}

func (*BatchCommandsResponse_Response_Empty) isBatchCommandsResponse_Response_Cmd() {}

var File_tikvpb_proto protoreflect.FileDescriptor

var file_tikvpb_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x1a, 0x11, 0x63, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x6b, 0x76, 0x72, 0x70, 0x63,
	0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x6d, 0x70, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f,
	0x72, 0x75, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x92, 0x0f, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x69, 0x6b,
	0x76, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73, 0x1a, 0x96, 0x0e, 0x0a, 0x07,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x03, 0x47, 0x65, 0x74,
	0x12, 0x2a, 0x0a, 0x04, 0x53, 0x63, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x36, 0x0a, 0x08,
	0x50, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x50, 0x72, 0x65, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62,
	0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x06, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x43, 0x6c, 0x65, 0x61,
	0x6e, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x76, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x12, 0x36, 0x0a,
	0x08, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x12, 0x45, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b,
	0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x36, 0x0a, 0x08,
	0x53, 0x63, 0x61, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x4c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x53, 0x63, 0x61, 0x6e,
	0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x3f, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x4c,
	0x6f, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x76, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x02, 0x47, 0x43, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x43, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x02, 0x47, 0x43, 0x12, 0x3f, 0x0a, 0x0b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x06,
	0x52, 0x61, 0x77, 0x47, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b,
	0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x77, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x52, 0x61, 0x77, 0x47, 0x65, 0x74, 0x12, 0x3f,
	0x0a, 0x0b, 0x52, 0x61, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x52, 0x61,
	0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0b, 0x52, 0x61, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x12,
	0x30, 0x0a, 0x06, 0x52, 0x61, 0x77, 0x50, 0x75, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x77, 0x50, 0x75, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x52, 0x61, 0x77, 0x50, 0x75,
	0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x52, 0x61, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x75, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62,
	0x2e, 0x52, 0x61, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x52, 0x61, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x75, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x52, 0x61, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e,
	0x52, 0x61, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x09, 0x52, 0x61, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x48, 0x0a,
	0x0e, 0x52, 0x61, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e,
	0x52, 0x61, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x52, 0x61, 0x77, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x52, 0x61, 0x77, 0x53, 0x63,
	0x61, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63,
	0x70, 0x62, 0x2e, 0x52, 0x61, 0x77, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x07, 0x52, 0x61, 0x77, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x48, 0x0a, 0x0e,
	0x52, 0x61, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x52,
	0x61, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x52, 0x61, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x52, 0x61, 0x77, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x63, 0x61, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b,
	0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x52, 0x61,
	0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x43, 0x6f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x43, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x12, 0x4b, 0x0a, 0x0f, 0x50, 0x65, 0x73, 0x73, 0x69, 0x6d, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x4c, 0x6f, 0x63, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x73, 0x73, 0x69, 0x6d, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x0f, 0x50, 0x65, 0x73, 0x73, 0x69, 0x6d, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4c, 0x6f, 0x63,
	0x6b, 0x12, 0x57, 0x0a, 0x13, 0x50, 0x65, 0x73, 0x73, 0x69, 0x6d, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x73, 0x73, 0x69, 0x6d, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x50, 0x65, 0x73, 0x73, 0x69, 0x6d, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x48, 0x0a, 0x0e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x54, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x54, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x78, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x54, 0x78, 0x6e, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x42, 0x65, 0x61, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x76, 0x72,
	0x70, 0x63, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x6e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x54, 0x78, 0x6e, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x12, 0x57, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4c, 0x6f,
	0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x6b,
	0x73, 0x12, 0x48, 0x0a, 0x0e, 0x52, 0x61, 0x77, 0x43, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x76, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x77, 0x43, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x52, 0x61, 0x77,
	0x43, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x05, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x69,
	0x6b, 0x76, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x05, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x4a, 0x04,
	0x08, 0x1b, 0x10, 0x21, 0x22, 0xe7, 0x0f, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x1a, 0xb4, 0x0e, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x03, 0x47, 0x65, 0x74, 0x12, 0x2b,
	0x0a, 0x04, 0x53, 0x63, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b,
	0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x04, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x50,
	0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x50, 0x72, 0x65, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70,
	0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x06, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x43, 0x6c,
	0x65, 0x61, 0x6e, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x76,
	0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x07, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70,
	0x12, 0x37, 0x0a, 0x08, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x12, 0x46, 0x0a, 0x0d, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x0d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x12, 0x37, 0x0a, 0x08, 0x53, 0x63, 0x61, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x53, 0x63,
	0x61, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x53, 0x63, 0x61, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x40, 0x0a, 0x0b, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x25, 0x0a, 0x02,
	0x47, 0x43, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63,
	0x70, 0x62, 0x2e, 0x47, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x02, 0x47, 0x43, 0x12, 0x40, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63,
	0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x52, 0x61, 0x77, 0x47, 0x65, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e,
	0x52, 0x61, 0x77, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x06, 0x52, 0x61, 0x77, 0x47, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x52, 0x61, 0x77, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x52,
	0x61, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x52, 0x61,
	0x77, 0x50, 0x75, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x76, 0x72,
	0x70, 0x63, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x77, 0x50, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x06, 0x52, 0x61, 0x77, 0x50, 0x75, 0x74, 0x12, 0x40, 0x0a,
	0x0b, 0x52, 0x61, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x75, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x77,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x0b, 0x52, 0x61, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x75, 0x74, 0x12,
	0x3a, 0x0a, 0x09, 0x52, 0x61, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x77,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x52, 0x61, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x52,
	0x61, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x52, 0x61,
	0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x52, 0x61, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x52, 0x61, 0x77, 0x53, 0x63, 0x61,
	0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70,
	0x62, 0x2e, 0x52, 0x61, 0x77, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x07, 0x52, 0x61, 0x77, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x49, 0x0a, 0x0e,
	0x52, 0x61, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x52,
	0x61, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x52, 0x61, 0x77, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x52, 0x61, 0x77, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x63, 0x61, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c,
	0x52, 0x61, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x39, 0x0a, 0x0b,
	0x43, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x43, 0x6f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x4c, 0x0a, 0x0f, 0x50, 0x65, 0x73, 0x73, 0x69,
	0x6d, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4c, 0x6f, 0x63, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x73, 0x73, 0x69,
	0x6d, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x50, 0x65, 0x73, 0x73, 0x69, 0x6d, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x58, 0x0a, 0x13, 0x50, 0x65, 0x73, 0x73, 0x69, 0x6d, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x73,
	0x73, 0x69, 0x6d, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x50, 0x65, 0x73, 0x73,
	0x69, 0x6d, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12,
	0x49, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70,
	0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x54, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x54, 0x78,
	0x6e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x6e, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x0c, 0x54, 0x78, 0x6e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x12,
	0x58, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b,
	0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x49, 0x0a, 0x0e, 0x52, 0x61, 0x77,
	0x43, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x77, 0x43,
	0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x52, 0x61, 0x77, 0x43, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x18, 0xff, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x42, 0x05, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x4a, 0x04, 0x08, 0x1b, 0x10, 0x21, 0x22, 0x42,
	0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x73, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62,
	0x2e, 0x52, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x6d, 0x73,
	0x67, 0x73, 0x22, 0x53, 0x0a, 0x19, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x35, 0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x32, 0xcc,
	0x1f, 0x0a, 0x04, 0x54, 0x69, 0x6b, 0x76, 0x12, 0x34, 0x0a, 0x05, 0x4b, 0x76, 0x47, 0x65, 0x74,
	0x12, 0x13, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a,
	0x06, 0x4b, 0x76, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x14, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70,
	0x62, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0a, 0x4b, 0x76, 0x50, 0x72, 0x65, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x50,
	0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x11, 0x4b,
	0x76, 0x50, 0x65, 0x73, 0x73, 0x69, 0x6d, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4c, 0x6f, 0x63, 0x6b,
	0x12, 0x1f, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x73, 0x73, 0x69,
	0x6d, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x73, 0x73,
	0x69, 0x6d, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x15, 0x4b, 0x56, 0x50, 0x65, 0x73, 0x73, 0x69,
	0x6d, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x23,
	0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x73, 0x73, 0x69, 0x6d, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x50, 0x65,
	0x73, 0x73, 0x69, 0x6d, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0e, 0x4b,
	0x76, 0x54, 0x78, 0x6e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x12, 0x1c, 0x2e,
	0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x6e, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6b, 0x76,
	0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x6e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65,
	0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x10,
	0x4b, 0x76, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1e, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x54, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x54, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x15, 0x4b, 0x76, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x23, 0x2e, 0x6b,
	0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x08, 0x4b, 0x76, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x08, 0x4b, 0x76, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6b,
	0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x09, 0x4b, 0x76, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x75, 0x70, 0x12, 0x17, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43,
	0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0a, 0x4b, 0x76, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x12, 0x18, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70,
	0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52,
	0x0a, 0x0f, 0x4b, 0x76, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x12, 0x1d, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x43, 0x0a, 0x0a, 0x4b, 0x76, 0x53, 0x63, 0x61, 0x6e, 0x4c, 0x6f, 0x63, 0x6b,
	0x12, 0x18, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x4c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6b, 0x76, 0x72,
	0x70, 0x63, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0d, 0x4b, 0x76, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x1b, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x04, 0x4b, 0x76, 0x47, 0x43, 0x12, 0x12, 0x2e,
	0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x43, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0d, 0x4b, 0x76, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x2e, 0x6b, 0x76, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x06, 0x52, 0x61, 0x77, 0x47, 0x65, 0x74,
	0x12, 0x16, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x77, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63,
	0x70, 0x62, 0x2e, 0x52, 0x61, 0x77, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0b, 0x52, 0x61, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47,
	0x65, 0x74, 0x12, 0x1b, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x77,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x77, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x3b, 0x0a, 0x06, 0x52, 0x61, 0x77, 0x50, 0x75, 0x74, 0x12, 0x16, 0x2e, 0x6b, 0x76, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x77, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x77, 0x50,
	0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0b,
	0x52, 0x61, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x75, 0x74, 0x12, 0x1b, 0x2e, 0x6b, 0x76,
	0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x75,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63,
	0x70, 0x62, 0x2e, 0x52, 0x61, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x75, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x09, 0x52, 0x61, 0x77, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e,
	0x52, 0x61, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x77, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53,
	0x0a, 0x0e, 0x52, 0x61, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x1e, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x77, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x77, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x07, 0x52, 0x61, 0x77, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x17,
	0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x77, 0x53, 0x63, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70,
	0x62, 0x2e, 0x52, 0x61, 0x77, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0e, 0x52, 0x61, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e,
	0x52, 0x61, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e,
	0x52, 0x61, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0c, 0x52, 0x61, 0x77, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x1c, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63,
	0x70, 0x62, 0x2e, 0x52, 0x61, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x61, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62,
	0x2e, 0x52, 0x61, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0c, 0x52, 0x61, 0x77, 0x47, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x54, 0x54, 0x4c, 0x12, 0x1c, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70,
	0x62, 0x2e, 0x52, 0x61, 0x77, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x54, 0x54, 0x4c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e,
	0x52, 0x61, 0x77, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x54, 0x54, 0x4c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x11, 0x52, 0x61, 0x77, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x77, 0x61, 0x70, 0x12, 0x16, 0x2e, 0x6b, 0x76,
	0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x77, 0x43, 0x41, 0x53, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x52, 0x61,
	0x77, 0x43, 0x41, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a,
	0x0a, 0x0b, 0x52, 0x61, 0x77, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x1b, 0x2e,
	0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x77, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6b, 0x76, 0x72,
	0x70, 0x63, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x77, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x12, 0x55, 0x6e,
	0x73, 0x61, 0x66, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x22, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x73, 0x61, 0x66,
	0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x55,
	0x6e, 0x73, 0x61, 0x66, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x14, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6b, 0x76, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5c, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70,
	0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6b, 0x76, 0x72,
	0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5f, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6b, 0x76, 0x72,
	0x70, 0x63, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x59, 0x0a, 0x10, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x63, 0x61,
	0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x20, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e,
	0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x63, 0x61, 0x6e, 0x4c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70,
	0x62, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x63, 0x61, 0x6e, 0x4c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0b,
	0x43, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x14, 0x2e, 0x63, 0x6f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x11, 0x43, 0x6f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x14, 0x2e, 0x63, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x4d, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x63, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x53, 0x0a, 0x0e, 0x52, 0x61, 0x77, 0x43, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x12, 0x1e, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x77, 0x43,
	0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x77, 0x43,
	0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x04, 0x52, 0x61, 0x66, 0x74, 0x12, 0x1a, 0x2e, 0x72,
	0x61, 0x66, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x66,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x13, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x6e, 0x65, 0x22, 0x00, 0x28,
	0x01, 0x12, 0x3e, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x61, 0x66, 0x74, 0x12, 0x18,
	0x2e, 0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x61, 0x66,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x13, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x6e, 0x65, 0x22, 0x00, 0x28,
	0x01, 0x12, 0x41, 0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x1c, 0x2e,
	0x72, 0x61, 0x66, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x13, 0x2e, 0x72, 0x61,
	0x66, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x44, 0x6f, 0x6e, 0x65,
	0x22, 0x00, 0x28, 0x01, 0x12, 0x4a, 0x0a, 0x0b, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x44, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x2e,
	0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0c, 0x4d, 0x76, 0x63, 0x63, 0x47, 0x65,
	0x74, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62,
	0x2e, 0x4d, 0x76, 0x63, 0x63, 0x47, 0x65, 0x74, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4d,
	0x76, 0x63, 0x63, 0x47, 0x65, 0x74, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x10, 0x4d, 0x76, 0x63, 0x63, 0x47, 0x65, 0x74,
	0x42, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x12, 0x20, 0x2e, 0x6b, 0x76, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x2e, 0x4d, 0x76, 0x63, 0x63, 0x47, 0x65, 0x74, 0x42, 0x79, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6b, 0x76,
	0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4d, 0x76, 0x63, 0x63, 0x47, 0x65, 0x74, 0x42, 0x79, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x52, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x73, 0x12, 0x1c, 0x2e, 0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x74, 0x69, 0x6b, 0x76, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x28, 0x01, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x50, 0x50, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x2e, 0x6d, 0x70, 0x70, 0x2e, 0x44, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x6d, 0x70, 0x70, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42,
	0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x50, 0x50, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x16, 0x2e, 0x6d, 0x70, 0x70, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x70, 0x70, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x54, 0x0a, 0x16, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d,
	0x50, 0x50, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x6d,
	0x70, 0x70, 0x2e, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x50, 0x50, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x12, 0x2e, 0x6d, 0x70, 0x70, 0x2e, 0x4d, 0x50, 0x50, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x36, 0x0a, 0x07, 0x49, 0x73, 0x41, 0x6c,
	0x69, 0x76, 0x65, 0x12, 0x13, 0x2e, 0x6d, 0x70, 0x70, 0x2e, 0x49, 0x73, 0x41, 0x6c, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6d, 0x70, 0x70, 0x2e, 0x49,
	0x73, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x48, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x1b, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6b,
	0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x61, 0x66, 0x65, 0x54, 0x53, 0x12, 0x1b, 0x2e, 0x6b,
	0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x61, 0x66, 0x65,
	0x54, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6b, 0x76, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x61, 0x66, 0x65, 0x54, 0x53, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x6f,
	0x63, 0x6b, 0x57, 0x61, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x6b, 0x76, 0x72,
	0x70, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x57, 0x61, 0x69, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6b, 0x76,
	0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x57, 0x61, 0x69,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x55, 0x0a,
	0x10, 0x6f, 0x72, 0x67, 0x2e, 0x74, 0x69, 0x6b, 0x76, 0x2e, 0x6b, 0x76, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69,
	0x6e, 0x67, 0x63, 0x61, 0x70, 0x2f, 0x6b, 0x76, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x6b, 0x69, 0x74, 0x65, 0x78, 0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x74, 0x69,
	0x6b, 0x76, 0x70, 0x62, 0xe0, 0xe2, 0x1e, 0x01, 0xc8, 0xe2, 0x1e, 0x01, 0xd0, 0xe2, 0x1e, 0x01,
	0xd8, 0xa8, 0x08, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tikvpb_proto_rawDescOnce sync.Once
	file_tikvpb_proto_rawDescData = file_tikvpb_proto_rawDesc
)

func file_tikvpb_proto_rawDescGZIP() []byte {
	file_tikvpb_proto_rawDescOnce.Do(func() {
		file_tikvpb_proto_rawDescData = protoimpl.X.CompressGZIP(file_tikvpb_proto_rawDescData)
	})
	return file_tikvpb_proto_rawDescData
}

var file_tikvpb_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_tikvpb_proto_goTypes = []interface{}{
	(*BatchCommandsRequest)(nil),                 // 0: tikvpb.BatchCommandsRequest
	(*BatchCommandsResponse)(nil),                // 1: tikvpb.BatchCommandsResponse
	(*BatchRaftMessage)(nil),                     // 2: tikvpb.BatchRaftMessage
	(*BatchCommandsEmptyRequest)(nil),            // 3: tikvpb.BatchCommandsEmptyRequest
	(*BatchCommandsEmptyResponse)(nil),           // 4: tikvpb.BatchCommandsEmptyResponse
	(*BatchCommandsRequest_Request)(nil),         // 5: tikvpb.BatchCommandsRequest.Request
	(*BatchCommandsResponse_Response)(nil),       // 6: tikvpb.BatchCommandsResponse.Response
	(*raft_serverpb.RaftMessage)(nil),            // 7: raft_serverpb.RaftMessage
	(*kvrpcpb.GetRequest)(nil),                   // 8: kvrpcpb.GetRequest
	(*kvrpcpb.ScanRequest)(nil),                  // 9: kvrpcpb.ScanRequest
	(*kvrpcpb.PrewriteRequest)(nil),              // 10: kvrpcpb.PrewriteRequest
	(*kvrpcpb.CommitRequest)(nil),                // 11: kvrpcpb.CommitRequest
	(*kvrpcpb.ImportRequest)(nil),                // 12: kvrpcpb.ImportRequest
	(*kvrpcpb.CleanupRequest)(nil),               // 13: kvrpcpb.CleanupRequest
	(*kvrpcpb.BatchGetRequest)(nil),              // 14: kvrpcpb.BatchGetRequest
	(*kvrpcpb.BatchRollbackRequest)(nil),         // 15: kvrpcpb.BatchRollbackRequest
	(*kvrpcpb.ScanLockRequest)(nil),              // 16: kvrpcpb.ScanLockRequest
	(*kvrpcpb.ResolveLockRequest)(nil),           // 17: kvrpcpb.ResolveLockRequest
	(*kvrpcpb.GCRequest)(nil),                    // 18: kvrpcpb.GCRequest
	(*kvrpcpb.DeleteRangeRequest)(nil),           // 19: kvrpcpb.DeleteRangeRequest
	(*kvrpcpb.RawGetRequest)(nil),                // 20: kvrpcpb.RawGetRequest
	(*kvrpcpb.RawBatchGetRequest)(nil),           // 21: kvrpcpb.RawBatchGetRequest
	(*kvrpcpb.RawPutRequest)(nil),                // 22: kvrpcpb.RawPutRequest
	(*kvrpcpb.RawBatchPutRequest)(nil),           // 23: kvrpcpb.RawBatchPutRequest
	(*kvrpcpb.RawDeleteRequest)(nil),             // 24: kvrpcpb.RawDeleteRequest
	(*kvrpcpb.RawBatchDeleteRequest)(nil),        // 25: kvrpcpb.RawBatchDeleteRequest
	(*kvrpcpb.RawScanRequest)(nil),               // 26: kvrpcpb.RawScanRequest
	(*kvrpcpb.RawDeleteRangeRequest)(nil),        // 27: kvrpcpb.RawDeleteRangeRequest
	(*kvrpcpb.RawBatchScanRequest)(nil),          // 28: kvrpcpb.RawBatchScanRequest
	(*coprocessor.Request)(nil),                  // 29: coprocessor.Request
	(*kvrpcpb.PessimisticLockRequest)(nil),       // 30: kvrpcpb.PessimisticLockRequest
	(*kvrpcpb.PessimisticRollbackRequest)(nil),   // 31: kvrpcpb.PessimisticRollbackRequest
	(*kvrpcpb.CheckTxnStatusRequest)(nil),        // 32: kvrpcpb.CheckTxnStatusRequest
	(*kvrpcpb.TxnHeartBeatRequest)(nil),          // 33: kvrpcpb.TxnHeartBeatRequest
	(*kvrpcpb.CheckSecondaryLocksRequest)(nil),   // 34: kvrpcpb.CheckSecondaryLocksRequest
	(*kvrpcpb.RawCoprocessorRequest)(nil),        // 35: kvrpcpb.RawCoprocessorRequest
	(*kvrpcpb.GetResponse)(nil),                  // 36: kvrpcpb.GetResponse
	(*kvrpcpb.ScanResponse)(nil),                 // 37: kvrpcpb.ScanResponse
	(*kvrpcpb.PrewriteResponse)(nil),             // 38: kvrpcpb.PrewriteResponse
	(*kvrpcpb.CommitResponse)(nil),               // 39: kvrpcpb.CommitResponse
	(*kvrpcpb.ImportResponse)(nil),               // 40: kvrpcpb.ImportResponse
	(*kvrpcpb.CleanupResponse)(nil),              // 41: kvrpcpb.CleanupResponse
	(*kvrpcpb.BatchGetResponse)(nil),             // 42: kvrpcpb.BatchGetResponse
	(*kvrpcpb.BatchRollbackResponse)(nil),        // 43: kvrpcpb.BatchRollbackResponse
	(*kvrpcpb.ScanLockResponse)(nil),             // 44: kvrpcpb.ScanLockResponse
	(*kvrpcpb.ResolveLockResponse)(nil),          // 45: kvrpcpb.ResolveLockResponse
	(*kvrpcpb.GCResponse)(nil),                   // 46: kvrpcpb.GCResponse
	(*kvrpcpb.DeleteRangeResponse)(nil),          // 47: kvrpcpb.DeleteRangeResponse
	(*kvrpcpb.RawGetResponse)(nil),               // 48: kvrpcpb.RawGetResponse
	(*kvrpcpb.RawBatchGetResponse)(nil),          // 49: kvrpcpb.RawBatchGetResponse
	(*kvrpcpb.RawPutResponse)(nil),               // 50: kvrpcpb.RawPutResponse
	(*kvrpcpb.RawBatchPutResponse)(nil),          // 51: kvrpcpb.RawBatchPutResponse
	(*kvrpcpb.RawDeleteResponse)(nil),            // 52: kvrpcpb.RawDeleteResponse
	(*kvrpcpb.RawBatchDeleteResponse)(nil),       // 53: kvrpcpb.RawBatchDeleteResponse
	(*kvrpcpb.RawScanResponse)(nil),              // 54: kvrpcpb.RawScanResponse
	(*kvrpcpb.RawDeleteRangeResponse)(nil),       // 55: kvrpcpb.RawDeleteRangeResponse
	(*kvrpcpb.RawBatchScanResponse)(nil),         // 56: kvrpcpb.RawBatchScanResponse
	(*coprocessor.Response)(nil),                 // 57: coprocessor.Response
	(*kvrpcpb.PessimisticLockResponse)(nil),      // 58: kvrpcpb.PessimisticLockResponse
	(*kvrpcpb.PessimisticRollbackResponse)(nil),  // 59: kvrpcpb.PessimisticRollbackResponse
	(*kvrpcpb.CheckTxnStatusResponse)(nil),       // 60: kvrpcpb.CheckTxnStatusResponse
	(*kvrpcpb.TxnHeartBeatResponse)(nil),         // 61: kvrpcpb.TxnHeartBeatResponse
	(*kvrpcpb.CheckSecondaryLocksResponse)(nil),  // 62: kvrpcpb.CheckSecondaryLocksResponse
	(*kvrpcpb.RawCoprocessorResponse)(nil),       // 63: kvrpcpb.RawCoprocessorResponse
	(*kvrpcpb.RawGetKeyTTLRequest)(nil),          // 64: kvrpcpb.RawGetKeyTTLRequest
	(*kvrpcpb.RawCASRequest)(nil),                // 65: kvrpcpb.RawCASRequest
	(*kvrpcpb.RawChecksumRequest)(nil),           // 66: kvrpcpb.RawChecksumRequest
	(*kvrpcpb.UnsafeDestroyRangeRequest)(nil),    // 67: kvrpcpb.UnsafeDestroyRangeRequest
	(*kvrpcpb.RegisterLockObserverRequest)(nil),  // 68: kvrpcpb.RegisterLockObserverRequest
	(*kvrpcpb.CheckLockObserverRequest)(nil),     // 69: kvrpcpb.CheckLockObserverRequest
	(*kvrpcpb.RemoveLockObserverRequest)(nil),    // 70: kvrpcpb.RemoveLockObserverRequest
	(*kvrpcpb.PhysicalScanLockRequest)(nil),      // 71: kvrpcpb.PhysicalScanLockRequest
	(*coprocessor.BatchRequest)(nil),             // 72: coprocessor.BatchRequest
	(*raft_serverpb.SnapshotChunk)(nil),          // 73: raft_serverpb.SnapshotChunk
	(*kvrpcpb.SplitRegionRequest)(nil),           // 74: kvrpcpb.SplitRegionRequest
	(*kvrpcpb.ReadIndexRequest)(nil),             // 75: kvrpcpb.ReadIndexRequest
	(*kvrpcpb.MvccGetByKeyRequest)(nil),          // 76: kvrpcpb.MvccGetByKeyRequest
	(*kvrpcpb.MvccGetByStartTsRequest)(nil),      // 77: kvrpcpb.MvccGetByStartTsRequest
	(*mpp.DispatchTaskRequest)(nil),              // 78: mpp.DispatchTaskRequest
	(*mpp.CancelTaskRequest)(nil),                // 79: mpp.CancelTaskRequest
	(*mpp.EstablishMPPConnectionRequest)(nil),    // 80: mpp.EstablishMPPConnectionRequest
	(*mpp.IsAliveRequest)(nil),                   // 81: mpp.IsAliveRequest
	(*kvrpcpb.CheckLeaderRequest)(nil),           // 82: kvrpcpb.CheckLeaderRequest
	(*kvrpcpb.StoreSafeTSRequest)(nil),           // 83: kvrpcpb.StoreSafeTSRequest
	(*kvrpcpb.GetLockWaitInfoRequest)(nil),       // 84: kvrpcpb.GetLockWaitInfoRequest
	(*kvrpcpb.RawGetKeyTTLResponse)(nil),         // 85: kvrpcpb.RawGetKeyTTLResponse
	(*kvrpcpb.RawCASResponse)(nil),               // 86: kvrpcpb.RawCASResponse
	(*kvrpcpb.RawChecksumResponse)(nil),          // 87: kvrpcpb.RawChecksumResponse
	(*kvrpcpb.UnsafeDestroyRangeResponse)(nil),   // 88: kvrpcpb.UnsafeDestroyRangeResponse
	(*kvrpcpb.RegisterLockObserverResponse)(nil), // 89: kvrpcpb.RegisterLockObserverResponse
	(*kvrpcpb.CheckLockObserverResponse)(nil),    // 90: kvrpcpb.CheckLockObserverResponse
	(*kvrpcpb.RemoveLockObserverResponse)(nil),   // 91: kvrpcpb.RemoveLockObserverResponse
	(*kvrpcpb.PhysicalScanLockResponse)(nil),     // 92: kvrpcpb.PhysicalScanLockResponse
	(*coprocessor.BatchResponse)(nil),            // 93: coprocessor.BatchResponse
	(*raft_serverpb.Done)(nil),                   // 94: raft_serverpb.Done
	(*kvrpcpb.SplitRegionResponse)(nil),          // 95: kvrpcpb.SplitRegionResponse
	(*kvrpcpb.ReadIndexResponse)(nil),            // 96: kvrpcpb.ReadIndexResponse
	(*kvrpcpb.MvccGetByKeyResponse)(nil),         // 97: kvrpcpb.MvccGetByKeyResponse
	(*kvrpcpb.MvccGetByStartTsResponse)(nil),     // 98: kvrpcpb.MvccGetByStartTsResponse
	(*mpp.DispatchTaskResponse)(nil),             // 99: mpp.DispatchTaskResponse
	(*mpp.CancelTaskResponse)(nil),               // 100: mpp.CancelTaskResponse
	(*mpp.MPPDataPacket)(nil),                    // 101: mpp.MPPDataPacket
	(*mpp.IsAliveResponse)(nil),                  // 102: mpp.IsAliveResponse
	(*kvrpcpb.CheckLeaderResponse)(nil),          // 103: kvrpcpb.CheckLeaderResponse
	(*kvrpcpb.StoreSafeTSResponse)(nil),          // 104: kvrpcpb.StoreSafeTSResponse
	(*kvrpcpb.GetLockWaitInfoResponse)(nil),      // 105: kvrpcpb.GetLockWaitInfoResponse
}
var file_tikvpb_proto_depIdxs = []int32{
	5,   // 0: tikvpb.BatchCommandsRequest.requests:type_name -> tikvpb.BatchCommandsRequest.Request
	6,   // 1: tikvpb.BatchCommandsResponse.responses:type_name -> tikvpb.BatchCommandsResponse.Response
	7,   // 2: tikvpb.BatchRaftMessage.msgs:type_name -> raft_serverpb.RaftMessage
	8,   // 3: tikvpb.BatchCommandsRequest.Request.Get:type_name -> kvrpcpb.GetRequest
	9,   // 4: tikvpb.BatchCommandsRequest.Request.Scan:type_name -> kvrpcpb.ScanRequest
	10,  // 5: tikvpb.BatchCommandsRequest.Request.Prewrite:type_name -> kvrpcpb.PrewriteRequest
	11,  // 6: tikvpb.BatchCommandsRequest.Request.Commit:type_name -> kvrpcpb.CommitRequest
	12,  // 7: tikvpb.BatchCommandsRequest.Request.Import:type_name -> kvrpcpb.ImportRequest
	13,  // 8: tikvpb.BatchCommandsRequest.Request.Cleanup:type_name -> kvrpcpb.CleanupRequest
	14,  // 9: tikvpb.BatchCommandsRequest.Request.BatchGet:type_name -> kvrpcpb.BatchGetRequest
	15,  // 10: tikvpb.BatchCommandsRequest.Request.BatchRollback:type_name -> kvrpcpb.BatchRollbackRequest
	16,  // 11: tikvpb.BatchCommandsRequest.Request.ScanLock:type_name -> kvrpcpb.ScanLockRequest
	17,  // 12: tikvpb.BatchCommandsRequest.Request.ResolveLock:type_name -> kvrpcpb.ResolveLockRequest
	18,  // 13: tikvpb.BatchCommandsRequest.Request.GC:type_name -> kvrpcpb.GCRequest
	19,  // 14: tikvpb.BatchCommandsRequest.Request.DeleteRange:type_name -> kvrpcpb.DeleteRangeRequest
	20,  // 15: tikvpb.BatchCommandsRequest.Request.RawGet:type_name -> kvrpcpb.RawGetRequest
	21,  // 16: tikvpb.BatchCommandsRequest.Request.RawBatchGet:type_name -> kvrpcpb.RawBatchGetRequest
	22,  // 17: tikvpb.BatchCommandsRequest.Request.RawPut:type_name -> kvrpcpb.RawPutRequest
	23,  // 18: tikvpb.BatchCommandsRequest.Request.RawBatchPut:type_name -> kvrpcpb.RawBatchPutRequest
	24,  // 19: tikvpb.BatchCommandsRequest.Request.RawDelete:type_name -> kvrpcpb.RawDeleteRequest
	25,  // 20: tikvpb.BatchCommandsRequest.Request.RawBatchDelete:type_name -> kvrpcpb.RawBatchDeleteRequest
	26,  // 21: tikvpb.BatchCommandsRequest.Request.RawScan:type_name -> kvrpcpb.RawScanRequest
	27,  // 22: tikvpb.BatchCommandsRequest.Request.RawDeleteRange:type_name -> kvrpcpb.RawDeleteRangeRequest
	28,  // 23: tikvpb.BatchCommandsRequest.Request.RawBatchScan:type_name -> kvrpcpb.RawBatchScanRequest
	29,  // 24: tikvpb.BatchCommandsRequest.Request.Coprocessor:type_name -> coprocessor.Request
	30,  // 25: tikvpb.BatchCommandsRequest.Request.PessimisticLock:type_name -> kvrpcpb.PessimisticLockRequest
	31,  // 26: tikvpb.BatchCommandsRequest.Request.PessimisticRollback:type_name -> kvrpcpb.PessimisticRollbackRequest
	32,  // 27: tikvpb.BatchCommandsRequest.Request.CheckTxnStatus:type_name -> kvrpcpb.CheckTxnStatusRequest
	33,  // 28: tikvpb.BatchCommandsRequest.Request.TxnHeartBeat:type_name -> kvrpcpb.TxnHeartBeatRequest
	34,  // 29: tikvpb.BatchCommandsRequest.Request.CheckSecondaryLocks:type_name -> kvrpcpb.CheckSecondaryLocksRequest
	35,  // 30: tikvpb.BatchCommandsRequest.Request.RawCoprocessor:type_name -> kvrpcpb.RawCoprocessorRequest
	3,   // 31: tikvpb.BatchCommandsRequest.Request.Empty:type_name -> tikvpb.BatchCommandsEmptyRequest
	36,  // 32: tikvpb.BatchCommandsResponse.Response.Get:type_name -> kvrpcpb.GetResponse
	37,  // 33: tikvpb.BatchCommandsResponse.Response.Scan:type_name -> kvrpcpb.ScanResponse
	38,  // 34: tikvpb.BatchCommandsResponse.Response.Prewrite:type_name -> kvrpcpb.PrewriteResponse
	39,  // 35: tikvpb.BatchCommandsResponse.Response.Commit:type_name -> kvrpcpb.CommitResponse
	40,  // 36: tikvpb.BatchCommandsResponse.Response.Import:type_name -> kvrpcpb.ImportResponse
	41,  // 37: tikvpb.BatchCommandsResponse.Response.Cleanup:type_name -> kvrpcpb.CleanupResponse
	42,  // 38: tikvpb.BatchCommandsResponse.Response.BatchGet:type_name -> kvrpcpb.BatchGetResponse
	43,  // 39: tikvpb.BatchCommandsResponse.Response.BatchRollback:type_name -> kvrpcpb.BatchRollbackResponse
	44,  // 40: tikvpb.BatchCommandsResponse.Response.ScanLock:type_name -> kvrpcpb.ScanLockResponse
	45,  // 41: tikvpb.BatchCommandsResponse.Response.ResolveLock:type_name -> kvrpcpb.ResolveLockResponse
	46,  // 42: tikvpb.BatchCommandsResponse.Response.GC:type_name -> kvrpcpb.GCResponse
	47,  // 43: tikvpb.BatchCommandsResponse.Response.DeleteRange:type_name -> kvrpcpb.DeleteRangeResponse
	48,  // 44: tikvpb.BatchCommandsResponse.Response.RawGet:type_name -> kvrpcpb.RawGetResponse
	49,  // 45: tikvpb.BatchCommandsResponse.Response.RawBatchGet:type_name -> kvrpcpb.RawBatchGetResponse
	50,  // 46: tikvpb.BatchCommandsResponse.Response.RawPut:type_name -> kvrpcpb.RawPutResponse
	51,  // 47: tikvpb.BatchCommandsResponse.Response.RawBatchPut:type_name -> kvrpcpb.RawBatchPutResponse
	52,  // 48: tikvpb.BatchCommandsResponse.Response.RawDelete:type_name -> kvrpcpb.RawDeleteResponse
	53,  // 49: tikvpb.BatchCommandsResponse.Response.RawBatchDelete:type_name -> kvrpcpb.RawBatchDeleteResponse
	54,  // 50: tikvpb.BatchCommandsResponse.Response.RawScan:type_name -> kvrpcpb.RawScanResponse
	55,  // 51: tikvpb.BatchCommandsResponse.Response.RawDeleteRange:type_name -> kvrpcpb.RawDeleteRangeResponse
	56,  // 52: tikvpb.BatchCommandsResponse.Response.RawBatchScan:type_name -> kvrpcpb.RawBatchScanResponse
	57,  // 53: tikvpb.BatchCommandsResponse.Response.Coprocessor:type_name -> coprocessor.Response
	58,  // 54: tikvpb.BatchCommandsResponse.Response.PessimisticLock:type_name -> kvrpcpb.PessimisticLockResponse
	59,  // 55: tikvpb.BatchCommandsResponse.Response.PessimisticRollback:type_name -> kvrpcpb.PessimisticRollbackResponse
	60,  // 56: tikvpb.BatchCommandsResponse.Response.CheckTxnStatus:type_name -> kvrpcpb.CheckTxnStatusResponse
	61,  // 57: tikvpb.BatchCommandsResponse.Response.TxnHeartBeat:type_name -> kvrpcpb.TxnHeartBeatResponse
	62,  // 58: tikvpb.BatchCommandsResponse.Response.CheckSecondaryLocks:type_name -> kvrpcpb.CheckSecondaryLocksResponse
	63,  // 59: tikvpb.BatchCommandsResponse.Response.RawCoprocessor:type_name -> kvrpcpb.RawCoprocessorResponse
	4,   // 60: tikvpb.BatchCommandsResponse.Response.Empty:type_name -> tikvpb.BatchCommandsEmptyResponse
	8,   // 61: tikvpb.Tikv.KvGet:input_type -> kvrpcpb.GetRequest
	9,   // 62: tikvpb.Tikv.KvScan:input_type -> kvrpcpb.ScanRequest
	10,  // 63: tikvpb.Tikv.KvPrewrite:input_type -> kvrpcpb.PrewriteRequest
	30,  // 64: tikvpb.Tikv.KvPessimisticLock:input_type -> kvrpcpb.PessimisticLockRequest
	31,  // 65: tikvpb.Tikv.KVPessimisticRollback:input_type -> kvrpcpb.PessimisticRollbackRequest
	33,  // 66: tikvpb.Tikv.KvTxnHeartBeat:input_type -> kvrpcpb.TxnHeartBeatRequest
	32,  // 67: tikvpb.Tikv.KvCheckTxnStatus:input_type -> kvrpcpb.CheckTxnStatusRequest
	34,  // 68: tikvpb.Tikv.KvCheckSecondaryLocks:input_type -> kvrpcpb.CheckSecondaryLocksRequest
	11,  // 69: tikvpb.Tikv.KvCommit:input_type -> kvrpcpb.CommitRequest
	12,  // 70: tikvpb.Tikv.KvImport:input_type -> kvrpcpb.ImportRequest
	13,  // 71: tikvpb.Tikv.KvCleanup:input_type -> kvrpcpb.CleanupRequest
	14,  // 72: tikvpb.Tikv.KvBatchGet:input_type -> kvrpcpb.BatchGetRequest
	15,  // 73: tikvpb.Tikv.KvBatchRollback:input_type -> kvrpcpb.BatchRollbackRequest
	16,  // 74: tikvpb.Tikv.KvScanLock:input_type -> kvrpcpb.ScanLockRequest
	17,  // 75: tikvpb.Tikv.KvResolveLock:input_type -> kvrpcpb.ResolveLockRequest
	18,  // 76: tikvpb.Tikv.KvGC:input_type -> kvrpcpb.GCRequest
	19,  // 77: tikvpb.Tikv.KvDeleteRange:input_type -> kvrpcpb.DeleteRangeRequest
	20,  // 78: tikvpb.Tikv.RawGet:input_type -> kvrpcpb.RawGetRequest
	21,  // 79: tikvpb.Tikv.RawBatchGet:input_type -> kvrpcpb.RawBatchGetRequest
	22,  // 80: tikvpb.Tikv.RawPut:input_type -> kvrpcpb.RawPutRequest
	23,  // 81: tikvpb.Tikv.RawBatchPut:input_type -> kvrpcpb.RawBatchPutRequest
	24,  // 82: tikvpb.Tikv.RawDelete:input_type -> kvrpcpb.RawDeleteRequest
	25,  // 83: tikvpb.Tikv.RawBatchDelete:input_type -> kvrpcpb.RawBatchDeleteRequest
	26,  // 84: tikvpb.Tikv.RawScan:input_type -> kvrpcpb.RawScanRequest
	27,  // 85: tikvpb.Tikv.RawDeleteRange:input_type -> kvrpcpb.RawDeleteRangeRequest
	28,  // 86: tikvpb.Tikv.RawBatchScan:input_type -> kvrpcpb.RawBatchScanRequest
	64,  // 87: tikvpb.Tikv.RawGetKeyTTL:input_type -> kvrpcpb.RawGetKeyTTLRequest
	65,  // 88: tikvpb.Tikv.RawCompareAndSwap:input_type -> kvrpcpb.RawCASRequest
	66,  // 89: tikvpb.Tikv.RawChecksum:input_type -> kvrpcpb.RawChecksumRequest
	67,  // 90: tikvpb.Tikv.UnsafeDestroyRange:input_type -> kvrpcpb.UnsafeDestroyRangeRequest
	68,  // 91: tikvpb.Tikv.RegisterLockObserver:input_type -> kvrpcpb.RegisterLockObserverRequest
	69,  // 92: tikvpb.Tikv.CheckLockObserver:input_type -> kvrpcpb.CheckLockObserverRequest
	70,  // 93: tikvpb.Tikv.RemoveLockObserver:input_type -> kvrpcpb.RemoveLockObserverRequest
	71,  // 94: tikvpb.Tikv.PhysicalScanLock:input_type -> kvrpcpb.PhysicalScanLockRequest
	29,  // 95: tikvpb.Tikv.Coprocessor:input_type -> coprocessor.Request
	29,  // 96: tikvpb.Tikv.CoprocessorStream:input_type -> coprocessor.Request
	72,  // 97: tikvpb.Tikv.BatchCoprocessor:input_type -> coprocessor.BatchRequest
	35,  // 98: tikvpb.Tikv.RawCoprocessor:input_type -> kvrpcpb.RawCoprocessorRequest
	7,   // 99: tikvpb.Tikv.Raft:input_type -> raft_serverpb.RaftMessage
	2,   // 100: tikvpb.Tikv.BatchRaft:input_type -> tikvpb.BatchRaftMessage
	73,  // 101: tikvpb.Tikv.Snapshot:input_type -> raft_serverpb.SnapshotChunk
	74,  // 102: tikvpb.Tikv.SplitRegion:input_type -> kvrpcpb.SplitRegionRequest
	75,  // 103: tikvpb.Tikv.ReadIndex:input_type -> kvrpcpb.ReadIndexRequest
	76,  // 104: tikvpb.Tikv.MvccGetByKey:input_type -> kvrpcpb.MvccGetByKeyRequest
	77,  // 105: tikvpb.Tikv.MvccGetByStartTs:input_type -> kvrpcpb.MvccGetByStartTsRequest
	0,   // 106: tikvpb.Tikv.BatchCommands:input_type -> tikvpb.BatchCommandsRequest
	78,  // 107: tikvpb.Tikv.DispatchMPPTask:input_type -> mpp.DispatchTaskRequest
	79,  // 108: tikvpb.Tikv.CancelMPPTask:input_type -> mpp.CancelTaskRequest
	80,  // 109: tikvpb.Tikv.EstablishMPPConnection:input_type -> mpp.EstablishMPPConnectionRequest
	81,  // 110: tikvpb.Tikv.IsAlive:input_type -> mpp.IsAliveRequest
	82,  // 111: tikvpb.Tikv.CheckLeader:input_type -> kvrpcpb.CheckLeaderRequest
	83,  // 112: tikvpb.Tikv.GetStoreSafeTS:input_type -> kvrpcpb.StoreSafeTSRequest
	84,  // 113: tikvpb.Tikv.GetLockWaitInfo:input_type -> kvrpcpb.GetLockWaitInfoRequest
	36,  // 114: tikvpb.Tikv.KvGet:output_type -> kvrpcpb.GetResponse
	37,  // 115: tikvpb.Tikv.KvScan:output_type -> kvrpcpb.ScanResponse
	38,  // 116: tikvpb.Tikv.KvPrewrite:output_type -> kvrpcpb.PrewriteResponse
	58,  // 117: tikvpb.Tikv.KvPessimisticLock:output_type -> kvrpcpb.PessimisticLockResponse
	59,  // 118: tikvpb.Tikv.KVPessimisticRollback:output_type -> kvrpcpb.PessimisticRollbackResponse
	61,  // 119: tikvpb.Tikv.KvTxnHeartBeat:output_type -> kvrpcpb.TxnHeartBeatResponse
	60,  // 120: tikvpb.Tikv.KvCheckTxnStatus:output_type -> kvrpcpb.CheckTxnStatusResponse
	62,  // 121: tikvpb.Tikv.KvCheckSecondaryLocks:output_type -> kvrpcpb.CheckSecondaryLocksResponse
	39,  // 122: tikvpb.Tikv.KvCommit:output_type -> kvrpcpb.CommitResponse
	40,  // 123: tikvpb.Tikv.KvImport:output_type -> kvrpcpb.ImportResponse
	41,  // 124: tikvpb.Tikv.KvCleanup:output_type -> kvrpcpb.CleanupResponse
	42,  // 125: tikvpb.Tikv.KvBatchGet:output_type -> kvrpcpb.BatchGetResponse
	43,  // 126: tikvpb.Tikv.KvBatchRollback:output_type -> kvrpcpb.BatchRollbackResponse
	44,  // 127: tikvpb.Tikv.KvScanLock:output_type -> kvrpcpb.ScanLockResponse
	45,  // 128: tikvpb.Tikv.KvResolveLock:output_type -> kvrpcpb.ResolveLockResponse
	46,  // 129: tikvpb.Tikv.KvGC:output_type -> kvrpcpb.GCResponse
	47,  // 130: tikvpb.Tikv.KvDeleteRange:output_type -> kvrpcpb.DeleteRangeResponse
	48,  // 131: tikvpb.Tikv.RawGet:output_type -> kvrpcpb.RawGetResponse
	49,  // 132: tikvpb.Tikv.RawBatchGet:output_type -> kvrpcpb.RawBatchGetResponse
	50,  // 133: tikvpb.Tikv.RawPut:output_type -> kvrpcpb.RawPutResponse
	51,  // 134: tikvpb.Tikv.RawBatchPut:output_type -> kvrpcpb.RawBatchPutResponse
	52,  // 135: tikvpb.Tikv.RawDelete:output_type -> kvrpcpb.RawDeleteResponse
	53,  // 136: tikvpb.Tikv.RawBatchDelete:output_type -> kvrpcpb.RawBatchDeleteResponse
	54,  // 137: tikvpb.Tikv.RawScan:output_type -> kvrpcpb.RawScanResponse
	55,  // 138: tikvpb.Tikv.RawDeleteRange:output_type -> kvrpcpb.RawDeleteRangeResponse
	56,  // 139: tikvpb.Tikv.RawBatchScan:output_type -> kvrpcpb.RawBatchScanResponse
	85,  // 140: tikvpb.Tikv.RawGetKeyTTL:output_type -> kvrpcpb.RawGetKeyTTLResponse
	86,  // 141: tikvpb.Tikv.RawCompareAndSwap:output_type -> kvrpcpb.RawCASResponse
	87,  // 142: tikvpb.Tikv.RawChecksum:output_type -> kvrpcpb.RawChecksumResponse
	88,  // 143: tikvpb.Tikv.UnsafeDestroyRange:output_type -> kvrpcpb.UnsafeDestroyRangeResponse
	89,  // 144: tikvpb.Tikv.RegisterLockObserver:output_type -> kvrpcpb.RegisterLockObserverResponse
	90,  // 145: tikvpb.Tikv.CheckLockObserver:output_type -> kvrpcpb.CheckLockObserverResponse
	91,  // 146: tikvpb.Tikv.RemoveLockObserver:output_type -> kvrpcpb.RemoveLockObserverResponse
	92,  // 147: tikvpb.Tikv.PhysicalScanLock:output_type -> kvrpcpb.PhysicalScanLockResponse
	57,  // 148: tikvpb.Tikv.Coprocessor:output_type -> coprocessor.Response
	57,  // 149: tikvpb.Tikv.CoprocessorStream:output_type -> coprocessor.Response
	93,  // 150: tikvpb.Tikv.BatchCoprocessor:output_type -> coprocessor.BatchResponse
	63,  // 151: tikvpb.Tikv.RawCoprocessor:output_type -> kvrpcpb.RawCoprocessorResponse
	94,  // 152: tikvpb.Tikv.Raft:output_type -> raft_serverpb.Done
	94,  // 153: tikvpb.Tikv.BatchRaft:output_type -> raft_serverpb.Done
	94,  // 154: tikvpb.Tikv.Snapshot:output_type -> raft_serverpb.Done
	95,  // 155: tikvpb.Tikv.SplitRegion:output_type -> kvrpcpb.SplitRegionResponse
	96,  // 156: tikvpb.Tikv.ReadIndex:output_type -> kvrpcpb.ReadIndexResponse
	97,  // 157: tikvpb.Tikv.MvccGetByKey:output_type -> kvrpcpb.MvccGetByKeyResponse
	98,  // 158: tikvpb.Tikv.MvccGetByStartTs:output_type -> kvrpcpb.MvccGetByStartTsResponse
	1,   // 159: tikvpb.Tikv.BatchCommands:output_type -> tikvpb.BatchCommandsResponse
	99,  // 160: tikvpb.Tikv.DispatchMPPTask:output_type -> mpp.DispatchTaskResponse
	100, // 161: tikvpb.Tikv.CancelMPPTask:output_type -> mpp.CancelTaskResponse
	101, // 162: tikvpb.Tikv.EstablishMPPConnection:output_type -> mpp.MPPDataPacket
	102, // 163: tikvpb.Tikv.IsAlive:output_type -> mpp.IsAliveResponse
	103, // 164: tikvpb.Tikv.CheckLeader:output_type -> kvrpcpb.CheckLeaderResponse
	104, // 165: tikvpb.Tikv.GetStoreSafeTS:output_type -> kvrpcpb.StoreSafeTSResponse
	105, // 166: tikvpb.Tikv.GetLockWaitInfo:output_type -> kvrpcpb.GetLockWaitInfoResponse
	114, // [114:167] is the sub-list for method output_type
	61,  // [61:114] is the sub-list for method input_type
	61,  // [61:61] is the sub-list for extension type_name
	61,  // [61:61] is the sub-list for extension extendee
	0,   // [0:61] is the sub-list for field type_name
}

// func init() { file_tikvpb_proto_init() }
func file_tikvpb_proto_init() {
	if File_tikvpb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tikvpb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCommandsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCommandsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchRaftMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCommandsEmptyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCommandsEmptyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCommandsRequest_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tikvpb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCommandsResponse_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tikvpb_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*BatchCommandsRequest_Request_Get)(nil),
		(*BatchCommandsRequest_Request_Scan)(nil),
		(*BatchCommandsRequest_Request_Prewrite)(nil),
		(*BatchCommandsRequest_Request_Commit)(nil),
		(*BatchCommandsRequest_Request_Import)(nil),
		(*BatchCommandsRequest_Request_Cleanup)(nil),
		(*BatchCommandsRequest_Request_BatchGet)(nil),
		(*BatchCommandsRequest_Request_BatchRollback)(nil),
		(*BatchCommandsRequest_Request_ScanLock)(nil),
		(*BatchCommandsRequest_Request_ResolveLock)(nil),
		(*BatchCommandsRequest_Request_GC)(nil),
		(*BatchCommandsRequest_Request_DeleteRange)(nil),
		(*BatchCommandsRequest_Request_RawGet)(nil),
		(*BatchCommandsRequest_Request_RawBatchGet)(nil),
		(*BatchCommandsRequest_Request_RawPut)(nil),
		(*BatchCommandsRequest_Request_RawBatchPut)(nil),
		(*BatchCommandsRequest_Request_RawDelete)(nil),
		(*BatchCommandsRequest_Request_RawBatchDelete)(nil),
		(*BatchCommandsRequest_Request_RawScan)(nil),
		(*BatchCommandsRequest_Request_RawDeleteRange)(nil),
		(*BatchCommandsRequest_Request_RawBatchScan)(nil),
		(*BatchCommandsRequest_Request_Coprocessor)(nil),
		(*BatchCommandsRequest_Request_PessimisticLock)(nil),
		(*BatchCommandsRequest_Request_PessimisticRollback)(nil),
		(*BatchCommandsRequest_Request_CheckTxnStatus)(nil),
		(*BatchCommandsRequest_Request_TxnHeartBeat)(nil),
		(*BatchCommandsRequest_Request_CheckSecondaryLocks)(nil),
		(*BatchCommandsRequest_Request_RawCoprocessor)(nil),
		(*BatchCommandsRequest_Request_Empty)(nil),
	}
	file_tikvpb_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*BatchCommandsResponse_Response_Get)(nil),
		(*BatchCommandsResponse_Response_Scan)(nil),
		(*BatchCommandsResponse_Response_Prewrite)(nil),
		(*BatchCommandsResponse_Response_Commit)(nil),
		(*BatchCommandsResponse_Response_Import)(nil),
		(*BatchCommandsResponse_Response_Cleanup)(nil),
		(*BatchCommandsResponse_Response_BatchGet)(nil),
		(*BatchCommandsResponse_Response_BatchRollback)(nil),
		(*BatchCommandsResponse_Response_ScanLock)(nil),
		(*BatchCommandsResponse_Response_ResolveLock)(nil),
		(*BatchCommandsResponse_Response_GC)(nil),
		(*BatchCommandsResponse_Response_DeleteRange)(nil),
		(*BatchCommandsResponse_Response_RawGet)(nil),
		(*BatchCommandsResponse_Response_RawBatchGet)(nil),
		(*BatchCommandsResponse_Response_RawPut)(nil),
		(*BatchCommandsResponse_Response_RawBatchPut)(nil),
		(*BatchCommandsResponse_Response_RawDelete)(nil),
		(*BatchCommandsResponse_Response_RawBatchDelete)(nil),
		(*BatchCommandsResponse_Response_RawScan)(nil),
		(*BatchCommandsResponse_Response_RawDeleteRange)(nil),
		(*BatchCommandsResponse_Response_RawBatchScan)(nil),
		(*BatchCommandsResponse_Response_Coprocessor)(nil),
		(*BatchCommandsResponse_Response_PessimisticLock)(nil),
		(*BatchCommandsResponse_Response_PessimisticRollback)(nil),
		(*BatchCommandsResponse_Response_CheckTxnStatus)(nil),
		(*BatchCommandsResponse_Response_TxnHeartBeat)(nil),
		(*BatchCommandsResponse_Response_CheckSecondaryLocks)(nil),
		(*BatchCommandsResponse_Response_RawCoprocessor)(nil),
		(*BatchCommandsResponse_Response_Empty)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tikvpb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tikvpb_proto_goTypes,
		DependencyIndexes: file_tikvpb_proto_depIdxs,
		MessageInfos:      file_tikvpb_proto_msgTypes,
	}.Build()
	File_tikvpb_proto = out.File
	file_tikvpb_proto_rawDesc = nil
	file_tikvpb_proto_goTypes = nil
	file_tikvpb_proto_depIdxs = nil
}

var _ context.Context

// Code generated by Kitex v0.1.2. DO NOT EDIT.

type Tikv interface {
	KvGet(ctx context.Context, req *kvrpcpb.GetRequest) (res *kvrpcpb.GetResponse, err error)
	KvScan(ctx context.Context, req *kvrpcpb.ScanRequest) (res *kvrpcpb.ScanResponse, err error)
	KvPrewrite(ctx context.Context, req *kvrpcpb.PrewriteRequest) (res *kvrpcpb.PrewriteResponse, err error)
	KvPessimisticLock(ctx context.Context, req *kvrpcpb.PessimisticLockRequest) (res *kvrpcpb.PessimisticLockResponse, err error)
	KVPessimisticRollback(ctx context.Context, req *kvrpcpb.PessimisticRollbackRequest) (res *kvrpcpb.PessimisticRollbackResponse, err error)
	KvTxnHeartBeat(ctx context.Context, req *kvrpcpb.TxnHeartBeatRequest) (res *kvrpcpb.TxnHeartBeatResponse, err error)
	KvCheckTxnStatus(ctx context.Context, req *kvrpcpb.CheckTxnStatusRequest) (res *kvrpcpb.CheckTxnStatusResponse, err error)
	KvCheckSecondaryLocks(ctx context.Context, req *kvrpcpb.CheckSecondaryLocksRequest) (res *kvrpcpb.CheckSecondaryLocksResponse, err error)
	KvCommit(ctx context.Context, req *kvrpcpb.CommitRequest) (res *kvrpcpb.CommitResponse, err error)
	KvImport(ctx context.Context, req *kvrpcpb.ImportRequest) (res *kvrpcpb.ImportResponse, err error)
	KvCleanup(ctx context.Context, req *kvrpcpb.CleanupRequest) (res *kvrpcpb.CleanupResponse, err error)
	KvBatchGet(ctx context.Context, req *kvrpcpb.BatchGetRequest) (res *kvrpcpb.BatchGetResponse, err error)
	KvBatchRollback(ctx context.Context, req *kvrpcpb.BatchRollbackRequest) (res *kvrpcpb.BatchRollbackResponse, err error)
	KvScanLock(ctx context.Context, req *kvrpcpb.ScanLockRequest) (res *kvrpcpb.ScanLockResponse, err error)
	KvResolveLock(ctx context.Context, req *kvrpcpb.ResolveLockRequest) (res *kvrpcpb.ResolveLockResponse, err error)
	KvGC(ctx context.Context, req *kvrpcpb.GCRequest) (res *kvrpcpb.GCResponse, err error)
	KvDeleteRange(ctx context.Context, req *kvrpcpb.DeleteRangeRequest) (res *kvrpcpb.DeleteRangeResponse, err error)
	RawGet(ctx context.Context, req *kvrpcpb.RawGetRequest) (res *kvrpcpb.RawGetResponse, err error)
	RawBatchGet(ctx context.Context, req *kvrpcpb.RawBatchGetRequest) (res *kvrpcpb.RawBatchGetResponse, err error)
	RawPut(ctx context.Context, req *kvrpcpb.RawPutRequest) (res *kvrpcpb.RawPutResponse, err error)
	RawBatchPut(ctx context.Context, req *kvrpcpb.RawBatchPutRequest) (res *kvrpcpb.RawBatchPutResponse, err error)
	RawDelete(ctx context.Context, req *kvrpcpb.RawDeleteRequest) (res *kvrpcpb.RawDeleteResponse, err error)
	RawBatchDelete(ctx context.Context, req *kvrpcpb.RawBatchDeleteRequest) (res *kvrpcpb.RawBatchDeleteResponse, err error)
	RawScan(ctx context.Context, req *kvrpcpb.RawScanRequest) (res *kvrpcpb.RawScanResponse, err error)
	RawDeleteRange(ctx context.Context, req *kvrpcpb.RawDeleteRangeRequest) (res *kvrpcpb.RawDeleteRangeResponse, err error)
	RawBatchScan(ctx context.Context, req *kvrpcpb.RawBatchScanRequest) (res *kvrpcpb.RawBatchScanResponse, err error)
	RawGetKeyTTL(ctx context.Context, req *kvrpcpb.RawGetKeyTTLRequest) (res *kvrpcpb.RawGetKeyTTLResponse, err error)
	RawCompareAndSwap(ctx context.Context, req *kvrpcpb.RawCASRequest) (res *kvrpcpb.RawCASResponse, err error)
	RawChecksum(ctx context.Context, req *kvrpcpb.RawChecksumRequest) (res *kvrpcpb.RawChecksumResponse, err error)
	UnsafeDestroyRange(ctx context.Context, req *kvrpcpb.UnsafeDestroyRangeRequest) (res *kvrpcpb.UnsafeDestroyRangeResponse, err error)
	RegisterLockObserver(ctx context.Context, req *kvrpcpb.RegisterLockObserverRequest) (res *kvrpcpb.RegisterLockObserverResponse, err error)
	CheckLockObserver(ctx context.Context, req *kvrpcpb.CheckLockObserverRequest) (res *kvrpcpb.CheckLockObserverResponse, err error)
	RemoveLockObserver(ctx context.Context, req *kvrpcpb.RemoveLockObserverRequest) (res *kvrpcpb.RemoveLockObserverResponse, err error)
	PhysicalScanLock(ctx context.Context, req *kvrpcpb.PhysicalScanLockRequest) (res *kvrpcpb.PhysicalScanLockResponse, err error)
	Coprocessor(ctx context.Context, req *coprocessor.Request) (res *coprocessor.Response, err error)
	CoprocessorStream(req *coprocessor.Request, stream Tikv_CoprocessorStreamServer) (err error)
	BatchCoprocessor(req *coprocessor.BatchRequest, stream Tikv_BatchCoprocessorServer) (err error)
	RawCoprocessor(ctx context.Context, req *kvrpcpb.RawCoprocessorRequest) (res *kvrpcpb.RawCoprocessorResponse, err error)
	Raft(stream Tikv_RaftServer) (err error)
	BatchRaft(stream Tikv_BatchRaftServer) (err error)
	Snapshot(stream Tikv_SnapshotServer) (err error)
	SplitRegion(ctx context.Context, req *kvrpcpb.SplitRegionRequest) (res *kvrpcpb.SplitRegionResponse, err error)
	ReadIndex(ctx context.Context, req *kvrpcpb.ReadIndexRequest) (res *kvrpcpb.ReadIndexResponse, err error)
	MvccGetByKey(ctx context.Context, req *kvrpcpb.MvccGetByKeyRequest) (res *kvrpcpb.MvccGetByKeyResponse, err error)
	MvccGetByStartTs(ctx context.Context, req *kvrpcpb.MvccGetByStartTsRequest) (res *kvrpcpb.MvccGetByStartTsResponse, err error)
	BatchCommands(stream Tikv_BatchCommandsServer) (err error)
	DispatchMPPTask(ctx context.Context, req *mpp.DispatchTaskRequest) (res *mpp.DispatchTaskResponse, err error)
	CancelMPPTask(ctx context.Context, req *mpp.CancelTaskRequest) (res *mpp.CancelTaskResponse, err error)
	EstablishMPPConnection(req *mpp.EstablishMPPConnectionRequest, stream Tikv_EstablishMPPConnectionServer) (err error)
	IsAlive(ctx context.Context, req *mpp.IsAliveRequest) (res *mpp.IsAliveResponse, err error)
	CheckLeader(ctx context.Context, req *kvrpcpb.CheckLeaderRequest) (res *kvrpcpb.CheckLeaderResponse, err error)
	GetStoreSafeTS(ctx context.Context, req *kvrpcpb.StoreSafeTSRequest) (res *kvrpcpb.StoreSafeTSResponse, err error)
	GetLockWaitInfo(ctx context.Context, req *kvrpcpb.GetLockWaitInfoRequest) (res *kvrpcpb.GetLockWaitInfoResponse, err error)
}

type Tikv_CoprocessorStreamServer interface {
	streaming.Stream
	Send(*coprocessor.Response) error
}

type Tikv_BatchCoprocessorServer interface {
	streaming.Stream
	Send(*coprocessor.BatchResponse) error
}

type Tikv_RaftServer interface {
	streaming.Stream
	Recv() (*raft_serverpb.RaftMessage, error)
	SendAndClose(*raft_serverpb.Done) error
}

type Tikv_BatchRaftServer interface {
	streaming.Stream
	Recv() (*BatchRaftMessage, error)
	SendAndClose(*raft_serverpb.Done) error
}

type Tikv_SnapshotServer interface {
	streaming.Stream
	Recv() (*raft_serverpb.SnapshotChunk, error)
	SendAndClose(*raft_serverpb.Done) error
}

type Tikv_BatchCommandsServer interface {
	streaming.Stream
	Recv() (*BatchCommandsRequest, error)
	Send(*BatchCommandsResponse) error
}

type Tikv_EstablishMPPConnectionServer interface {
	streaming.Stream
	Send(*mpp.MPPDataPacket) error
}
