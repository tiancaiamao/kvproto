// Code generated by Kitex v0.1.3. DO NOT EDIT.

package diagnostics

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"github.com/pingcap/kvproto/proto/kitex_gen/diagnosticspb"
	"google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return diagnosticsServiceInfo
}

var diagnosticsServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Diagnostics"
	handlerType := (*diagnosticspb.Diagnostics)(nil)
	methods := map[string]kitex.MethodInfo{
		"search_log":  kitex.NewMethodInfo(searchLogHandler, newSearchLogArgs, newSearchLogResult, false),
		"server_info": kitex.NewMethodInfo(serverInfoHandler, newServerInfoArgs, newServerInfoResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "diagnosticspb",
	}
	extra["streaming"] = true
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.1.3",
		Extra:           extra,
	}
	return svcInfo
}

func searchLogHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st := arg.(*streaming.Args).Stream
	stream := &diagnosticssearch_logServer{st}
	req := new(diagnosticspb.SearchLogRequest)
	if err := st.RecvMsg(req); err != nil {
		return err
	}
	return handler.(diagnosticspb.Diagnostics).SearchLog(req, stream)
}

type diagnosticssearch_logClient struct {
	streaming.Stream
}

func (x *diagnosticssearch_logClient) Recv() (*diagnosticspb.SearchLogResponse, error) {
	m := new(diagnosticspb.SearchLogResponse)
	return m, x.Stream.RecvMsg(m)
}

type diagnosticssearch_logServer struct {
	streaming.Stream
}

func (x *diagnosticssearch_logServer) Send(m *diagnosticspb.SearchLogResponse) error {
	return x.Stream.SendMsg(m)
}

func newSearchLogArgs() interface{} {
	return &SearchLogArgs{}
}

func newSearchLogResult() interface{} {
	return &SearchLogResult{}
}

type SearchLogArgs struct {
	Req *diagnosticspb.SearchLogRequest
}

func (p *SearchLogArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in SearchLogArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *SearchLogArgs) Unmarshal(in []byte) error {
	msg := new(diagnosticspb.SearchLogRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SearchLogArgs_Req_DEFAULT *diagnosticspb.SearchLogRequest

func (p *SearchLogArgs) GetReq() *diagnosticspb.SearchLogRequest {
	if !p.IsSetReq() {
		return SearchLogArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SearchLogArgs) IsSetReq() bool {
	return p.Req != nil
}

type SearchLogResult struct {
	Success *diagnosticspb.SearchLogResponse
}

var SearchLogResult_Success_DEFAULT *diagnosticspb.SearchLogResponse

func (p *SearchLogResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in SearchLogResult")
	}
	return proto.Marshal(p.Success)
}

func (p *SearchLogResult) Unmarshal(in []byte) error {
	msg := new(diagnosticspb.SearchLogResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SearchLogResult) GetSuccess() *diagnosticspb.SearchLogResponse {
	if !p.IsSetSuccess() {
		return SearchLogResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SearchLogResult) SetSuccess(x interface{}) {
	p.Success = x.(*diagnosticspb.SearchLogResponse)
}

func (p *SearchLogResult) IsSetSuccess() bool {
	return p.Success != nil
}

func serverInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(diagnosticspb.ServerInfoRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(diagnosticspb.Diagnostics).ServerInfo(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ServerInfoArgs:
		success, err := handler.(diagnosticspb.Diagnostics).ServerInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ServerInfoResult)
		realResult.Success = success
	}
	return nil
}
func newServerInfoArgs() interface{} {
	return &ServerInfoArgs{}
}

func newServerInfoResult() interface{} {
	return &ServerInfoResult{}
}

type ServerInfoArgs struct {
	Req *diagnosticspb.ServerInfoRequest
}

func (p *ServerInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ServerInfoArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ServerInfoArgs) Unmarshal(in []byte) error {
	msg := new(diagnosticspb.ServerInfoRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ServerInfoArgs_Req_DEFAULT *diagnosticspb.ServerInfoRequest

func (p *ServerInfoArgs) GetReq() *diagnosticspb.ServerInfoRequest {
	if !p.IsSetReq() {
		return ServerInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ServerInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

type ServerInfoResult struct {
	Success *diagnosticspb.ServerInfoResponse
}

var ServerInfoResult_Success_DEFAULT *diagnosticspb.ServerInfoResponse

func (p *ServerInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ServerInfoResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ServerInfoResult) Unmarshal(in []byte) error {
	msg := new(diagnosticspb.ServerInfoResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ServerInfoResult) GetSuccess() *diagnosticspb.ServerInfoResponse {
	if !p.IsSetSuccess() {
		return ServerInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ServerInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*diagnosticspb.ServerInfoResponse)
}

func (p *ServerInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SearchLog(ctx context.Context, req *diagnosticspb.SearchLogRequest) (Diagnostics_search_logClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "search_log", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &diagnosticssearch_logClient{res.Stream}
	if err := stream.Stream.SendMsg(req); err != nil {
		return nil, err
	}
	if err := stream.Stream.Close(); err != nil {
		return nil, err
	}
	return stream, nil
}

func (p *kClient) ServerInfo(ctx context.Context, Req *diagnosticspb.ServerInfoRequest) (r *diagnosticspb.ServerInfoResponse, err error) {
	var _args ServerInfoArgs
	_args.Req = Req
	var _result ServerInfoResult
	if err = p.c.Call(ctx, "server_info", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
