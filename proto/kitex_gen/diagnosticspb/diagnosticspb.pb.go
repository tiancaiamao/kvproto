// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.8.0
// source: diagnosticspb.proto

package diagnosticspb

import (
	context "context"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	_ "github.com/pingcap/kvproto/proto/kitex_gen/github.com/gogo/protobuf/gogoproto"
	_ "github.com/pingcap/kvproto/proto/kitex_gen/rustproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogLevel int32

const (
	LogLevel_UNKNOWN  LogLevel = 0
	LogLevel_Debug    LogLevel = 1
	LogLevel_Info     LogLevel = 2
	LogLevel_Warn     LogLevel = 3
	LogLevel_Trace    LogLevel = 4
	LogLevel_Critical LogLevel = 5
	LogLevel_Error    LogLevel = 6
)

// Enum value maps for LogLevel.
var (
	LogLevel_name = map[int32]string{
		0: "UNKNOWN",
		1: "Debug",
		2: "Info",
		3: "Warn",
		4: "Trace",
		5: "Critical",
		6: "Error",
	}
	LogLevel_value = map[string]int32{
		"UNKNOWN":  0,
		"Debug":    1,
		"Info":     2,
		"Warn":     3,
		"Trace":    4,
		"Critical": 5,
		"Error":    6,
	}
)

func (x LogLevel) Enum() *LogLevel {
	p := new(LogLevel)
	*p = x
	return p
}

func (x LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_diagnosticspb_proto_enumTypes[0].Descriptor()
}

func (LogLevel) Type() protoreflect.EnumType {
	return &file_diagnosticspb_proto_enumTypes[0]
}

func (x LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogLevel.Descriptor instead.
func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_diagnosticspb_proto_rawDescGZIP(), []int{0}
}

type ServerInfoType int32

const (
	ServerInfoType_All          ServerInfoType = 0
	ServerInfoType_HardwareInfo ServerInfoType = 1
	ServerInfoType_SystemInfo   ServerInfoType = 2
	ServerInfoType_LoadInfo     ServerInfoType = 3
)

// Enum value maps for ServerInfoType.
var (
	ServerInfoType_name = map[int32]string{
		0: "All",
		1: "HardwareInfo",
		2: "SystemInfo",
		3: "LoadInfo",
	}
	ServerInfoType_value = map[string]int32{
		"All":          0,
		"HardwareInfo": 1,
		"SystemInfo":   2,
		"LoadInfo":     3,
	}
)

func (x ServerInfoType) Enum() *ServerInfoType {
	p := new(ServerInfoType)
	*p = x
	return p
}

func (x ServerInfoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerInfoType) Descriptor() protoreflect.EnumDescriptor {
	return file_diagnosticspb_proto_enumTypes[1].Descriptor()
}

func (ServerInfoType) Type() protoreflect.EnumType {
	return &file_diagnosticspb_proto_enumTypes[1]
}

func (x ServerInfoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServerInfoType.Descriptor instead.
func (ServerInfoType) EnumDescriptor() ([]byte, []int) {
	return file_diagnosticspb_proto_rawDescGZIP(), []int{1}
}

type SearchLogRequest_Target int32

const (
	SearchLogRequest_Normal SearchLogRequest_Target = 0
	SearchLogRequest_Slow   SearchLogRequest_Target = 1
)

// Enum value maps for SearchLogRequest_Target.
var (
	SearchLogRequest_Target_name = map[int32]string{
		0: "Normal",
		1: "Slow",
	}
	SearchLogRequest_Target_value = map[string]int32{
		"Normal": 0,
		"Slow":   1,
	}
)

func (x SearchLogRequest_Target) Enum() *SearchLogRequest_Target {
	p := new(SearchLogRequest_Target)
	*p = x
	return p
}

func (x SearchLogRequest_Target) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchLogRequest_Target) Descriptor() protoreflect.EnumDescriptor {
	return file_diagnosticspb_proto_enumTypes[2].Descriptor()
}

func (SearchLogRequest_Target) Type() protoreflect.EnumType {
	return &file_diagnosticspb_proto_enumTypes[2]
}

func (x SearchLogRequest_Target) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchLogRequest_Target.Descriptor instead.
func (SearchLogRequest_Target) EnumDescriptor() ([]byte, []int) {
	return file_diagnosticspb_proto_rawDescGZIP(), []int{0, 0}
}

type SearchLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime int64      `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   int64      `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Levels    []LogLevel `protobuf:"varint,3,rep,packed,name=levels,proto3,enum=diagnosticspb.LogLevel" json:"levels,omitempty"`
	// We use a string array to represent multiple CNF pattern sceniaor like:
	// SELECT * FROM t WHERE c LIKE '%s%' and c REGEXP '.*a.*' because
	// Golang and Rust don't support perl-like (?=re1)(?=re2)
	Patterns []string                `protobuf:"bytes,4,rep,name=patterns,proto3" json:"patterns,omitempty"`
	Target   SearchLogRequest_Target `protobuf:"varint,5,opt,name=target,proto3,enum=diagnosticspb.SearchLogRequest_Target" json:"target,omitempty"`
}

func (x *SearchLogRequest) Reset() {
	*x = SearchLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosticspb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchLogRequest) ProtoMessage() {}

func (x *SearchLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosticspb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchLogRequest.ProtoReflect.Descriptor instead.
func (*SearchLogRequest) Descriptor() ([]byte, []int) {
	return file_diagnosticspb_proto_rawDescGZIP(), []int{0}
}

func (x *SearchLogRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SearchLogRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SearchLogRequest) GetLevels() []LogLevel {
	if x != nil {
		return x.Levels
	}
	return nil
}

func (x *SearchLogRequest) GetPatterns() []string {
	if x != nil {
		return x.Patterns
	}
	return nil
}

func (x *SearchLogRequest) GetTarget() SearchLogRequest_Target {
	if x != nil {
		return x.Target
	}
	return SearchLogRequest_Normal
}

type SearchLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*LogMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *SearchLogResponse) Reset() {
	*x = SearchLogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosticspb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchLogResponse) ProtoMessage() {}

func (x *SearchLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosticspb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchLogResponse.ProtoReflect.Descriptor instead.
func (*SearchLogResponse) Descriptor() ([]byte, []int) {
	return file_diagnosticspb_proto_rawDescGZIP(), []int{1}
}

func (x *SearchLogResponse) GetMessages() []*LogMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

type LogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time    int64    `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Level   LogLevel `protobuf:"varint,2,opt,name=level,proto3,enum=diagnosticspb.LogLevel" json:"level,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LogMessage) Reset() {
	*x = LogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosticspb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogMessage) ProtoMessage() {}

func (x *LogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosticspb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogMessage.ProtoReflect.Descriptor instead.
func (*LogMessage) Descriptor() ([]byte, []int) {
	return file_diagnosticspb_proto_rawDescGZIP(), []int{2}
}

func (x *LogMessage) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *LogMessage) GetLevel() LogLevel {
	if x != nil {
		return x.Level
	}
	return LogLevel_UNKNOWN
}

func (x *LogMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ServerInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tp ServerInfoType `protobuf:"varint,1,opt,name=tp,proto3,enum=diagnosticspb.ServerInfoType" json:"tp,omitempty"`
}

func (x *ServerInfoRequest) Reset() {
	*x = ServerInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosticspb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInfoRequest) ProtoMessage() {}

func (x *ServerInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosticspb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInfoRequest.ProtoReflect.Descriptor instead.
func (*ServerInfoRequest) Descriptor() ([]byte, []int) {
	return file_diagnosticspb_proto_rawDescGZIP(), []int{3}
}

func (x *ServerInfoRequest) GetTp() ServerInfoType {
	if x != nil {
		return x.Tp
	}
	return ServerInfoType_All
}

type ServerInfoPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ServerInfoPair) Reset() {
	*x = ServerInfoPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosticspb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInfoPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInfoPair) ProtoMessage() {}

func (x *ServerInfoPair) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosticspb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInfoPair.ProtoReflect.Descriptor instead.
func (*ServerInfoPair) Descriptor() ([]byte, []int) {
	return file_diagnosticspb_proto_rawDescGZIP(), []int{4}
}

func (x *ServerInfoPair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ServerInfoPair) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ServerInfoItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cpu, memory, disk, network ...
	Tp string `protobuf:"bytes,1,opt,name=tp,proto3" json:"tp,omitempty"`
	// eg. network: lo1/eth0, cpu: core1/core2, disk: sda1/sda2
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// all key-value pairs for specified item, e.g:
	// ServerInfoItem {
	//     tp = "network"
	//     name = "eth0"
	//     paris = [
	//         ServerInfoPair { key = "readbytes", value = "4k"},
	//         ServerInfoPair { key = "writebytes", value = "1k"},
	//     ]
	// }
	Pairs []*ServerInfoPair `protobuf:"bytes,3,rep,name=pairs,proto3" json:"pairs,omitempty"`
}

func (x *ServerInfoItem) Reset() {
	*x = ServerInfoItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosticspb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInfoItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInfoItem) ProtoMessage() {}

func (x *ServerInfoItem) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosticspb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInfoItem.ProtoReflect.Descriptor instead.
func (*ServerInfoItem) Descriptor() ([]byte, []int) {
	return file_diagnosticspb_proto_rawDescGZIP(), []int{5}
}

func (x *ServerInfoItem) GetTp() string {
	if x != nil {
		return x.Tp
	}
	return ""
}

func (x *ServerInfoItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServerInfoItem) GetPairs() []*ServerInfoPair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

type ServerInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ServerInfoItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ServerInfoResponse) Reset() {
	*x = ServerInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosticspb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInfoResponse) ProtoMessage() {}

func (x *ServerInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosticspb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInfoResponse.ProtoReflect.Descriptor instead.
func (*ServerInfoResponse) Descriptor() ([]byte, []int) {
	return file_diagnosticspb_proto_rawDescGZIP(), []int{6}
}

func (x *ServerInfoResponse) GetItems() []*ServerInfoItem {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_diagnosticspb_proto protoreflect.FileDescriptor

var file_diagnosticspb_proto_rawDesc = []byte{
	0x0a, 0x13, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x70, 0x62, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x70, 0x62, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x72, 0x75, 0x73, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf9, 0x01, 0x0a, 0x10,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x1e, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x53, 0x6c, 0x6f, 0x77, 0x10, 0x01, 0x22, 0x4a, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x70, 0x62, 0x2e, 0x4c,
	0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x22, 0x69, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x42,
	0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x02, 0x74, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x70, 0x62, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x52, 0x02,
	0x74, 0x70, 0x22, 0x38, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x69, 0x0a, 0x0e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x70,
	0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x22, 0x49, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x2a, 0x5a, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x57, 0x61, 0x72, 0x6e, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x06, 0x2a, 0x49,
	0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4c,
	0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x03, 0x32, 0xb8, 0x01, 0x0a, 0x0b, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x53, 0x0a, 0x0a, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x6c, 0x6f, 0x67, 0x12, 0x1f, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x54,
	0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x2e,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x70, 0x62, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x70, 0x62, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x5c, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x2e, 0x74, 0x69, 0x6b, 0x76,
	0x2e, 0x6b, 0x76, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x70, 0x2f, 0x6b, 0x76, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6b, 0x69, 0x74, 0x65, 0x78,
	0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x70, 0x62, 0xe0, 0xe2, 0x1e, 0x01, 0xc8, 0xe2, 0x1e, 0x01, 0xd0, 0xe2, 0x1e, 0x01, 0xd8, 0xa8,
	0x08, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_diagnosticspb_proto_rawDescOnce sync.Once
	file_diagnosticspb_proto_rawDescData = file_diagnosticspb_proto_rawDesc
)

func file_diagnosticspb_proto_rawDescGZIP() []byte {
	file_diagnosticspb_proto_rawDescOnce.Do(func() {
		file_diagnosticspb_proto_rawDescData = protoimpl.X.CompressGZIP(file_diagnosticspb_proto_rawDescData)
	})
	return file_diagnosticspb_proto_rawDescData
}

var file_diagnosticspb_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_diagnosticspb_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_diagnosticspb_proto_goTypes = []interface{}{
	(LogLevel)(0),                // 0: diagnosticspb.LogLevel
	(ServerInfoType)(0),          // 1: diagnosticspb.ServerInfoType
	(SearchLogRequest_Target)(0), // 2: diagnosticspb.SearchLogRequest.Target
	(*SearchLogRequest)(nil),     // 3: diagnosticspb.SearchLogRequest
	(*SearchLogResponse)(nil),    // 4: diagnosticspb.SearchLogResponse
	(*LogMessage)(nil),           // 5: diagnosticspb.LogMessage
	(*ServerInfoRequest)(nil),    // 6: diagnosticspb.ServerInfoRequest
	(*ServerInfoPair)(nil),       // 7: diagnosticspb.ServerInfoPair
	(*ServerInfoItem)(nil),       // 8: diagnosticspb.ServerInfoItem
	(*ServerInfoResponse)(nil),   // 9: diagnosticspb.ServerInfoResponse
}
var file_diagnosticspb_proto_depIdxs = []int32{
	0, // 0: diagnosticspb.SearchLogRequest.levels:type_name -> diagnosticspb.LogLevel
	2, // 1: diagnosticspb.SearchLogRequest.target:type_name -> diagnosticspb.SearchLogRequest.Target
	5, // 2: diagnosticspb.SearchLogResponse.messages:type_name -> diagnosticspb.LogMessage
	0, // 3: diagnosticspb.LogMessage.level:type_name -> diagnosticspb.LogLevel
	1, // 4: diagnosticspb.ServerInfoRequest.tp:type_name -> diagnosticspb.ServerInfoType
	7, // 5: diagnosticspb.ServerInfoItem.pairs:type_name -> diagnosticspb.ServerInfoPair
	8, // 6: diagnosticspb.ServerInfoResponse.items:type_name -> diagnosticspb.ServerInfoItem
	3, // 7: diagnosticspb.Diagnostics.search_log:input_type -> diagnosticspb.SearchLogRequest
	6, // 8: diagnosticspb.Diagnostics.server_info:input_type -> diagnosticspb.ServerInfoRequest
	4, // 9: diagnosticspb.Diagnostics.search_log:output_type -> diagnosticspb.SearchLogResponse
	9, // 10: diagnosticspb.Diagnostics.server_info:output_type -> diagnosticspb.ServerInfoResponse
	9, // [9:11] is the sub-list for method output_type
	7, // [7:9] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_diagnosticspb_proto_init() }
func file_diagnosticspb_proto_init() {
	if File_diagnosticspb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_diagnosticspb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosticspb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchLogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosticspb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosticspb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosticspb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerInfoPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosticspb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerInfoItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosticspb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_diagnosticspb_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_diagnosticspb_proto_goTypes,
		DependencyIndexes: file_diagnosticspb_proto_depIdxs,
		EnumInfos:         file_diagnosticspb_proto_enumTypes,
		MessageInfos:      file_diagnosticspb_proto_msgTypes,
	}.Build()
	File_diagnosticspb_proto = out.File
	file_diagnosticspb_proto_rawDesc = nil
	file_diagnosticspb_proto_goTypes = nil
	file_diagnosticspb_proto_depIdxs = nil
}

var _ context.Context

// Code generated by Kitex v0.1.3. DO NOT EDIT.

type Diagnostics interface {
	SearchLog(req *SearchLogRequest, stream Diagnostics_SearchLogServer) (err error)
	ServerInfo(ctx context.Context, req *ServerInfoRequest) (res *ServerInfoResponse, err error)
}

type Diagnostics_SearchLogServer interface {
	streaming.Stream
	Send(*SearchLogResponse) error
}
