// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.8.0
// source: cdcpb.proto

package cdcpb

import (
	context "context"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	errorpb "github.com/pingcap/kvproto/proto/kitex_gen/errorpb"
	_ "github.com/pingcap/kvproto/proto/kitex_gen/github.com/gogo/protobuf/gogoproto"
	kvrpcpb "github.com/pingcap/kvproto/proto/kitex_gen/kvrpcpb"
	metapb "github.com/pingcap/kvproto/proto/kitex_gen/metapb"
	raft_cmdpb "github.com/pingcap/kvproto/proto/kitex_gen/raft_cmdpb"
	_ "github.com/pingcap/kvproto/proto/kitex_gen/rustproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Event_LogType int32

const (
	Event_UNKNOWN     Event_LogType = 0
	Event_PREWRITE    Event_LogType = 1
	Event_COMMIT      Event_LogType = 2
	Event_ROLLBACK    Event_LogType = 3
	Event_COMMITTED   Event_LogType = 4
	Event_INITIALIZED Event_LogType = 5
)

// Enum value maps for Event_LogType.
var (
	Event_LogType_name = map[int32]string{
		0: "UNKNOWN",
		1: "PREWRITE",
		2: "COMMIT",
		3: "ROLLBACK",
		4: "COMMITTED",
		5: "INITIALIZED",
	}
	Event_LogType_value = map[string]int32{
		"UNKNOWN":     0,
		"PREWRITE":    1,
		"COMMIT":      2,
		"ROLLBACK":    3,
		"COMMITTED":   4,
		"INITIALIZED": 5,
	}
)

func (x Event_LogType) Enum() *Event_LogType {
	p := new(Event_LogType)
	*p = x
	return p
}

func (x Event_LogType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Event_LogType) Descriptor() protoreflect.EnumDescriptor {
	return file_cdcpb_proto_enumTypes[0].Descriptor()
}

func (Event_LogType) Type() protoreflect.EnumType {
	return &file_cdcpb_proto_enumTypes[0]
}

func (x Event_LogType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Event_LogType.Descriptor instead.
func (Event_LogType) EnumDescriptor() ([]byte, []int) {
	return file_cdcpb_proto_rawDescGZIP(), []int{7, 0}
}

type Event_Row_OpType int32

const (
	Event_Row_UNKNOWN Event_Row_OpType = 0
	Event_Row_PUT     Event_Row_OpType = 1
	Event_Row_DELETE  Event_Row_OpType = 2
)

// Enum value maps for Event_Row_OpType.
var (
	Event_Row_OpType_name = map[int32]string{
		0: "UNKNOWN",
		1: "PUT",
		2: "DELETE",
	}
	Event_Row_OpType_value = map[string]int32{
		"UNKNOWN": 0,
		"PUT":     1,
		"DELETE":  2,
	}
)

func (x Event_Row_OpType) Enum() *Event_Row_OpType {
	p := new(Event_Row_OpType)
	*p = x
	return p
}

func (x Event_Row_OpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Event_Row_OpType) Descriptor() protoreflect.EnumDescriptor {
	return file_cdcpb_proto_enumTypes[1].Descriptor()
}

func (Event_Row_OpType) Type() protoreflect.EnumType {
	return &file_cdcpb_proto_enumTypes[1]
}

func (x Event_Row_OpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Event_Row_OpType.Descriptor instead.
func (Event_Row_OpType) EnumDescriptor() ([]byte, []int) {
	return file_cdcpb_proto_rawDescGZIP(), []int{7, 0, 0}
}

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	TicdcVersion string `protobuf:"bytes,2,opt,name=ticdc_version,json=ticdcVersion,proto3" json:"ticdc_version,omitempty"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdcpb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_cdcpb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_cdcpb_proto_rawDescGZIP(), []int{0}
}

func (x *Header) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *Header) GetTicdcVersion() string {
	if x != nil {
		return x.TicdcVersion
	}
	return ""
}

type DuplicateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId uint64 `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
}

func (x *DuplicateRequest) Reset() {
	*x = DuplicateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdcpb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DuplicateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DuplicateRequest) ProtoMessage() {}

func (x *DuplicateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cdcpb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DuplicateRequest.ProtoReflect.Descriptor instead.
func (*DuplicateRequest) Descriptor() ([]byte, []int) {
	return file_cdcpb_proto_rawDescGZIP(), []int{1}
}

func (x *DuplicateRequest) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

type Compatibility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequiredVersion string `protobuf:"bytes,1,opt,name=required_version,json=requiredVersion,proto3" json:"required_version,omitempty"`
}

func (x *Compatibility) Reset() {
	*x = Compatibility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdcpb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Compatibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Compatibility) ProtoMessage() {}

func (x *Compatibility) ProtoReflect() protoreflect.Message {
	mi := &file_cdcpb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Compatibility.ProtoReflect.Descriptor instead.
func (*Compatibility) Descriptor() ([]byte, []int) {
	return file_cdcpb_proto_rawDescGZIP(), []int{2}
}

func (x *Compatibility) GetRequiredVersion() string {
	if x != nil {
		return x.RequiredVersion
	}
	return ""
}

// ClusterIDMismatch is an error variable that
// tells people that the cluster ID of the request does not match the TiKV cluster ID.
type ClusterIDMismatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current tikv cluster ID.
	Current uint64 `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	// The cluster ID of the TiCDC request.
	Request uint64 `protobuf:"varint,2,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *ClusterIDMismatch) Reset() {
	*x = ClusterIDMismatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdcpb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterIDMismatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterIDMismatch) ProtoMessage() {}

func (x *ClusterIDMismatch) ProtoReflect() protoreflect.Message {
	mi := &file_cdcpb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterIDMismatch.ProtoReflect.Descriptor instead.
func (*ClusterIDMismatch) Descriptor() ([]byte, []int) {
	return file_cdcpb_proto_rawDescGZIP(), []int{3}
}

func (x *ClusterIDMismatch) GetCurrent() uint64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *ClusterIDMismatch) GetRequest() uint64 {
	if x != nil {
		return x.Request
	}
	return 0
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotLeader         *errorpb.NotLeader      `protobuf:"bytes,1,opt,name=not_leader,json=notLeader,proto3" json:"not_leader,omitempty"`
	RegionNotFound    *errorpb.RegionNotFound `protobuf:"bytes,2,opt,name=region_not_found,json=regionNotFound,proto3" json:"region_not_found,omitempty"`
	EpochNotMatch     *errorpb.EpochNotMatch  `protobuf:"bytes,3,opt,name=epoch_not_match,json=epochNotMatch,proto3" json:"epoch_not_match,omitempty"`
	DuplicateRequest  *DuplicateRequest       `protobuf:"bytes,4,opt,name=duplicate_request,json=duplicateRequest,proto3" json:"duplicate_request,omitempty"`
	Compatibility     *Compatibility          `protobuf:"bytes,5,opt,name=compatibility,proto3" json:"compatibility,omitempty"`
	ClusterIdMismatch *ClusterIDMismatch      `protobuf:"bytes,6,opt,name=cluster_id_mismatch,json=clusterIdMismatch,proto3" json:"cluster_id_mismatch,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdcpb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_cdcpb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_cdcpb_proto_rawDescGZIP(), []int{4}
}

func (x *Error) GetNotLeader() *errorpb.NotLeader {
	if x != nil {
		return x.NotLeader
	}
	return nil
}

func (x *Error) GetRegionNotFound() *errorpb.RegionNotFound {
	if x != nil {
		return x.RegionNotFound
	}
	return nil
}

func (x *Error) GetEpochNotMatch() *errorpb.EpochNotMatch {
	if x != nil {
		return x.EpochNotMatch
	}
	return nil
}

func (x *Error) GetDuplicateRequest() *DuplicateRequest {
	if x != nil {
		return x.DuplicateRequest
	}
	return nil
}

func (x *Error) GetCompatibility() *Compatibility {
	if x != nil {
		return x.Compatibility
	}
	return nil
}

func (x *Error) GetClusterIdMismatch() *ClusterIDMismatch {
	if x != nil {
		return x.ClusterIdMismatch
	}
	return nil
}

type TxnInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTs uint64 `protobuf:"varint,1,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	Primary []byte `protobuf:"bytes,2,opt,name=primary,proto3" json:"primary,omitempty"`
}

func (x *TxnInfo) Reset() {
	*x = TxnInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdcpb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxnInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxnInfo) ProtoMessage() {}

func (x *TxnInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cdcpb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxnInfo.ProtoReflect.Descriptor instead.
func (*TxnInfo) Descriptor() ([]byte, []int) {
	return file_cdcpb_proto_rawDescGZIP(), []int{5}
}

func (x *TxnInfo) GetStartTs() uint64 {
	if x != nil {
		return x.StartTs
	}
	return 0
}

func (x *TxnInfo) GetPrimary() []byte {
	if x != nil {
		return x.Primary
	}
	return nil
}

type TxnStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTs      uint64 `protobuf:"varint,1,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	MinCommitTs  uint64 `protobuf:"varint,2,opt,name=min_commit_ts,json=minCommitTs,proto3" json:"min_commit_ts,omitempty"`
	CommitTs     uint64 `protobuf:"varint,3,opt,name=commit_ts,json=commitTs,proto3" json:"commit_ts,omitempty"`
	IsRolledBack bool   `protobuf:"varint,4,opt,name=is_rolled_back,json=isRolledBack,proto3" json:"is_rolled_back,omitempty"`
}

func (x *TxnStatus) Reset() {
	*x = TxnStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdcpb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxnStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxnStatus) ProtoMessage() {}

func (x *TxnStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cdcpb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxnStatus.ProtoReflect.Descriptor instead.
func (*TxnStatus) Descriptor() ([]byte, []int) {
	return file_cdcpb_proto_rawDescGZIP(), []int{6}
}

func (x *TxnStatus) GetStartTs() uint64 {
	if x != nil {
		return x.StartTs
	}
	return 0
}

func (x *TxnStatus) GetMinCommitTs() uint64 {
	if x != nil {
		return x.MinCommitTs
	}
	return 0
}

func (x *TxnStatus) GetCommitTs() uint64 {
	if x != nil {
		return x.CommitTs
	}
	return 0
}

func (x *TxnStatus) GetIsRolledBack() bool {
	if x != nil {
		return x.IsRolledBack
	}
	return false
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId  uint64 `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	Index     uint64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	RequestId uint64 `protobuf:"varint,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Types that are assignable to Event:
	//	*Event_Entries_
	//	*Event_Admin_
	//	*Event_Error
	//	*Event_ResolvedTs
	//	*Event_LongTxn_
	Event isEvent_Event `protobuf_oneof:"event"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdcpb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_cdcpb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_cdcpb_proto_rawDescGZIP(), []int{7}
}

func (x *Event) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *Event) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Event) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (m *Event) GetEvent() isEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *Event) GetEntries() *Event_Entries {
	if x, ok := x.GetEvent().(*Event_Entries_); ok {
		return x.Entries
	}
	return nil
}

func (x *Event) GetAdmin() *Event_Admin {
	if x, ok := x.GetEvent().(*Event_Admin_); ok {
		return x.Admin
	}
	return nil
}

func (x *Event) GetError() *Error {
	if x, ok := x.GetEvent().(*Event_Error); ok {
		return x.Error
	}
	return nil
}

// Deprecated: Do not use.
func (x *Event) GetResolvedTs() uint64 {
	if x, ok := x.GetEvent().(*Event_ResolvedTs); ok {
		return x.ResolvedTs
	}
	return 0
}

func (x *Event) GetLongTxn() *Event_LongTxn {
	if x, ok := x.GetEvent().(*Event_LongTxn_); ok {
		return x.LongTxn
	}
	return nil
}

type isEvent_Event interface {
	isEvent_Event()
}

type Event_Entries_ struct {
	Entries *Event_Entries `protobuf:"bytes,3,opt,name=entries,proto3,oneof"`
}

type Event_Admin_ struct {
	Admin *Event_Admin `protobuf:"bytes,4,opt,name=admin,proto3,oneof"`
}

type Event_Error struct {
	Error *Error `protobuf:"bytes,5,opt,name=error,proto3,oneof"`
}

type Event_ResolvedTs struct {
	// Deprecated: Do not use.
	ResolvedTs uint64 `protobuf:"varint,6,opt,name=resolved_ts,json=resolvedTs,proto3,oneof"`
}

type Event_LongTxn_ struct {
	// Note that field 7 is taken by request_id.
	LongTxn *Event_LongTxn `protobuf:"bytes,8,opt,name=long_txn,json=longTxn,proto3,oneof"` // More region level events ...
}

func (*Event_Entries_) isEvent_Event() {}

func (*Event_Admin_) isEvent_Event() {}

func (*Event_Error) isEvent_Event() {}

func (*Event_ResolvedTs) isEvent_Event() {}

func (*Event_LongTxn_) isEvent_Event() {}

type ChangeDataEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events     []*Event    `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	ResolvedTs *ResolvedTs `protobuf:"bytes,2,opt,name=resolved_ts,json=resolvedTs,proto3" json:"resolved_ts,omitempty"` // More store level events ...
}

func (x *ChangeDataEvent) Reset() {
	*x = ChangeDataEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdcpb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeDataEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeDataEvent) ProtoMessage() {}

func (x *ChangeDataEvent) ProtoReflect() protoreflect.Message {
	mi := &file_cdcpb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeDataEvent.ProtoReflect.Descriptor instead.
func (*ChangeDataEvent) Descriptor() ([]byte, []int) {
	return file_cdcpb_proto_rawDescGZIP(), []int{8}
}

func (x *ChangeDataEvent) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *ChangeDataEvent) GetResolvedTs() *ResolvedTs {
	if x != nil {
		return x.ResolvedTs
	}
	return nil
}

type ResolvedTs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Regions []uint64 `protobuf:"varint,1,rep,packed,name=regions,proto3" json:"regions,omitempty"`
	Ts      uint64   `protobuf:"varint,2,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *ResolvedTs) Reset() {
	*x = ResolvedTs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdcpb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolvedTs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolvedTs) ProtoMessage() {}

func (x *ResolvedTs) ProtoReflect() protoreflect.Message {
	mi := &file_cdcpb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolvedTs.ProtoReflect.Descriptor instead.
func (*ResolvedTs) Descriptor() ([]byte, []int) {
	return file_cdcpb_proto_rawDescGZIP(), []int{9}
}

func (x *ResolvedTs) GetRegions() []uint64 {
	if x != nil {
		return x.Regions
	}
	return nil
}

func (x *ResolvedTs) GetTs() uint64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

type ChangeDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *Header             `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	RegionId     uint64              `protobuf:"varint,2,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	RegionEpoch  *metapb.RegionEpoch `protobuf:"bytes,3,opt,name=region_epoch,json=regionEpoch,proto3" json:"region_epoch,omitempty"`
	CheckpointTs uint64              `protobuf:"varint,4,opt,name=checkpoint_ts,json=checkpointTs,proto3" json:"checkpoint_ts,omitempty"`
	StartKey     []byte              `protobuf:"bytes,5,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	EndKey       []byte              `protobuf:"bytes,6,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
	// Used for CDC to identify events corresponding to different requests.
	RequestId uint64          `protobuf:"varint,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ExtraOp   kvrpcpb.ExtraOp `protobuf:"varint,8,opt,name=extra_op,json=extraOp,proto3,enum=kvrpcpb.ExtraOp" json:"extra_op,omitempty"`
	// Types that are assignable to Request:
	//	*ChangeDataRequest_Register_
	//	*ChangeDataRequest_NotifyTxnStatus_
	Request isChangeDataRequest_Request `protobuf_oneof:"request"`
}

func (x *ChangeDataRequest) Reset() {
	*x = ChangeDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdcpb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeDataRequest) ProtoMessage() {}

func (x *ChangeDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cdcpb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeDataRequest.ProtoReflect.Descriptor instead.
func (*ChangeDataRequest) Descriptor() ([]byte, []int) {
	return file_cdcpb_proto_rawDescGZIP(), []int{10}
}

func (x *ChangeDataRequest) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ChangeDataRequest) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *ChangeDataRequest) GetRegionEpoch() *metapb.RegionEpoch {
	if x != nil {
		return x.RegionEpoch
	}
	return nil
}

func (x *ChangeDataRequest) GetCheckpointTs() uint64 {
	if x != nil {
		return x.CheckpointTs
	}
	return 0
}

func (x *ChangeDataRequest) GetStartKey() []byte {
	if x != nil {
		return x.StartKey
	}
	return nil
}

func (x *ChangeDataRequest) GetEndKey() []byte {
	if x != nil {
		return x.EndKey
	}
	return nil
}

func (x *ChangeDataRequest) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ChangeDataRequest) GetExtraOp() kvrpcpb.ExtraOp {
	if x != nil {
		return x.ExtraOp
	}
	return kvrpcpb.ExtraOp_Noop
}

func (m *ChangeDataRequest) GetRequest() isChangeDataRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *ChangeDataRequest) GetRegister() *ChangeDataRequest_Register {
	if x, ok := x.GetRequest().(*ChangeDataRequest_Register_); ok {
		return x.Register
	}
	return nil
}

func (x *ChangeDataRequest) GetNotifyTxnStatus() *ChangeDataRequest_NotifyTxnStatus {
	if x, ok := x.GetRequest().(*ChangeDataRequest_NotifyTxnStatus_); ok {
		return x.NotifyTxnStatus
	}
	return nil
}

type isChangeDataRequest_Request interface {
	isChangeDataRequest_Request()
}

type ChangeDataRequest_Register_ struct {
	// A normal request that trying to register change data feed on a region.
	Register *ChangeDataRequest_Register `protobuf:"bytes,9,opt,name=register,proto3,oneof"`
}

type ChangeDataRequest_NotifyTxnStatus_ struct {
	// Notify the region that some of the running transactions on the region has a pushed
	// min_commit_ts so that the resolved_ts can be advanced.
	NotifyTxnStatus *ChangeDataRequest_NotifyTxnStatus `protobuf:"bytes,10,opt,name=notify_txn_status,json=notifyTxnStatus,proto3,oneof"`
}

func (*ChangeDataRequest_Register_) isChangeDataRequest_Request() {}

func (*ChangeDataRequest_NotifyTxnStatus_) isChangeDataRequest_Request() {}

type Event_Row struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTs  uint64           `protobuf:"varint,1,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	CommitTs uint64           `protobuf:"varint,2,opt,name=commit_ts,json=commitTs,proto3" json:"commit_ts,omitempty"`
	Type     Event_LogType    `protobuf:"varint,3,opt,name=type,proto3,enum=cdcpb.Event_LogType" json:"type,omitempty"`
	OpType   Event_Row_OpType `protobuf:"varint,4,opt,name=op_type,json=opType,proto3,enum=cdcpb.Event_Row_OpType" json:"op_type,omitempty"`
	Key      []byte           `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	Value    []byte           `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	OldValue []byte           `protobuf:"bytes,7,opt,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"`
}

func (x *Event_Row) Reset() {
	*x = Event_Row{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdcpb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event_Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event_Row) ProtoMessage() {}

func (x *Event_Row) ProtoReflect() protoreflect.Message {
	mi := &file_cdcpb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event_Row.ProtoReflect.Descriptor instead.
func (*Event_Row) Descriptor() ([]byte, []int) {
	return file_cdcpb_proto_rawDescGZIP(), []int{7, 0}
}

func (x *Event_Row) GetStartTs() uint64 {
	if x != nil {
		return x.StartTs
	}
	return 0
}

func (x *Event_Row) GetCommitTs() uint64 {
	if x != nil {
		return x.CommitTs
	}
	return 0
}

func (x *Event_Row) GetType() Event_LogType {
	if x != nil {
		return x.Type
	}
	return Event_UNKNOWN
}

func (x *Event_Row) GetOpType() Event_Row_OpType {
	if x != nil {
		return x.OpType
	}
	return Event_Row_UNKNOWN
}

func (x *Event_Row) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Event_Row) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Event_Row) GetOldValue() []byte {
	if x != nil {
		return x.OldValue
	}
	return nil
}

type Event_Entries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*Event_Row `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *Event_Entries) Reset() {
	*x = Event_Entries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdcpb_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event_Entries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event_Entries) ProtoMessage() {}

func (x *Event_Entries) ProtoReflect() protoreflect.Message {
	mi := &file_cdcpb_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event_Entries.ProtoReflect.Descriptor instead.
func (*Event_Entries) Descriptor() ([]byte, []int) {
	return file_cdcpb_proto_rawDescGZIP(), []int{7, 1}
}

func (x *Event_Entries) GetEntries() []*Event_Row {
	if x != nil {
		return x.Entries
	}
	return nil
}

type Event_Admin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminRequest  *raft_cmdpb.AdminRequest  `protobuf:"bytes,1,opt,name=admin_request,json=adminRequest,proto3" json:"admin_request,omitempty"`
	AdminResponse *raft_cmdpb.AdminResponse `protobuf:"bytes,2,opt,name=admin_response,json=adminResponse,proto3" json:"admin_response,omitempty"`
}

func (x *Event_Admin) Reset() {
	*x = Event_Admin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdcpb_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event_Admin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event_Admin) ProtoMessage() {}

func (x *Event_Admin) ProtoReflect() protoreflect.Message {
	mi := &file_cdcpb_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event_Admin.ProtoReflect.Descriptor instead.
func (*Event_Admin) Descriptor() ([]byte, []int) {
	return file_cdcpb_proto_rawDescGZIP(), []int{7, 2}
}

func (x *Event_Admin) GetAdminRequest() *raft_cmdpb.AdminRequest {
	if x != nil {
		return x.AdminRequest
	}
	return nil
}

func (x *Event_Admin) GetAdminResponse() *raft_cmdpb.AdminResponse {
	if x != nil {
		return x.AdminResponse
	}
	return nil
}

type Event_LongTxn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxnInfo []*TxnInfo `protobuf:"bytes,1,rep,name=txn_info,json=txnInfo,proto3" json:"txn_info,omitempty"`
}

func (x *Event_LongTxn) Reset() {
	*x = Event_LongTxn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdcpb_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event_LongTxn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event_LongTxn) ProtoMessage() {}

func (x *Event_LongTxn) ProtoReflect() protoreflect.Message {
	mi := &file_cdcpb_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event_LongTxn.ProtoReflect.Descriptor instead.
func (*Event_LongTxn) Descriptor() ([]byte, []int) {
	return file_cdcpb_proto_rawDescGZIP(), []int{7, 3}
}

func (x *Event_LongTxn) GetTxnInfo() []*TxnInfo {
	if x != nil {
		return x.TxnInfo
	}
	return nil
}

type ChangeDataRequest_Register struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChangeDataRequest_Register) Reset() {
	*x = ChangeDataRequest_Register{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdcpb_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeDataRequest_Register) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeDataRequest_Register) ProtoMessage() {}

func (x *ChangeDataRequest_Register) ProtoReflect() protoreflect.Message {
	mi := &file_cdcpb_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeDataRequest_Register.ProtoReflect.Descriptor instead.
func (*ChangeDataRequest_Register) Descriptor() ([]byte, []int) {
	return file_cdcpb_proto_rawDescGZIP(), []int{10, 0}
}

type ChangeDataRequest_NotifyTxnStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxnStatus []*TxnStatus `protobuf:"bytes,1,rep,name=txn_status,json=txnStatus,proto3" json:"txn_status,omitempty"`
}

func (x *ChangeDataRequest_NotifyTxnStatus) Reset() {
	*x = ChangeDataRequest_NotifyTxnStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdcpb_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeDataRequest_NotifyTxnStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeDataRequest_NotifyTxnStatus) ProtoMessage() {}

func (x *ChangeDataRequest_NotifyTxnStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cdcpb_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeDataRequest_NotifyTxnStatus.ProtoReflect.Descriptor instead.
func (*ChangeDataRequest_NotifyTxnStatus) Descriptor() ([]byte, []int) {
	return file_cdcpb_proto_rawDescGZIP(), []int{10, 1}
}

func (x *ChangeDataRequest_NotifyTxnStatus) GetTxnStatus() []*TxnStatus {
	if x != nil {
		return x.TxnStatus
	}
	return nil
}

var File_cdcpb_proto protoreflect.FileDescriptor

var file_cdcpb_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x63, 0x64, 0x63, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x63,
	0x64, 0x63, 0x70, 0x62, 0x1a, 0x10, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x70, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x72, 0x75, 0x73, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4c, 0x0a, 0x06, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x63, 0x64, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x64, 0x63,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2f, 0x0a, 0x10, 0x44, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a, 0x11, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x89, 0x03,
	0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x6c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x09, 0x6e, 0x6f, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x10, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x0e, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3e, 0x0a,
	0x0f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x70, 0x62,
	0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x4e, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0d,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x4e, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x44, 0x0a,
	0x11, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x64, 0x63, 0x70, 0x62,
	0x2e, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x10, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x64, 0x63,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x48, 0x0a, 0x13, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6d, 0x69,
	0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x64, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x4d, 0x69,
	0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x3e, 0x0a, 0x07, 0x54, 0x78, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x8d, 0x01, 0x0a, 0x09, 0x54, 0x78,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x5f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x54, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x5f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x54, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x52,
	0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x22, 0xa5, 0x07, 0x0a, 0x05, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x64, 0x63, 0x70, 0x62, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x64, 0x63, 0x70, 0x62, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x64, 0x63, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0b, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02,
	0x18, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x54, 0x73,
	0x12, 0x31, 0x0a, 0x08, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x74, 0x78, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x64, 0x63, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x78, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x6f, 0x6e, 0x67,
	0x54, 0x78, 0x6e, 0x1a, 0x8a, 0x02, 0x0a, 0x03, 0x52, 0x6f, 0x77, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x5f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x54, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x63, 0x64, 0x63, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x4c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a,
	0x07, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x63, 0x64, 0x63, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x77,
	0x2e, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x2a, 0x0a, 0x06, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x50,
	0x55, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02,
	0x1a, 0x35, 0x0a, 0x07, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63,
	0x64, 0x63, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x88, 0x01, 0x0a, 0x05, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x12, 0x3d, 0x0a, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f,
	0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x40, 0x0a, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f,
	0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x1a, 0x34, 0x0a, 0x07, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x78, 0x6e, 0x12, 0x29, 0x0a,
	0x08, 0x74, 0x78, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x63, 0x64, 0x63, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x74, 0x78, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5e, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x45, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x4f,
	0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x4d,
	0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x05, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x22, 0x6b, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x64, 0x63, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x64, 0x63, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64,
	0x54, 0x73, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x54, 0x73, 0x22, 0x36,
	0x0a, 0x0a, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x54, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x74, 0x73, 0x22, 0xaa, 0x04, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63,
	0x64, 0x63, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x36, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x0b, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e,
	0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x65, 0x6e, 0x64,
	0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6f, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x4f, 0x70, 0x52, 0x07, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4f, 0x70, 0x12,
	0x3f, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x64, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x56, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x64,
	0x63, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x78, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54,
	0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x1a, 0x42, 0x0a, 0x0f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x78,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x0a, 0x74, 0x78, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x64,
	0x63, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x74,
	0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x4f, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x41, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x64, 0x12, 0x18,
	0x2e, 0x63, 0x64, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x64, 0x63, 0x70, 0x62,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x28, 0x01, 0x30, 0x01, 0x42, 0x54, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x2e, 0x74, 0x69, 0x6b, 0x76,
	0x2e, 0x6b, 0x76, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x70, 0x2f, 0x6b, 0x76, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6b, 0x69, 0x74, 0x65, 0x78,
	0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x64, 0x63, 0x70, 0x62, 0xe0, 0xe2, 0x1e, 0x01, 0xc8, 0xe2,
	0x1e, 0x01, 0xd0, 0xe2, 0x1e, 0x01, 0xd8, 0xa8, 0x08, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_cdcpb_proto_rawDescOnce sync.Once
	file_cdcpb_proto_rawDescData = file_cdcpb_proto_rawDesc
)

func file_cdcpb_proto_rawDescGZIP() []byte {
	file_cdcpb_proto_rawDescOnce.Do(func() {
		file_cdcpb_proto_rawDescData = protoimpl.X.CompressGZIP(file_cdcpb_proto_rawDescData)
	})
	return file_cdcpb_proto_rawDescData
}

var file_cdcpb_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_cdcpb_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_cdcpb_proto_goTypes = []interface{}{
	(Event_LogType)(0),                        // 0: cdcpb.Event.LogType
	(Event_Row_OpType)(0),                     // 1: cdcpb.Event.Row.OpType
	(*Header)(nil),                            // 2: cdcpb.Header
	(*DuplicateRequest)(nil),                  // 3: cdcpb.DuplicateRequest
	(*Compatibility)(nil),                     // 4: cdcpb.Compatibility
	(*ClusterIDMismatch)(nil),                 // 5: cdcpb.ClusterIDMismatch
	(*Error)(nil),                             // 6: cdcpb.Error
	(*TxnInfo)(nil),                           // 7: cdcpb.TxnInfo
	(*TxnStatus)(nil),                         // 8: cdcpb.TxnStatus
	(*Event)(nil),                             // 9: cdcpb.Event
	(*ChangeDataEvent)(nil),                   // 10: cdcpb.ChangeDataEvent
	(*ResolvedTs)(nil),                        // 11: cdcpb.ResolvedTs
	(*ChangeDataRequest)(nil),                 // 12: cdcpb.ChangeDataRequest
	(*Event_Row)(nil),                         // 13: cdcpb.Event.Row
	(*Event_Entries)(nil),                     // 14: cdcpb.Event.Entries
	(*Event_Admin)(nil),                       // 15: cdcpb.Event.Admin
	(*Event_LongTxn)(nil),                     // 16: cdcpb.Event.LongTxn
	(*ChangeDataRequest_Register)(nil),        // 17: cdcpb.ChangeDataRequest.Register
	(*ChangeDataRequest_NotifyTxnStatus)(nil), // 18: cdcpb.ChangeDataRequest.NotifyTxnStatus
	(*errorpb.NotLeader)(nil),                 // 19: errorpb.NotLeader
	(*errorpb.RegionNotFound)(nil),            // 20: errorpb.RegionNotFound
	(*errorpb.EpochNotMatch)(nil),             // 21: errorpb.EpochNotMatch
	(*metapb.RegionEpoch)(nil),                // 22: metapb.RegionEpoch
	(kvrpcpb.ExtraOp)(0),                      // 23: kvrpcpb.ExtraOp
	(*raft_cmdpb.AdminRequest)(nil),           // 24: raft_cmdpb.AdminRequest
	(*raft_cmdpb.AdminResponse)(nil),          // 25: raft_cmdpb.AdminResponse
}
var file_cdcpb_proto_depIdxs = []int32{
	19, // 0: cdcpb.Error.not_leader:type_name -> errorpb.NotLeader
	20, // 1: cdcpb.Error.region_not_found:type_name -> errorpb.RegionNotFound
	21, // 2: cdcpb.Error.epoch_not_match:type_name -> errorpb.EpochNotMatch
	3,  // 3: cdcpb.Error.duplicate_request:type_name -> cdcpb.DuplicateRequest
	4,  // 4: cdcpb.Error.compatibility:type_name -> cdcpb.Compatibility
	5,  // 5: cdcpb.Error.cluster_id_mismatch:type_name -> cdcpb.ClusterIDMismatch
	14, // 6: cdcpb.Event.entries:type_name -> cdcpb.Event.Entries
	15, // 7: cdcpb.Event.admin:type_name -> cdcpb.Event.Admin
	6,  // 8: cdcpb.Event.error:type_name -> cdcpb.Error
	16, // 9: cdcpb.Event.long_txn:type_name -> cdcpb.Event.LongTxn
	9,  // 10: cdcpb.ChangeDataEvent.events:type_name -> cdcpb.Event
	11, // 11: cdcpb.ChangeDataEvent.resolved_ts:type_name -> cdcpb.ResolvedTs
	2,  // 12: cdcpb.ChangeDataRequest.header:type_name -> cdcpb.Header
	22, // 13: cdcpb.ChangeDataRequest.region_epoch:type_name -> metapb.RegionEpoch
	23, // 14: cdcpb.ChangeDataRequest.extra_op:type_name -> kvrpcpb.ExtraOp
	17, // 15: cdcpb.ChangeDataRequest.register:type_name -> cdcpb.ChangeDataRequest.Register
	18, // 16: cdcpb.ChangeDataRequest.notify_txn_status:type_name -> cdcpb.ChangeDataRequest.NotifyTxnStatus
	0,  // 17: cdcpb.Event.Row.type:type_name -> cdcpb.Event.LogType
	1,  // 18: cdcpb.Event.Row.op_type:type_name -> cdcpb.Event.Row.OpType
	13, // 19: cdcpb.Event.Entries.entries:type_name -> cdcpb.Event.Row
	24, // 20: cdcpb.Event.Admin.admin_request:type_name -> raft_cmdpb.AdminRequest
	25, // 21: cdcpb.Event.Admin.admin_response:type_name -> raft_cmdpb.AdminResponse
	7,  // 22: cdcpb.Event.LongTxn.txn_info:type_name -> cdcpb.TxnInfo
	8,  // 23: cdcpb.ChangeDataRequest.NotifyTxnStatus.txn_status:type_name -> cdcpb.TxnStatus
	12, // 24: cdcpb.ChangeData.EventFeed:input_type -> cdcpb.ChangeDataRequest
	10, // 25: cdcpb.ChangeData.EventFeed:output_type -> cdcpb.ChangeDataEvent
	25, // [25:26] is the sub-list for method output_type
	24, // [24:25] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_cdcpb_proto_init() }
func file_cdcpb_proto_init() {
	if File_cdcpb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cdcpb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdcpb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DuplicateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdcpb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Compatibility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdcpb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterIDMismatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdcpb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdcpb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxnInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdcpb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxnStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdcpb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdcpb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeDataEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdcpb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolvedTs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdcpb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdcpb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event_Row); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdcpb_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event_Entries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdcpb_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event_Admin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdcpb_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event_LongTxn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdcpb_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeDataRequest_Register); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdcpb_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeDataRequest_NotifyTxnStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cdcpb_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*Event_Entries_)(nil),
		(*Event_Admin_)(nil),
		(*Event_Error)(nil),
		(*Event_ResolvedTs)(nil),
		(*Event_LongTxn_)(nil),
	}
	file_cdcpb_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*ChangeDataRequest_Register_)(nil),
		(*ChangeDataRequest_NotifyTxnStatus_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cdcpb_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cdcpb_proto_goTypes,
		DependencyIndexes: file_cdcpb_proto_depIdxs,
		EnumInfos:         file_cdcpb_proto_enumTypes,
		MessageInfos:      file_cdcpb_proto_msgTypes,
	}.Build()
	File_cdcpb_proto = out.File
	file_cdcpb_proto_rawDesc = nil
	file_cdcpb_proto_goTypes = nil
	file_cdcpb_proto_depIdxs = nil
}

var _ context.Context

// Code generated by Kitex v0.1.3. DO NOT EDIT.

type ChangeData interface {
	EventFeed(stream ChangeData_EventFeedServer) (err error)
}

type ChangeData_EventFeedServer interface {
	streaming.Stream
	Recv() (*ChangeDataRequest, error)
	Send(*ChangeDataEvent) error
}
