// Code generated by Kitex v0.1.3. DO NOT EDIT.

package changedata

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"github.com/pingcap/kvproto/proto/kitex_gen/cdcpb"
	"google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return changeDataServiceInfo
}

var changeDataServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ChangeData"
	handlerType := (*cdcpb.ChangeData)(nil)
	methods := map[string]kitex.MethodInfo{
		"EventFeed": kitex.NewMethodInfo(eventFeedHandler, newEventFeedArgs, newEventFeedResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "cdcpb",
	}
	extra["streaming"] = true
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.1.3",
		Extra:           extra,
	}
	return svcInfo
}

func eventFeedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st := arg.(*streaming.Args).Stream
	stream := &changeDataEventFeedServer{st}
	return handler.(cdcpb.ChangeData).EventFeed(stream)
}

type changeDataEventFeedClient struct {
	streaming.Stream
}

func (x *changeDataEventFeedClient) Send(m *cdcpb.ChangeDataRequest) error {
	return x.Stream.SendMsg(m)
}
func (x *changeDataEventFeedClient) Recv() (*cdcpb.ChangeDataEvent, error) {
	m := new(cdcpb.ChangeDataEvent)
	return m, x.Stream.RecvMsg(m)
}

type changeDataEventFeedServer struct {
	streaming.Stream
}

func (x *changeDataEventFeedServer) Send(m *cdcpb.ChangeDataEvent) error {
	return x.Stream.SendMsg(m)
}

func (x *changeDataEventFeedServer) Recv() (*cdcpb.ChangeDataRequest, error) {
	m := new(cdcpb.ChangeDataRequest)
	return m, x.Stream.RecvMsg(m)
}

func newEventFeedArgs() interface{} {
	return &EventFeedArgs{}
}

func newEventFeedResult() interface{} {
	return &EventFeedResult{}
}

type EventFeedArgs struct {
	Req *cdcpb.ChangeDataRequest
}

func (p *EventFeedArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in EventFeedArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *EventFeedArgs) Unmarshal(in []byte) error {
	msg := new(cdcpb.ChangeDataRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var EventFeedArgs_Req_DEFAULT *cdcpb.ChangeDataRequest

func (p *EventFeedArgs) GetReq() *cdcpb.ChangeDataRequest {
	if !p.IsSetReq() {
		return EventFeedArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *EventFeedArgs) IsSetReq() bool {
	return p.Req != nil
}

type EventFeedResult struct {
	Success *cdcpb.ChangeDataEvent
}

var EventFeedResult_Success_DEFAULT *cdcpb.ChangeDataEvent

func (p *EventFeedResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in EventFeedResult")
	}
	return proto.Marshal(p.Success)
}

func (p *EventFeedResult) Unmarshal(in []byte) error {
	msg := new(cdcpb.ChangeDataEvent)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *EventFeedResult) GetSuccess() *cdcpb.ChangeDataEvent {
	if !p.IsSetSuccess() {
		return EventFeedResult_Success_DEFAULT
	}
	return p.Success
}

func (p *EventFeedResult) SetSuccess(x interface{}) {
	p.Success = x.(*cdcpb.ChangeDataEvent)
}

func (p *EventFeedResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) EventFeed(ctx context.Context) (ChangeData_EventFeedClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "EventFeed", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &changeDataEventFeedClient{res.Stream}
	return stream, nil
}
