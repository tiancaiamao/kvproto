// These encryption protobufs are not sent over the network.
// Protobufs are used to define a stable backwards compatible persistent storage format.
// These definitions are used by both PD and TiKV to keep their implementations similar.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.8.0
// source: encryptionpb.proto

package encryptionpb

import (
	context "context"
	_ "github.com/pingcap/kvproto/proto/kitex_gen/github.com/gogo/protobuf/gogoproto"
	_ "github.com/pingcap/kvproto/proto/kitex_gen/rustproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EncryptionMethod int32

const (
	EncryptionMethod_UNKNOWN    EncryptionMethod = 0
	EncryptionMethod_PLAINTEXT  EncryptionMethod = 1
	EncryptionMethod_AES128_CTR EncryptionMethod = 2
	EncryptionMethod_AES192_CTR EncryptionMethod = 3
	EncryptionMethod_AES256_CTR EncryptionMethod = 4
)

// Enum value maps for EncryptionMethod.
var (
	EncryptionMethod_name = map[int32]string{
		0: "UNKNOWN",
		1: "PLAINTEXT",
		2: "AES128_CTR",
		3: "AES192_CTR",
		4: "AES256_CTR",
	}
	EncryptionMethod_value = map[string]int32{
		"UNKNOWN":    0,
		"PLAINTEXT":  1,
		"AES128_CTR": 2,
		"AES192_CTR": 3,
		"AES256_CTR": 4,
	}
)

func (x EncryptionMethod) Enum() *EncryptionMethod {
	p := new(EncryptionMethod)
	*p = x
	return p
}

func (x EncryptionMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncryptionMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_encryptionpb_proto_enumTypes[0].Descriptor()
}

func (EncryptionMethod) Type() protoreflect.EnumType {
	return &file_encryptionpb_proto_enumTypes[0]
}

func (x EncryptionMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncryptionMethod.Descriptor instead.
func (EncryptionMethod) EnumDescriptor() ([]byte, []int) {
	return file_encryptionpb_proto_rawDescGZIP(), []int{0}
}

// General encryption metadata for any data type.
type EncryptionMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the key used to encrypt the data.
	KeyId uint64 `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// Initialization vector (IV) of the data.
	Iv []byte `protobuf:"bytes,2,opt,name=iv,proto3" json:"iv,omitempty"`
}

func (x *EncryptionMeta) Reset() {
	*x = EncryptionMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encryptionpb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptionMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptionMeta) ProtoMessage() {}

func (x *EncryptionMeta) ProtoReflect() protoreflect.Message {
	mi := &file_encryptionpb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptionMeta.ProtoReflect.Descriptor instead.
func (*EncryptionMeta) Descriptor() ([]byte, []int) {
	return file_encryptionpb_proto_rawDescGZIP(), []int{0}
}

func (x *EncryptionMeta) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *EncryptionMeta) GetIv() []byte {
	if x != nil {
		return x.Iv
	}
	return nil
}

// Information about an encrypted file.
type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the key used to encrypt the file.
	KeyId uint64 `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// Initialization vector (IV) of the file.
	Iv []byte `protobuf:"bytes,2,opt,name=iv,proto3" json:"iv,omitempty"`
	// Method of encryption algorithm used to encrypted the file.
	Method EncryptionMethod `protobuf:"varint,3,opt,name=method,proto3,enum=encryptionpb.EncryptionMethod" json:"method,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encryptionpb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_encryptionpb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_encryptionpb_proto_rawDescGZIP(), []int{1}
}

func (x *FileInfo) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *FileInfo) GetIv() []byte {
	if x != nil {
		return x.Iv
	}
	return nil
}

func (x *FileInfo) GetMethod() EncryptionMethod {
	if x != nil {
		return x.Method
	}
	return EncryptionMethod_UNKNOWN
}

type FileDictionary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A map of file name to file info.
	Files map[string]*FileInfo `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FileDictionary) Reset() {
	*x = FileDictionary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encryptionpb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDictionary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDictionary) ProtoMessage() {}

func (x *FileDictionary) ProtoReflect() protoreflect.Message {
	mi := &file_encryptionpb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDictionary.ProtoReflect.Descriptor instead.
func (*FileDictionary) Descriptor() ([]byte, []int) {
	return file_encryptionpb_proto_rawDescGZIP(), []int{2}
}

func (x *FileDictionary) GetFiles() map[string]*FileInfo {
	if x != nil {
		return x.Files
	}
	return nil
}

// The key used to encrypt the user data.
type DataKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A sequence of secret bytes used to encrypt data.
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Method of encryption algorithm used to encrypted data.
	Method EncryptionMethod `protobuf:"varint,2,opt,name=method,proto3,enum=encryptionpb.EncryptionMethod" json:"method,omitempty"`
	// Creation time of the key.
	CreationTime uint64 `protobuf:"varint,3,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	// A flag for the key have ever been exposed.
	WasExposed bool `protobuf:"varint,4,opt,name=was_exposed,json=wasExposed,proto3" json:"was_exposed,omitempty"`
}

func (x *DataKey) Reset() {
	*x = DataKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encryptionpb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataKey) ProtoMessage() {}

func (x *DataKey) ProtoReflect() protoreflect.Message {
	mi := &file_encryptionpb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataKey.ProtoReflect.Descriptor instead.
func (*DataKey) Descriptor() ([]byte, []int) {
	return file_encryptionpb_proto_rawDescGZIP(), []int{3}
}

func (x *DataKey) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DataKey) GetMethod() EncryptionMethod {
	if x != nil {
		return x.Method
	}
	return EncryptionMethod_UNKNOWN
}

func (x *DataKey) GetCreationTime() uint64 {
	if x != nil {
		return x.CreationTime
	}
	return 0
}

func (x *DataKey) GetWasExposed() bool {
	if x != nil {
		return x.WasExposed
	}
	return false
}

type KeyDictionary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A map of key ID to dat key.
	Keys map[uint64]*DataKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// ID of a key currently in use.
	CurrentKeyId uint64 `protobuf:"varint,2,opt,name=current_key_id,json=currentKeyId,proto3" json:"current_key_id,omitempty"`
}

func (x *KeyDictionary) Reset() {
	*x = KeyDictionary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encryptionpb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyDictionary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyDictionary) ProtoMessage() {}

func (x *KeyDictionary) ProtoReflect() protoreflect.Message {
	mi := &file_encryptionpb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyDictionary.ProtoReflect.Descriptor instead.
func (*KeyDictionary) Descriptor() ([]byte, []int) {
	return file_encryptionpb_proto_rawDescGZIP(), []int{4}
}

func (x *KeyDictionary) GetKeys() map[uint64]*DataKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *KeyDictionary) GetCurrentKeyId() uint64 {
	if x != nil {
		return x.CurrentKeyId
	}
	return 0
}

// Master key config.
type MasterKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Backend:
	//	*MasterKey_Plaintext
	//	*MasterKey_File
	//	*MasterKey_Kms
	Backend isMasterKey_Backend `protobuf_oneof:"backend"`
}

func (x *MasterKey) Reset() {
	*x = MasterKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encryptionpb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterKey) ProtoMessage() {}

func (x *MasterKey) ProtoReflect() protoreflect.Message {
	mi := &file_encryptionpb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterKey.ProtoReflect.Descriptor instead.
func (*MasterKey) Descriptor() ([]byte, []int) {
	return file_encryptionpb_proto_rawDescGZIP(), []int{5}
}

func (m *MasterKey) GetBackend() isMasterKey_Backend {
	if m != nil {
		return m.Backend
	}
	return nil
}

func (x *MasterKey) GetPlaintext() *MasterKeyPlaintext {
	if x, ok := x.GetBackend().(*MasterKey_Plaintext); ok {
		return x.Plaintext
	}
	return nil
}

func (x *MasterKey) GetFile() *MasterKeyFile {
	if x, ok := x.GetBackend().(*MasterKey_File); ok {
		return x.File
	}
	return nil
}

func (x *MasterKey) GetKms() *MasterKeyKms {
	if x, ok := x.GetBackend().(*MasterKey_Kms); ok {
		return x.Kms
	}
	return nil
}

type isMasterKey_Backend interface {
	isMasterKey_Backend()
}

type MasterKey_Plaintext struct {
	Plaintext *MasterKeyPlaintext `protobuf:"bytes,1,opt,name=plaintext,proto3,oneof"`
}

type MasterKey_File struct {
	File *MasterKeyFile `protobuf:"bytes,2,opt,name=file,proto3,oneof"`
}

type MasterKey_Kms struct {
	Kms *MasterKeyKms `protobuf:"bytes,3,opt,name=kms,proto3,oneof"`
}

func (*MasterKey_Plaintext) isMasterKey_Backend() {}

func (*MasterKey_File) isMasterKey_Backend() {}

func (*MasterKey_Kms) isMasterKey_Backend() {}

// MasterKeyPlaintext indicates content is stored as plaintext.
type MasterKeyPlaintext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MasterKeyPlaintext) Reset() {
	*x = MasterKeyPlaintext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encryptionpb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterKeyPlaintext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterKeyPlaintext) ProtoMessage() {}

func (x *MasterKeyPlaintext) ProtoReflect() protoreflect.Message {
	mi := &file_encryptionpb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterKeyPlaintext.ProtoReflect.Descriptor instead.
func (*MasterKeyPlaintext) Descriptor() ([]byte, []int) {
	return file_encryptionpb_proto_rawDescGZIP(), []int{6}
}

// MasterKeyFile is a master key backed by a file containing encryption key in human-readable
// hex format.
type MasterKeyFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Local file path.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *MasterKeyFile) Reset() {
	*x = MasterKeyFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encryptionpb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterKeyFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterKeyFile) ProtoMessage() {}

func (x *MasterKeyFile) ProtoReflect() protoreflect.Message {
	mi := &file_encryptionpb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterKeyFile.ProtoReflect.Descriptor instead.
func (*MasterKeyFile) Descriptor() ([]byte, []int) {
	return file_encryptionpb_proto_rawDescGZIP(), []int{7}
}

func (x *MasterKeyFile) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// MasterKeyKms is a master key backed by KMS service that manages the encryption key,
// and provide API to encrypt and decrypt a data key, which is used to encrypt the content.
type MasterKeyKms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// KMS vendor.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// KMS key id.
	KeyId string `protobuf:"bytes,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// KMS region.
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	// KMS endpoint. Normally not needed.
	Endpoint string `protobuf:"bytes,4,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *MasterKeyKms) Reset() {
	*x = MasterKeyKms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encryptionpb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterKeyKms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterKeyKms) ProtoMessage() {}

func (x *MasterKeyKms) ProtoReflect() protoreflect.Message {
	mi := &file_encryptionpb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterKeyKms.ProtoReflect.Descriptor instead.
func (*MasterKeyKms) Descriptor() ([]byte, []int) {
	return file_encryptionpb_proto_rawDescGZIP(), []int{8}
}

func (x *MasterKeyKms) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *MasterKeyKms) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *MasterKeyKms) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *MasterKeyKms) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

type EncryptedContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata of the encrypted content.
	// Eg. IV, method and KMS key ID
	// It is preferred to define new fields for extra metadata than using this metadata map.
	Metadata map[string][]byte `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Encrypted content.
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	// Master key used to encrypt the content.
	MasterKey *MasterKey `protobuf:"bytes,3,opt,name=master_key,json=masterKey,proto3" json:"master_key,omitempty"`
	// Initilization vector (IV) used.
	Iv []byte `protobuf:"bytes,4,opt,name=iv,proto3" json:"iv,omitempty"`
	// Encrypted data key generated by KMS and used to actually encrypt data.
	// Valid only when KMS is used.
	CiphertextKey []byte `protobuf:"bytes,5,opt,name=ciphertext_key,json=ciphertextKey,proto3" json:"ciphertext_key,omitempty"`
}

func (x *EncryptedContent) Reset() {
	*x = EncryptedContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encryptionpb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedContent) ProtoMessage() {}

func (x *EncryptedContent) ProtoReflect() protoreflect.Message {
	mi := &file_encryptionpb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedContent.ProtoReflect.Descriptor instead.
func (*EncryptedContent) Descriptor() ([]byte, []int) {
	return file_encryptionpb_proto_rawDescGZIP(), []int{9}
}

func (x *EncryptedContent) GetMetadata() map[string][]byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *EncryptedContent) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *EncryptedContent) GetMasterKey() *MasterKey {
	if x != nil {
		return x.MasterKey
	}
	return nil
}

func (x *EncryptedContent) GetIv() []byte {
	if x != nil {
		return x.Iv
	}
	return nil
}

func (x *EncryptedContent) GetCiphertextKey() []byte {
	if x != nil {
		return x.CiphertextKey
	}
	return nil
}

var File_encryptionpb_proto protoreflect.FileDescriptor

var file_encryptionpb_proto_rawDesc = []byte{
	0x0a, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x70, 0x62, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x72, 0x75, 0x73, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x37, 0x0a, 0x0e, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x6b,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02,
	0x69, 0x76, 0x22, 0x69, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15,
	0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x02, 0x69, 0x76, 0x12, 0x36, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xa1, 0x01,
	0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79,
	0x12, 0x3d, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x1a,
	0x50, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x99, 0x01, 0x0a, 0x07, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x36, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x77, 0x61, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x77, 0x61, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x22, 0xc0, 0x01,
	0x0a, 0x0d, 0x4b, 0x65, 0x79, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x12,
	0x39, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79,
	0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x1a, 0x4e, 0x0a, 0x09, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xbb, 0x01, 0x0a, 0x09, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x40,
	0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62,
	0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x31, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x6b, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x4b, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x03,
	0x6b, 0x6d, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x22, 0x14,
	0x0a, 0x12, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x50, 0x6c, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x22, 0x23, 0x0a, 0x0d, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x71, 0x0a, 0x0c, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x4b, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xa2, 0x02, 0x0a,
	0x10, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x48, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x70, 0x62, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x76, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78,
	0x74, 0x4b, 0x65, 0x79, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x2a, 0x5e, 0x0a, 0x10, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x45, 0x53, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x54, 0x52, 0x10,
	0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x45, 0x53, 0x31, 0x39, 0x32, 0x5f, 0x43, 0x54, 0x52, 0x10,
	0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x45, 0x53, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x54, 0x52, 0x10,
	0x04, 0x42, 0x5b, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x2e, 0x74, 0x69, 0x6b, 0x76, 0x2e, 0x6b, 0x76,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x70, 0x2f, 0x6b, 0x76, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6b, 0x69, 0x74, 0x65, 0x78, 0x5f, 0x67, 0x65,
	0x6e, 0x2f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0xe0, 0xe2,
	0x1e, 0x01, 0xc8, 0xe2, 0x1e, 0x01, 0xd0, 0xe2, 0x1e, 0x01, 0xd8, 0xa8, 0x08, 0x01, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_encryptionpb_proto_rawDescOnce sync.Once
	file_encryptionpb_proto_rawDescData = file_encryptionpb_proto_rawDesc
)

func file_encryptionpb_proto_rawDescGZIP() []byte {
	file_encryptionpb_proto_rawDescOnce.Do(func() {
		file_encryptionpb_proto_rawDescData = protoimpl.X.CompressGZIP(file_encryptionpb_proto_rawDescData)
	})
	return file_encryptionpb_proto_rawDescData
}

var file_encryptionpb_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_encryptionpb_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_encryptionpb_proto_goTypes = []interface{}{
	(EncryptionMethod)(0),      // 0: encryptionpb.EncryptionMethod
	(*EncryptionMeta)(nil),     // 1: encryptionpb.EncryptionMeta
	(*FileInfo)(nil),           // 2: encryptionpb.FileInfo
	(*FileDictionary)(nil),     // 3: encryptionpb.FileDictionary
	(*DataKey)(nil),            // 4: encryptionpb.DataKey
	(*KeyDictionary)(nil),      // 5: encryptionpb.KeyDictionary
	(*MasterKey)(nil),          // 6: encryptionpb.MasterKey
	(*MasterKeyPlaintext)(nil), // 7: encryptionpb.MasterKeyPlaintext
	(*MasterKeyFile)(nil),      // 8: encryptionpb.MasterKeyFile
	(*MasterKeyKms)(nil),       // 9: encryptionpb.MasterKeyKms
	(*EncryptedContent)(nil),   // 10: encryptionpb.EncryptedContent
	nil,                        // 11: encryptionpb.FileDictionary.FilesEntry
	nil,                        // 12: encryptionpb.KeyDictionary.KeysEntry
	nil,                        // 13: encryptionpb.EncryptedContent.MetadataEntry
}
var file_encryptionpb_proto_depIdxs = []int32{
	0,  // 0: encryptionpb.FileInfo.method:type_name -> encryptionpb.EncryptionMethod
	11, // 1: encryptionpb.FileDictionary.files:type_name -> encryptionpb.FileDictionary.FilesEntry
	0,  // 2: encryptionpb.DataKey.method:type_name -> encryptionpb.EncryptionMethod
	12, // 3: encryptionpb.KeyDictionary.keys:type_name -> encryptionpb.KeyDictionary.KeysEntry
	7,  // 4: encryptionpb.MasterKey.plaintext:type_name -> encryptionpb.MasterKeyPlaintext
	8,  // 5: encryptionpb.MasterKey.file:type_name -> encryptionpb.MasterKeyFile
	9,  // 6: encryptionpb.MasterKey.kms:type_name -> encryptionpb.MasterKeyKms
	13, // 7: encryptionpb.EncryptedContent.metadata:type_name -> encryptionpb.EncryptedContent.MetadataEntry
	6,  // 8: encryptionpb.EncryptedContent.master_key:type_name -> encryptionpb.MasterKey
	2,  // 9: encryptionpb.FileDictionary.FilesEntry.value:type_name -> encryptionpb.FileInfo
	4,  // 10: encryptionpb.KeyDictionary.KeysEntry.value:type_name -> encryptionpb.DataKey
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

// func init() { file_encryptionpb_proto_init() }
func file_encryptionpb_proto_init() {
	if File_encryptionpb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_encryptionpb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptionMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encryptionpb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encryptionpb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDictionary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encryptionpb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encryptionpb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyDictionary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encryptionpb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encryptionpb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterKeyPlaintext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encryptionpb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterKeyFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encryptionpb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterKeyKms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encryptionpb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_encryptionpb_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*MasterKey_Plaintext)(nil),
		(*MasterKey_File)(nil),
		(*MasterKey_Kms)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_encryptionpb_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_encryptionpb_proto_goTypes,
		DependencyIndexes: file_encryptionpb_proto_depIdxs,
		EnumInfos:         file_encryptionpb_proto_enumTypes,
		MessageInfos:      file_encryptionpb_proto_msgTypes,
	}.Build()
	File_encryptionpb_proto = out.File
	file_encryptionpb_proto_rawDesc = nil
	file_encryptionpb_proto_goTypes = nil
	file_encryptionpb_proto_depIdxs = nil
}

var _ context.Context

// Code generated by Kitex v0.1.2. DO NOT EDIT.
