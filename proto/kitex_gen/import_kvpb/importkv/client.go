// Code generated by Kitex v0.1.3. DO NOT EDIT.

package importkv

import (
	"context"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
	"github.com/cloudwego/kitex/pkg/streaming"
	"github.com/cloudwego/kitex/transport"
	"github.com/pingcap/kvproto/proto/kitex_gen/import_kvpb"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	SwitchMode(ctx context.Context, Req *import_kvpb.SwitchModeRequest, callOptions ...callopt.Option) (r *import_kvpb.SwitchModeResponse, err error)
	OpenEngine(ctx context.Context, Req *import_kvpb.OpenEngineRequest, callOptions ...callopt.Option) (r *import_kvpb.OpenEngineResponse, err error)
	WriteEngine(ctx context.Context, callOptions ...callopt.Option) (stream ImportKV_WriteEngineClient, err error)
	WriteEngineV3(ctx context.Context, Req *import_kvpb.WriteEngineV3Request, callOptions ...callopt.Option) (r *import_kvpb.WriteEngineResponse, err error)
	CloseEngine(ctx context.Context, Req *import_kvpb.CloseEngineRequest, callOptions ...callopt.Option) (r *import_kvpb.CloseEngineResponse, err error)
	ImportEngine(ctx context.Context, Req *import_kvpb.ImportEngineRequest, callOptions ...callopt.Option) (r *import_kvpb.ImportEngineResponse, err error)
	CleanupEngine(ctx context.Context, Req *import_kvpb.CleanupEngineRequest, callOptions ...callopt.Option) (r *import_kvpb.CleanupEngineResponse, err error)
	CompactCluster(ctx context.Context, Req *import_kvpb.CompactClusterRequest, callOptions ...callopt.Option) (r *import_kvpb.CompactClusterResponse, err error)
	GetVersion(ctx context.Context, Req *import_kvpb.GetVersionRequest, callOptions ...callopt.Option) (r *import_kvpb.GetVersionResponse, err error)
	GetMetrics(ctx context.Context, Req *import_kvpb.GetMetricsRequest, callOptions ...callopt.Option) (r *import_kvpb.GetMetricsResponse, err error)
}

type ImportKV_WriteEngineClient interface {
	streaming.Stream
	Send(*import_kvpb.WriteEngineRequest) error
	CloseAndRecv() (*import_kvpb.WriteEngineResponse, error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, client.WithTransportProtocol(transport.GRPC))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kImportKVClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kImportKVClient struct {
	*kClient
}

func (p *kImportKVClient) SwitchMode(ctx context.Context, Req *import_kvpb.SwitchModeRequest, callOptions ...callopt.Option) (r *import_kvpb.SwitchModeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SwitchMode(ctx, Req)
}

func (p *kImportKVClient) OpenEngine(ctx context.Context, Req *import_kvpb.OpenEngineRequest, callOptions ...callopt.Option) (r *import_kvpb.OpenEngineResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.OpenEngine(ctx, Req)
}

func (p *kImportKVClient) WriteEngine(ctx context.Context, callOptions ...callopt.Option) (stream ImportKV_WriteEngineClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.WriteEngine(ctx)
}

func (p *kImportKVClient) WriteEngineV3(ctx context.Context, Req *import_kvpb.WriteEngineV3Request, callOptions ...callopt.Option) (r *import_kvpb.WriteEngineResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.WriteEngineV3(ctx, Req)
}

func (p *kImportKVClient) CloseEngine(ctx context.Context, Req *import_kvpb.CloseEngineRequest, callOptions ...callopt.Option) (r *import_kvpb.CloseEngineResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CloseEngine(ctx, Req)
}

func (p *kImportKVClient) ImportEngine(ctx context.Context, Req *import_kvpb.ImportEngineRequest, callOptions ...callopt.Option) (r *import_kvpb.ImportEngineResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ImportEngine(ctx, Req)
}

func (p *kImportKVClient) CleanupEngine(ctx context.Context, Req *import_kvpb.CleanupEngineRequest, callOptions ...callopt.Option) (r *import_kvpb.CleanupEngineResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CleanupEngine(ctx, Req)
}

func (p *kImportKVClient) CompactCluster(ctx context.Context, Req *import_kvpb.CompactClusterRequest, callOptions ...callopt.Option) (r *import_kvpb.CompactClusterResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CompactCluster(ctx, Req)
}

func (p *kImportKVClient) GetVersion(ctx context.Context, Req *import_kvpb.GetVersionRequest, callOptions ...callopt.Option) (r *import_kvpb.GetVersionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetVersion(ctx, Req)
}

func (p *kImportKVClient) GetMetrics(ctx context.Context, Req *import_kvpb.GetMetricsRequest, callOptions ...callopt.Option) (r *import_kvpb.GetMetricsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetMetrics(ctx, Req)
}
