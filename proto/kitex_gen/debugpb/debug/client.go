// Code generated by Kitex v0.1.3. DO NOT EDIT.

package debug

import (
	"context"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
	"github.com/cloudwego/kitex/pkg/streaming"
	"github.com/cloudwego/kitex/transport"
	"github.com/pingcap/kvproto/proto/kitex_gen/debugpb"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Get(ctx context.Context, Req *debugpb.GetRequest, callOptions ...callopt.Option) (r *debugpb.GetResponse, err error)
	RaftLog(ctx context.Context, Req *debugpb.RaftLogRequest, callOptions ...callopt.Option) (r *debugpb.RaftLogResponse, err error)
	RegionInfo(ctx context.Context, Req *debugpb.RegionInfoRequest, callOptions ...callopt.Option) (r *debugpb.RegionInfoResponse, err error)
	RegionSize(ctx context.Context, Req *debugpb.RegionSizeRequest, callOptions ...callopt.Option) (r *debugpb.RegionSizeResponse, err error)
	ScanMvcc(ctx context.Context, Req *debugpb.ScanMvccRequest, callOptions ...callopt.Option) (stream Debug_ScanMvccClient, err error)
	Compact(ctx context.Context, Req *debugpb.CompactRequest, callOptions ...callopt.Option) (r *debugpb.CompactResponse, err error)
	InjectFailPoint(ctx context.Context, Req *debugpb.InjectFailPointRequest, callOptions ...callopt.Option) (r *debugpb.InjectFailPointResponse, err error)
	RecoverFailPoint(ctx context.Context, Req *debugpb.RecoverFailPointRequest, callOptions ...callopt.Option) (r *debugpb.RecoverFailPointResponse, err error)
	ListFailPoints(ctx context.Context, Req *debugpb.ListFailPointsRequest, callOptions ...callopt.Option) (r *debugpb.ListFailPointsResponse, err error)
	GetMetrics(ctx context.Context, Req *debugpb.GetMetricsRequest, callOptions ...callopt.Option) (r *debugpb.GetMetricsResponse, err error)
	CheckRegionConsistency(ctx context.Context, Req *debugpb.RegionConsistencyCheckRequest, callOptions ...callopt.Option) (r *debugpb.RegionConsistencyCheckResponse, err error)
	ModifyTikvConfig(ctx context.Context, Req *debugpb.ModifyTikvConfigRequest, callOptions ...callopt.Option) (r *debugpb.ModifyTikvConfigResponse, err error)
	GetRegionProperties(ctx context.Context, Req *debugpb.GetRegionPropertiesRequest, callOptions ...callopt.Option) (r *debugpb.GetRegionPropertiesResponse, err error)
	GetStoreInfo(ctx context.Context, Req *debugpb.GetStoreInfoRequest, callOptions ...callopt.Option) (r *debugpb.GetStoreInfoResponse, err error)
	GetClusterInfo(ctx context.Context, Req *debugpb.GetClusterInfoRequest, callOptions ...callopt.Option) (r *debugpb.GetClusterInfoResponse, err error)
	GetAllRegionsInStore(ctx context.Context, Req *debugpb.GetAllRegionsInStoreRequest, callOptions ...callopt.Option) (r *debugpb.GetAllRegionsInStoreResponse, err error)
}

type Debug_ScanMvccClient interface {
	streaming.Stream
	Recv() (*debugpb.ScanMvccResponse, error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, client.WithTransportProtocol(transport.GRPC))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kDebugClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kDebugClient struct {
	*kClient
}

func (p *kDebugClient) Get(ctx context.Context, Req *debugpb.GetRequest, callOptions ...callopt.Option) (r *debugpb.GetResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Get(ctx, Req)
}

func (p *kDebugClient) RaftLog(ctx context.Context, Req *debugpb.RaftLogRequest, callOptions ...callopt.Option) (r *debugpb.RaftLogResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RaftLog(ctx, Req)
}

func (p *kDebugClient) RegionInfo(ctx context.Context, Req *debugpb.RegionInfoRequest, callOptions ...callopt.Option) (r *debugpb.RegionInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RegionInfo(ctx, Req)
}

func (p *kDebugClient) RegionSize(ctx context.Context, Req *debugpb.RegionSizeRequest, callOptions ...callopt.Option) (r *debugpb.RegionSizeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RegionSize(ctx, Req)
}

func (p *kDebugClient) ScanMvcc(ctx context.Context, Req *debugpb.ScanMvccRequest, callOptions ...callopt.Option) (stream Debug_ScanMvccClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ScanMvcc(ctx, Req)
}

func (p *kDebugClient) Compact(ctx context.Context, Req *debugpb.CompactRequest, callOptions ...callopt.Option) (r *debugpb.CompactResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Compact(ctx, Req)
}

func (p *kDebugClient) InjectFailPoint(ctx context.Context, Req *debugpb.InjectFailPointRequest, callOptions ...callopt.Option) (r *debugpb.InjectFailPointResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.InjectFailPoint(ctx, Req)
}

func (p *kDebugClient) RecoverFailPoint(ctx context.Context, Req *debugpb.RecoverFailPointRequest, callOptions ...callopt.Option) (r *debugpb.RecoverFailPointResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RecoverFailPoint(ctx, Req)
}

func (p *kDebugClient) ListFailPoints(ctx context.Context, Req *debugpb.ListFailPointsRequest, callOptions ...callopt.Option) (r *debugpb.ListFailPointsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListFailPoints(ctx, Req)
}

func (p *kDebugClient) GetMetrics(ctx context.Context, Req *debugpb.GetMetricsRequest, callOptions ...callopt.Option) (r *debugpb.GetMetricsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetMetrics(ctx, Req)
}

func (p *kDebugClient) CheckRegionConsistency(ctx context.Context, Req *debugpb.RegionConsistencyCheckRequest, callOptions ...callopt.Option) (r *debugpb.RegionConsistencyCheckResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CheckRegionConsistency(ctx, Req)
}

func (p *kDebugClient) ModifyTikvConfig(ctx context.Context, Req *debugpb.ModifyTikvConfigRequest, callOptions ...callopt.Option) (r *debugpb.ModifyTikvConfigResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ModifyTikvConfig(ctx, Req)
}

func (p *kDebugClient) GetRegionProperties(ctx context.Context, Req *debugpb.GetRegionPropertiesRequest, callOptions ...callopt.Option) (r *debugpb.GetRegionPropertiesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetRegionProperties(ctx, Req)
}

func (p *kDebugClient) GetStoreInfo(ctx context.Context, Req *debugpb.GetStoreInfoRequest, callOptions ...callopt.Option) (r *debugpb.GetStoreInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetStoreInfo(ctx, Req)
}

func (p *kDebugClient) GetClusterInfo(ctx context.Context, Req *debugpb.GetClusterInfoRequest, callOptions ...callopt.Option) (r *debugpb.GetClusterInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetClusterInfo(ctx, Req)
}

func (p *kDebugClient) GetAllRegionsInStore(ctx context.Context, Req *debugpb.GetAllRegionsInStoreRequest, callOptions ...callopt.Option) (r *debugpb.GetAllRegionsInStoreResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetAllRegionsInStore(ctx, Req)
}
