// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.8.0
// source: enginepb.proto

package enginepb

import (
	context "context"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	metapb "github.com/pingcap/kvproto/proto/kitex_gen/metapb"
	raft_cmdpb "github.com/pingcap/kvproto/proto/kitex_gen/raft_cmdpb"
	raft_serverpb "github.com/pingcap/kvproto/proto/kitex_gen/raft_serverpb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommandRequestHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId uint64 `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	Index    uint64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Term     uint64 `protobuf:"varint,3,opt,name=term,proto3" json:"term,omitempty"`
	// Flush in-memory data to disk.
	SyncLog bool `protobuf:"varint,4,opt,name=sync_log,json=syncLog,proto3" json:"sync_log,omitempty"`
	// Destroy the region.
	Destroy bool `protobuf:"varint,5,opt,name=destroy,proto3" json:"destroy,omitempty"`
	// Additional information for the request.
	Context []byte `protobuf:"bytes,6,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *CommandRequestHeader) Reset() {
	*x = CommandRequestHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enginepb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandRequestHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRequestHeader) ProtoMessage() {}

func (x *CommandRequestHeader) ProtoReflect() protoreflect.Message {
	mi := &file_enginepb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRequestHeader.ProtoReflect.Descriptor instead.
func (*CommandRequestHeader) Descriptor() ([]byte, []int) {
	return file_enginepb_proto_rawDescGZIP(), []int{0}
}

func (x *CommandRequestHeader) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *CommandRequestHeader) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CommandRequestHeader) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *CommandRequestHeader) GetSyncLog() bool {
	if x != nil {
		return x.SyncLog
	}
	return false
}

func (x *CommandRequestHeader) GetDestroy() bool {
	if x != nil {
		return x.Destroy
	}
	return false
}

func (x *CommandRequestHeader) GetContext() []byte {
	if x != nil {
		return x.Context
	}
	return nil
}

type CommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *CommandRequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// kv put / delete
	Requests []*raft_cmdpb.Request `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
	// region metadata manipulation command.
	AdminRequest *raft_cmdpb.AdminRequest `protobuf:"bytes,3,opt,name=admin_request,json=adminRequest,proto3" json:"admin_request,omitempty"`
	// region metadata manipulation result.
	AdminResponse *raft_cmdpb.AdminResponse `protobuf:"bytes,4,opt,name=admin_response,json=adminResponse,proto3" json:"admin_response,omitempty"`
}

func (x *CommandRequest) Reset() {
	*x = CommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enginepb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRequest) ProtoMessage() {}

func (x *CommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_enginepb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRequest.ProtoReflect.Descriptor instead.
func (*CommandRequest) Descriptor() ([]byte, []int) {
	return file_enginepb_proto_rawDescGZIP(), []int{1}
}

func (x *CommandRequest) GetHeader() *CommandRequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CommandRequest) GetRequests() []*raft_cmdpb.Request {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *CommandRequest) GetAdminRequest() *raft_cmdpb.AdminRequest {
	if x != nil {
		return x.AdminRequest
	}
	return nil
}

func (x *CommandRequest) GetAdminResponse() *raft_cmdpb.AdminResponse {
	if x != nil {
		return x.AdminResponse
	}
	return nil
}

type CommandRequestBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*CommandRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *CommandRequestBatch) Reset() {
	*x = CommandRequestBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enginepb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandRequestBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRequestBatch) ProtoMessage() {}

func (x *CommandRequestBatch) ProtoReflect() protoreflect.Message {
	mi := &file_enginepb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRequestBatch.ProtoReflect.Descriptor instead.
func (*CommandRequestBatch) Descriptor() ([]byte, []int) {
	return file_enginepb_proto_rawDescGZIP(), []int{2}
}

func (x *CommandRequestBatch) GetRequests() []*CommandRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type CommandResponseHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId uint64 `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// Region is destroyed.
	Destroyed bool `protobuf:"varint,2,opt,name=destroyed,proto3" json:"destroyed,omitempty"`
}

func (x *CommandResponseHeader) Reset() {
	*x = CommandResponseHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enginepb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandResponseHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandResponseHeader) ProtoMessage() {}

func (x *CommandResponseHeader) ProtoReflect() protoreflect.Message {
	mi := &file_enginepb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandResponseHeader.ProtoReflect.Descriptor instead.
func (*CommandResponseHeader) Descriptor() ([]byte, []int) {
	return file_enginepb_proto_rawDescGZIP(), []int{3}
}

func (x *CommandResponseHeader) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *CommandResponseHeader) GetDestroyed() bool {
	if x != nil {
		return x.Destroyed
	}
	return false
}

type CommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header      *CommandResponseHeader        `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	ApplyState  *raft_serverpb.RaftApplyState `protobuf:"bytes,2,opt,name=apply_state,json=applyState,proto3" json:"apply_state,omitempty"`
	AppliedTerm uint64                        `protobuf:"varint,3,opt,name=applied_term,json=appliedTerm,proto3" json:"applied_term,omitempty"`
}

func (x *CommandResponse) Reset() {
	*x = CommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enginepb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandResponse) ProtoMessage() {}

func (x *CommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_enginepb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandResponse.ProtoReflect.Descriptor instead.
func (*CommandResponse) Descriptor() ([]byte, []int) {
	return file_enginepb_proto_rawDescGZIP(), []int{4}
}

func (x *CommandResponse) GetHeader() *CommandResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CommandResponse) GetApplyState() *raft_serverpb.RaftApplyState {
	if x != nil {
		return x.ApplyState
	}
	return nil
}

func (x *CommandResponse) GetAppliedTerm() uint64 {
	if x != nil {
		return x.AppliedTerm
	}
	return 0
}

type CommandResponseBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Responses []*CommandResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *CommandResponseBatch) Reset() {
	*x = CommandResponseBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enginepb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandResponseBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandResponseBatch) ProtoMessage() {}

func (x *CommandResponseBatch) ProtoReflect() protoreflect.Message {
	mi := &file_enginepb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandResponseBatch.ProtoReflect.Descriptor instead.
func (*CommandResponseBatch) Descriptor() ([]byte, []int) {
	return file_enginepb_proto_rawDescGZIP(), []int{5}
}

func (x *CommandResponseBatch) GetResponses() []*CommandResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type SnapshotState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region     *metapb.Region                `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	Peer       *metapb.Peer                  `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
	ApplyState *raft_serverpb.RaftApplyState `protobuf:"bytes,3,opt,name=apply_state,json=applyState,proto3" json:"apply_state,omitempty"`
}

func (x *SnapshotState) Reset() {
	*x = SnapshotState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enginepb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotState) ProtoMessage() {}

func (x *SnapshotState) ProtoReflect() protoreflect.Message {
	mi := &file_enginepb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotState.ProtoReflect.Descriptor instead.
func (*SnapshotState) Descriptor() ([]byte, []int) {
	return file_enginepb_proto_rawDescGZIP(), []int{6}
}

func (x *SnapshotState) GetRegion() *metapb.Region {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *SnapshotState) GetPeer() *metapb.Peer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *SnapshotState) GetApplyState() *raft_serverpb.RaftApplyState {
	if x != nil {
		return x.ApplyState
	}
	return nil
}

type SnapshotData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cf       string                    `protobuf:"bytes,1,opt,name=cf,proto3" json:"cf,omitempty"`
	Checksum uint32                    `protobuf:"varint,2,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Data     []*raft_serverpb.KeyValue `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *SnapshotData) Reset() {
	*x = SnapshotData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enginepb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotData) ProtoMessage() {}

func (x *SnapshotData) ProtoReflect() protoreflect.Message {
	mi := &file_enginepb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotData.ProtoReflect.Descriptor instead.
func (*SnapshotData) Descriptor() ([]byte, []int) {
	return file_enginepb_proto_rawDescGZIP(), []int{7}
}

func (x *SnapshotData) GetCf() string {
	if x != nil {
		return x.Cf
	}
	return ""
}

func (x *SnapshotData) GetChecksum() uint32 {
	if x != nil {
		return x.Checksum
	}
	return 0
}

func (x *SnapshotData) GetData() []*raft_serverpb.KeyValue {
	if x != nil {
		return x.Data
	}
	return nil
}

type SnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Chunk:
	//	*SnapshotRequest_State
	//	*SnapshotRequest_Data
	Chunk isSnapshotRequest_Chunk `protobuf_oneof:"chunk"`
}

func (x *SnapshotRequest) Reset() {
	*x = SnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enginepb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotRequest) ProtoMessage() {}

func (x *SnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_enginepb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotRequest.ProtoReflect.Descriptor instead.
func (*SnapshotRequest) Descriptor() ([]byte, []int) {
	return file_enginepb_proto_rawDescGZIP(), []int{8}
}

func (m *SnapshotRequest) GetChunk() isSnapshotRequest_Chunk {
	if m != nil {
		return m.Chunk
	}
	return nil
}

func (x *SnapshotRequest) GetState() *SnapshotState {
	if x, ok := x.GetChunk().(*SnapshotRequest_State); ok {
		return x.State
	}
	return nil
}

func (x *SnapshotRequest) GetData() *SnapshotData {
	if x, ok := x.GetChunk().(*SnapshotRequest_Data); ok {
		return x.Data
	}
	return nil
}

type isSnapshotRequest_Chunk interface {
	isSnapshotRequest_Chunk()
}

type SnapshotRequest_State struct {
	// The first message for snapshots.
	// It contains the latest region information after applied snapshot.
	State *SnapshotState `protobuf:"bytes,1,opt,name=state,proto3,oneof"`
}

type SnapshotRequest_Data struct {
	// Following messages are always data.
	Data *SnapshotData `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*SnapshotRequest_State) isSnapshotRequest_Chunk() {}

func (*SnapshotRequest_Data) isSnapshotRequest_Chunk() {}

type SnapshotDone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SnapshotDone) Reset() {
	*x = SnapshotDone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enginepb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotDone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotDone) ProtoMessage() {}

func (x *SnapshotDone) ProtoReflect() protoreflect.Message {
	mi := &file_enginepb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotDone.ProtoReflect.Descriptor instead.
func (*SnapshotDone) Descriptor() ([]byte, []int) {
	return file_enginepb_proto_rawDescGZIP(), []int{9}
}

var File_enginepb_proto protoreflect.FileDescriptor

var file_enginepb_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x70, 0x62, 0x1a, 0x0c, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63,
	0x6d, 0x64, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x72, 0x61, 0x66, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xac, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x4c, 0x6f, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xfa,
	0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x36, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x61,
	0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x0a, 0x13, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x34, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x52, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x22, 0xad, 0x01, 0x0a,
	0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0b, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x52,
	0x61, 0x66, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x22, 0x4f, 0x0a, 0x14,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x99, 0x01,
	0x0a, 0x0d, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x26, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0b, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x52,
	0x61, 0x66, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x67, 0x0a, 0x0c, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x63, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x79, 0x0a, 0x0f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x70, 0x62, 0x2e,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x70, 0x62, 0x2e,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x0e, 0x0a,
	0x0c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x32, 0xaa, 0x01,
	0x0a, 0x06, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1d, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x1e, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x12, 0x46, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x12, 0x19, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x70, 0x62, 0x2e, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x70, 0x62, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x22, 0x00, 0x28, 0x01, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x70,
	0x2f, 0x6b, 0x76, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6b,
	0x69, 0x74, 0x65, 0x78, 0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_enginepb_proto_rawDescOnce sync.Once
	file_enginepb_proto_rawDescData = file_enginepb_proto_rawDesc
)

func file_enginepb_proto_rawDescGZIP() []byte {
	file_enginepb_proto_rawDescOnce.Do(func() {
		file_enginepb_proto_rawDescData = protoimpl.X.CompressGZIP(file_enginepb_proto_rawDescData)
	})
	return file_enginepb_proto_rawDescData
}

var file_enginepb_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_enginepb_proto_goTypes = []interface{}{
	(*CommandRequestHeader)(nil),         // 0: enginepb.CommandRequestHeader
	(*CommandRequest)(nil),               // 1: enginepb.CommandRequest
	(*CommandRequestBatch)(nil),          // 2: enginepb.CommandRequestBatch
	(*CommandResponseHeader)(nil),        // 3: enginepb.CommandResponseHeader
	(*CommandResponse)(nil),              // 4: enginepb.CommandResponse
	(*CommandResponseBatch)(nil),         // 5: enginepb.CommandResponseBatch
	(*SnapshotState)(nil),                // 6: enginepb.SnapshotState
	(*SnapshotData)(nil),                 // 7: enginepb.SnapshotData
	(*SnapshotRequest)(nil),              // 8: enginepb.SnapshotRequest
	(*SnapshotDone)(nil),                 // 9: enginepb.SnapshotDone
	(*raft_cmdpb.Request)(nil),           // 10: raft_cmdpb.Request
	(*raft_cmdpb.AdminRequest)(nil),      // 11: raft_cmdpb.AdminRequest
	(*raft_cmdpb.AdminResponse)(nil),     // 12: raft_cmdpb.AdminResponse
	(*raft_serverpb.RaftApplyState)(nil), // 13: raft_serverpb.RaftApplyState
	(*metapb.Region)(nil),                // 14: metapb.Region
	(*metapb.Peer)(nil),                  // 15: metapb.Peer
	(*raft_serverpb.KeyValue)(nil),       // 16: raft_serverpb.KeyValue
}
var file_enginepb_proto_depIdxs = []int32{
	0,  // 0: enginepb.CommandRequest.header:type_name -> enginepb.CommandRequestHeader
	10, // 1: enginepb.CommandRequest.requests:type_name -> raft_cmdpb.Request
	11, // 2: enginepb.CommandRequest.admin_request:type_name -> raft_cmdpb.AdminRequest
	12, // 3: enginepb.CommandRequest.admin_response:type_name -> raft_cmdpb.AdminResponse
	1,  // 4: enginepb.CommandRequestBatch.requests:type_name -> enginepb.CommandRequest
	3,  // 5: enginepb.CommandResponse.header:type_name -> enginepb.CommandResponseHeader
	13, // 6: enginepb.CommandResponse.apply_state:type_name -> raft_serverpb.RaftApplyState
	4,  // 7: enginepb.CommandResponseBatch.responses:type_name -> enginepb.CommandResponse
	14, // 8: enginepb.SnapshotState.region:type_name -> metapb.Region
	15, // 9: enginepb.SnapshotState.peer:type_name -> metapb.Peer
	13, // 10: enginepb.SnapshotState.apply_state:type_name -> raft_serverpb.RaftApplyState
	16, // 11: enginepb.SnapshotData.data:type_name -> raft_serverpb.KeyValue
	6,  // 12: enginepb.SnapshotRequest.state:type_name -> enginepb.SnapshotState
	7,  // 13: enginepb.SnapshotRequest.data:type_name -> enginepb.SnapshotData
	2,  // 14: enginepb.Engine.ApplyCommandBatch:input_type -> enginepb.CommandRequestBatch
	8,  // 15: enginepb.Engine.ApplySnapshot:input_type -> enginepb.SnapshotRequest
	5,  // 16: enginepb.Engine.ApplyCommandBatch:output_type -> enginepb.CommandResponseBatch
	9,  // 17: enginepb.Engine.ApplySnapshot:output_type -> enginepb.SnapshotDone
	16, // [16:18] is the sub-list for method output_type
	14, // [14:16] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_enginepb_proto_init() }
func file_enginepb_proto_init() {
	if File_enginepb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_enginepb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandRequestHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enginepb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enginepb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandRequestBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enginepb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandResponseHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enginepb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enginepb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandResponseBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enginepb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enginepb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enginepb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enginepb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotDone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_enginepb_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*SnapshotRequest_State)(nil),
		(*SnapshotRequest_Data)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_enginepb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_enginepb_proto_goTypes,
		DependencyIndexes: file_enginepb_proto_depIdxs,
		MessageInfos:      file_enginepb_proto_msgTypes,
	}.Build()
	File_enginepb_proto = out.File
	file_enginepb_proto_rawDesc = nil
	file_enginepb_proto_goTypes = nil
	file_enginepb_proto_depIdxs = nil
}

var _ context.Context

// Code generated by Kitex v0.1.3. DO NOT EDIT.

type Engine interface {
	ApplyCommandBatch(stream Engine_ApplyCommandBatchServer) (err error)
	ApplySnapshot(stream Engine_ApplySnapshotServer) (err error)
}

type Engine_ApplyCommandBatchServer interface {
	streaming.Stream
	Recv() (*CommandRequestBatch, error)
	Send(*CommandResponseBatch) error
}

type Engine_ApplySnapshotServer interface {
	streaming.Stream
	Recv() (*SnapshotRequest, error)
	SendAndClose(*SnapshotDone) error
}
