// Code generated by Kitex v0.1.3. DO NOT EDIT.

package engine

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"github.com/pingcap/kvproto/proto/kitex_gen/enginepb"
	"google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return engineServiceInfo
}

var engineServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Engine"
	handlerType := (*enginepb.Engine)(nil)
	methods := map[string]kitex.MethodInfo{
		"ApplyCommandBatch": kitex.NewMethodInfo(applyCommandBatchHandler, newApplyCommandBatchArgs, newApplyCommandBatchResult, false),
		"ApplySnapshot":     kitex.NewMethodInfo(applySnapshotHandler, newApplySnapshotArgs, newApplySnapshotResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "enginepb",
	}
	extra["streaming"] = true
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.1.3",
		Extra:           extra,
	}
	return svcInfo
}

func applyCommandBatchHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st := arg.(*streaming.Args).Stream
	stream := &engineApplyCommandBatchServer{st}
	return handler.(enginepb.Engine).ApplyCommandBatch(stream)
}

type engineApplyCommandBatchClient struct {
	streaming.Stream
}

func (x *engineApplyCommandBatchClient) Send(m *enginepb.CommandRequestBatch) error {
	return x.Stream.SendMsg(m)
}
func (x *engineApplyCommandBatchClient) Recv() (*enginepb.CommandResponseBatch, error) {
	m := new(enginepb.CommandResponseBatch)
	return m, x.Stream.RecvMsg(m)
}

type engineApplyCommandBatchServer struct {
	streaming.Stream
}

func (x *engineApplyCommandBatchServer) Send(m *enginepb.CommandResponseBatch) error {
	return x.Stream.SendMsg(m)
}

func (x *engineApplyCommandBatchServer) Recv() (*enginepb.CommandRequestBatch, error) {
	m := new(enginepb.CommandRequestBatch)
	return m, x.Stream.RecvMsg(m)
}

func newApplyCommandBatchArgs() interface{} {
	return &ApplyCommandBatchArgs{}
}

func newApplyCommandBatchResult() interface{} {
	return &ApplyCommandBatchResult{}
}

type ApplyCommandBatchArgs struct {
	Req *enginepb.CommandRequestBatch
}

func (p *ApplyCommandBatchArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ApplyCommandBatchArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ApplyCommandBatchArgs) Unmarshal(in []byte) error {
	msg := new(enginepb.CommandRequestBatch)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ApplyCommandBatchArgs_Req_DEFAULT *enginepb.CommandRequestBatch

func (p *ApplyCommandBatchArgs) GetReq() *enginepb.CommandRequestBatch {
	if !p.IsSetReq() {
		return ApplyCommandBatchArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ApplyCommandBatchArgs) IsSetReq() bool {
	return p.Req != nil
}

type ApplyCommandBatchResult struct {
	Success *enginepb.CommandResponseBatch
}

var ApplyCommandBatchResult_Success_DEFAULT *enginepb.CommandResponseBatch

func (p *ApplyCommandBatchResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ApplyCommandBatchResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ApplyCommandBatchResult) Unmarshal(in []byte) error {
	msg := new(enginepb.CommandResponseBatch)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ApplyCommandBatchResult) GetSuccess() *enginepb.CommandResponseBatch {
	if !p.IsSetSuccess() {
		return ApplyCommandBatchResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ApplyCommandBatchResult) SetSuccess(x interface{}) {
	p.Success = x.(*enginepb.CommandResponseBatch)
}

func (p *ApplyCommandBatchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func applySnapshotHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st := arg.(*streaming.Args).Stream
	stream := &engineApplySnapshotServer{st}
	return handler.(enginepb.Engine).ApplySnapshot(stream)
}

type engineApplySnapshotClient struct {
	streaming.Stream
}

func (x *engineApplySnapshotClient) Send(m *enginepb.SnapshotRequest) error {
	return x.Stream.SendMsg(m)
}
func (x *engineApplySnapshotClient) CloseAndRecv() (*enginepb.SnapshotDone, error) {
	if err := x.Stream.Close(); err != nil {
		return nil, err
	}
	m := new(enginepb.SnapshotDone)
	return m, x.Stream.RecvMsg(m)
}

type engineApplySnapshotServer struct {
	streaming.Stream
}

func (x *engineApplySnapshotServer) SendAndClose(m *enginepb.SnapshotDone) error {
	return x.Stream.SendMsg(m)
}

func (x *engineApplySnapshotServer) Recv() (*enginepb.SnapshotRequest, error) {
	m := new(enginepb.SnapshotRequest)
	return m, x.Stream.RecvMsg(m)
}

func newApplySnapshotArgs() interface{} {
	return &ApplySnapshotArgs{}
}

func newApplySnapshotResult() interface{} {
	return &ApplySnapshotResult{}
}

type ApplySnapshotArgs struct {
	Req *enginepb.SnapshotRequest
}

func (p *ApplySnapshotArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ApplySnapshotArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ApplySnapshotArgs) Unmarshal(in []byte) error {
	msg := new(enginepb.SnapshotRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ApplySnapshotArgs_Req_DEFAULT *enginepb.SnapshotRequest

func (p *ApplySnapshotArgs) GetReq() *enginepb.SnapshotRequest {
	if !p.IsSetReq() {
		return ApplySnapshotArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ApplySnapshotArgs) IsSetReq() bool {
	return p.Req != nil
}

type ApplySnapshotResult struct {
	Success *enginepb.SnapshotDone
}

var ApplySnapshotResult_Success_DEFAULT *enginepb.SnapshotDone

func (p *ApplySnapshotResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ApplySnapshotResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ApplySnapshotResult) Unmarshal(in []byte) error {
	msg := new(enginepb.SnapshotDone)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ApplySnapshotResult) GetSuccess() *enginepb.SnapshotDone {
	if !p.IsSetSuccess() {
		return ApplySnapshotResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ApplySnapshotResult) SetSuccess(x interface{}) {
	p.Success = x.(*enginepb.SnapshotDone)
}

func (p *ApplySnapshotResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ApplyCommandBatch(ctx context.Context) (Engine_ApplyCommandBatchClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "ApplyCommandBatch", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &engineApplyCommandBatchClient{res.Stream}
	return stream, nil
}

func (p *kClient) ApplySnapshot(ctx context.Context) (Engine_ApplySnapshotClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "ApplySnapshot", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &engineApplySnapshotClient{res.Stream}
	return stream, nil
}
