// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.8.0
// source: raft_cmdpb.proto

package raft_cmdpb

import (
	context "context"
	eraftpb "github.com/pingcap/kvproto/proto/kitex_gen/eraftpb"
	errorpb "github.com/pingcap/kvproto/proto/kitex_gen/errorpb"
	import_sstpb "github.com/pingcap/kvproto/proto/kitex_gen/import_sstpb"
	kvrpcpb "github.com/pingcap/kvproto/proto/kitex_gen/kvrpcpb"
	metapb "github.com/pingcap/kvproto/proto/kitex_gen/metapb"
	_ "github.com/pingcap/kvproto/proto/kitex_gen/rustproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CmdType int32

const (
	CmdType_Invalid     CmdType = 0
	CmdType_Get         CmdType = 1
	CmdType_Put         CmdType = 3
	CmdType_Delete      CmdType = 4
	CmdType_Snap        CmdType = 5
	CmdType_Prewrite    CmdType = 6
	CmdType_DeleteRange CmdType = 7
	CmdType_IngestSST   CmdType = 8
	CmdType_ReadIndex   CmdType = 9
)

// Enum value maps for CmdType.
var (
	CmdType_name = map[int32]string{
		0: "Invalid",
		1: "Get",
		3: "Put",
		4: "Delete",
		5: "Snap",
		6: "Prewrite",
		7: "DeleteRange",
		8: "IngestSST",
		9: "ReadIndex",
	}
	CmdType_value = map[string]int32{
		"Invalid":     0,
		"Get":         1,
		"Put":         3,
		"Delete":      4,
		"Snap":        5,
		"Prewrite":    6,
		"DeleteRange": 7,
		"IngestSST":   8,
		"ReadIndex":   9,
	}
)

func (x CmdType) Enum() *CmdType {
	p := new(CmdType)
	*p = x
	return p
}

func (x CmdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CmdType) Descriptor() protoreflect.EnumDescriptor {
	return file_raft_cmdpb_proto_enumTypes[0].Descriptor()
}

func (CmdType) Type() protoreflect.EnumType {
	return &file_raft_cmdpb_proto_enumTypes[0]
}

func (x CmdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CmdType.Descriptor instead.
func (CmdType) EnumDescriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{0}
}

type AdminCmdType int32

const (
	AdminCmdType_InvalidAdmin AdminCmdType = 0
	AdminCmdType_ChangePeer   AdminCmdType = 1
	// Use `BatchSplit` instead.
	//
	// Deprecated: Do not use.
	AdminCmdType_Split          AdminCmdType = 2
	AdminCmdType_CompactLog     AdminCmdType = 3
	AdminCmdType_TransferLeader AdminCmdType = 4
	AdminCmdType_ComputeHash    AdminCmdType = 5
	AdminCmdType_VerifyHash     AdminCmdType = 6
	AdminCmdType_PrepareMerge   AdminCmdType = 7
	AdminCmdType_CommitMerge    AdminCmdType = 8
	AdminCmdType_RollbackMerge  AdminCmdType = 9
	AdminCmdType_BatchSplit     AdminCmdType = 10
	AdminCmdType_ChangePeerV2   AdminCmdType = 11
)

// Enum value maps for AdminCmdType.
var (
	AdminCmdType_name = map[int32]string{
		0:  "InvalidAdmin",
		1:  "ChangePeer",
		2:  "Split",
		3:  "CompactLog",
		4:  "TransferLeader",
		5:  "ComputeHash",
		6:  "VerifyHash",
		7:  "PrepareMerge",
		8:  "CommitMerge",
		9:  "RollbackMerge",
		10: "BatchSplit",
		11: "ChangePeerV2",
	}
	AdminCmdType_value = map[string]int32{
		"InvalidAdmin":   0,
		"ChangePeer":     1,
		"Split":          2,
		"CompactLog":     3,
		"TransferLeader": 4,
		"ComputeHash":    5,
		"VerifyHash":     6,
		"PrepareMerge":   7,
		"CommitMerge":    8,
		"RollbackMerge":  9,
		"BatchSplit":     10,
		"ChangePeerV2":   11,
	}
)

func (x AdminCmdType) Enum() *AdminCmdType {
	p := new(AdminCmdType)
	*p = x
	return p
}

func (x AdminCmdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdminCmdType) Descriptor() protoreflect.EnumDescriptor {
	return file_raft_cmdpb_proto_enumTypes[1].Descriptor()
}

func (AdminCmdType) Type() protoreflect.EnumType {
	return &file_raft_cmdpb_proto_enumTypes[1]
}

func (x AdminCmdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdminCmdType.Descriptor instead.
func (AdminCmdType) EnumDescriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{1}
}

type StatusCmdType int32

const (
	StatusCmdType_InvalidStatus StatusCmdType = 0
	StatusCmdType_RegionLeader  StatusCmdType = 1
	StatusCmdType_RegionDetail  StatusCmdType = 2
)

// Enum value maps for StatusCmdType.
var (
	StatusCmdType_name = map[int32]string{
		0: "InvalidStatus",
		1: "RegionLeader",
		2: "RegionDetail",
	}
	StatusCmdType_value = map[string]int32{
		"InvalidStatus": 0,
		"RegionLeader":  1,
		"RegionDetail":  2,
	}
)

func (x StatusCmdType) Enum() *StatusCmdType {
	p := new(StatusCmdType)
	*p = x
	return p
}

func (x StatusCmdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusCmdType) Descriptor() protoreflect.EnumDescriptor {
	return file_raft_cmdpb_proto_enumTypes[2].Descriptor()
}

func (StatusCmdType) Type() protoreflect.EnumType {
	return &file_raft_cmdpb_proto_enumTypes[2]
}

func (x StatusCmdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusCmdType.Descriptor instead.
func (StatusCmdType) EnumDescriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{2}
}

type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cf  string `protobuf:"bytes,1,opt,name=cf,proto3" json:"cf,omitempty"`
	Key []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{0}
}

func (x *GetRequest) GetCf() string {
	if x != nil {
		return x.Cf
	}
	return ""
}

func (x *GetRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type GetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{1}
}

func (x *GetResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type PutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cf    string `protobuf:"bytes,1,opt,name=cf,proto3" json:"cf,omitempty"`
	Key   []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PutRequest) Reset() {
	*x = PutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutRequest) ProtoMessage() {}

func (x *PutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutRequest.ProtoReflect.Descriptor instead.
func (*PutRequest) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{2}
}

func (x *PutRequest) GetCf() string {
	if x != nil {
		return x.Cf
	}
	return ""
}

func (x *PutRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *PutRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type PutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PutResponse) Reset() {
	*x = PutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutResponse) ProtoMessage() {}

func (x *PutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutResponse.ProtoReflect.Descriptor instead.
func (*PutResponse) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{3}
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cf  string `protobuf:"bytes,1,opt,name=cf,proto3" json:"cf,omitempty"`
	Key []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteRequest) GetCf() string {
	if x != nil {
		return x.Cf
	}
	return ""
}

func (x *DeleteRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type DeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{5}
}

type DeleteRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cf         string `protobuf:"bytes,1,opt,name=cf,proto3" json:"cf,omitempty"`
	StartKey   []byte `protobuf:"bytes,2,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	EndKey     []byte `protobuf:"bytes,3,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
	NotifyOnly bool   `protobuf:"varint,4,opt,name=notify_only,json=notifyOnly,proto3" json:"notify_only,omitempty"`
}

func (x *DeleteRangeRequest) Reset() {
	*x = DeleteRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRangeRequest) ProtoMessage() {}

func (x *DeleteRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRangeRequest.ProtoReflect.Descriptor instead.
func (*DeleteRangeRequest) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteRangeRequest) GetCf() string {
	if x != nil {
		return x.Cf
	}
	return ""
}

func (x *DeleteRangeRequest) GetStartKey() []byte {
	if x != nil {
		return x.StartKey
	}
	return nil
}

func (x *DeleteRangeRequest) GetEndKey() []byte {
	if x != nil {
		return x.EndKey
	}
	return nil
}

func (x *DeleteRangeRequest) GetNotifyOnly() bool {
	if x != nil {
		return x.NotifyOnly
	}
	return false
}

type DeleteRangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteRangeResponse) Reset() {
	*x = DeleteRangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRangeResponse) ProtoMessage() {}

func (x *DeleteRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRangeResponse.ProtoReflect.Descriptor instead.
func (*DeleteRangeResponse) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{7}
}

type SnapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SnapRequest) Reset() {
	*x = SnapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapRequest) ProtoMessage() {}

func (x *SnapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapRequest.ProtoReflect.Descriptor instead.
func (*SnapRequest) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{8}
}

type SnapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region *metapb.Region `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *SnapResponse) Reset() {
	*x = SnapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapResponse) ProtoMessage() {}

func (x *SnapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapResponse.ProtoReflect.Descriptor instead.
func (*SnapResponse) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{9}
}

func (x *SnapResponse) GetRegion() *metapb.Region {
	if x != nil {
		return x.Region
	}
	return nil
}

type PrewriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Lock  []byte `protobuf:"bytes,3,opt,name=lock,proto3" json:"lock,omitempty"`
}

func (x *PrewriteRequest) Reset() {
	*x = PrewriteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrewriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrewriteRequest) ProtoMessage() {}

func (x *PrewriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrewriteRequest.ProtoReflect.Descriptor instead.
func (*PrewriteRequest) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{10}
}

func (x *PrewriteRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *PrewriteRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PrewriteRequest) GetLock() []byte {
	if x != nil {
		return x.Lock
	}
	return nil
}

type PrewriteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PrewriteResponse) Reset() {
	*x = PrewriteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrewriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrewriteResponse) ProtoMessage() {}

func (x *PrewriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrewriteResponse.ProtoReflect.Descriptor instead.
func (*PrewriteResponse) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{11}
}

type IngestSSTRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sst *import_sstpb.SSTMeta `protobuf:"bytes,1,opt,name=sst,proto3" json:"sst,omitempty"`
}

func (x *IngestSSTRequest) Reset() {
	*x = IngestSSTRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestSSTRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestSSTRequest) ProtoMessage() {}

func (x *IngestSSTRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestSSTRequest.ProtoReflect.Descriptor instead.
func (*IngestSSTRequest) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{12}
}

func (x *IngestSSTRequest) GetSst() *import_sstpb.SSTMeta {
	if x != nil {
		return x.Sst
	}
	return nil
}

type IngestSSTResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IngestSSTResponse) Reset() {
	*x = IngestSSTResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestSSTResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestSSTResponse) ProtoMessage() {}

func (x *IngestSSTResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestSSTResponse.ProtoReflect.Descriptor instead.
func (*IngestSSTResponse) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{13}
}

type ReadIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// In replica read, leader uses start_ts and key_ranges to check memory locks.
	StartTs   uint64              `protobuf:"varint,1,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	KeyRanges []*kvrpcpb.KeyRange `protobuf:"bytes,2,rep,name=key_ranges,json=keyRanges,proto3" json:"key_ranges,omitempty"`
}

func (x *ReadIndexRequest) Reset() {
	*x = ReadIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadIndexRequest) ProtoMessage() {}

func (x *ReadIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadIndexRequest.ProtoReflect.Descriptor instead.
func (*ReadIndexRequest) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{14}
}

func (x *ReadIndexRequest) GetStartTs() uint64 {
	if x != nil {
		return x.StartTs
	}
	return 0
}

func (x *ReadIndexRequest) GetKeyRanges() []*kvrpcpb.KeyRange {
	if x != nil {
		return x.KeyRanges
	}
	return nil
}

type ReadIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadIndex uint64 `protobuf:"varint,1,opt,name=read_index,json=readIndex,proto3" json:"read_index,omitempty"`
	// The memory lock blocking this read at the leader
	Locked *kvrpcpb.LockInfo `protobuf:"bytes,2,opt,name=locked,proto3" json:"locked,omitempty"`
}

func (x *ReadIndexResponse) Reset() {
	*x = ReadIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadIndexResponse) ProtoMessage() {}

func (x *ReadIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadIndexResponse.ProtoReflect.Descriptor instead.
func (*ReadIndexResponse) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{15}
}

func (x *ReadIndexResponse) GetReadIndex() uint64 {
	if x != nil {
		return x.ReadIndex
	}
	return 0
}

func (x *ReadIndexResponse) GetLocked() *kvrpcpb.LockInfo {
	if x != nil {
		return x.Locked
	}
	return nil
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmdType     CmdType             `protobuf:"varint,1,opt,name=cmd_type,json=cmdType,proto3,enum=raft_cmdpb.CmdType" json:"cmd_type,omitempty"`
	Get         *GetRequest         `protobuf:"bytes,2,opt,name=get,proto3" json:"get,omitempty"`
	Put         *PutRequest         `protobuf:"bytes,4,opt,name=put,proto3" json:"put,omitempty"`
	Delete      *DeleteRequest      `protobuf:"bytes,5,opt,name=delete,proto3" json:"delete,omitempty"`
	Snap        *SnapRequest        `protobuf:"bytes,6,opt,name=snap,proto3" json:"snap,omitempty"`
	Prewrite    *PrewriteRequest    `protobuf:"bytes,7,opt,name=prewrite,proto3" json:"prewrite,omitempty"`
	DeleteRange *DeleteRangeRequest `protobuf:"bytes,8,opt,name=delete_range,json=deleteRange,proto3" json:"delete_range,omitempty"`
	IngestSst   *IngestSSTRequest   `protobuf:"bytes,9,opt,name=ingest_sst,json=ingestSst,proto3" json:"ingest_sst,omitempty"`
	ReadIndex   *ReadIndexRequest   `protobuf:"bytes,10,opt,name=read_index,json=readIndex,proto3" json:"read_index,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{16}
}

func (x *Request) GetCmdType() CmdType {
	if x != nil {
		return x.CmdType
	}
	return CmdType_Invalid
}

func (x *Request) GetGet() *GetRequest {
	if x != nil {
		return x.Get
	}
	return nil
}

func (x *Request) GetPut() *PutRequest {
	if x != nil {
		return x.Put
	}
	return nil
}

func (x *Request) GetDelete() *DeleteRequest {
	if x != nil {
		return x.Delete
	}
	return nil
}

func (x *Request) GetSnap() *SnapRequest {
	if x != nil {
		return x.Snap
	}
	return nil
}

func (x *Request) GetPrewrite() *PrewriteRequest {
	if x != nil {
		return x.Prewrite
	}
	return nil
}

func (x *Request) GetDeleteRange() *DeleteRangeRequest {
	if x != nil {
		return x.DeleteRange
	}
	return nil
}

func (x *Request) GetIngestSst() *IngestSSTRequest {
	if x != nil {
		return x.IngestSst
	}
	return nil
}

func (x *Request) GetReadIndex() *ReadIndexRequest {
	if x != nil {
		return x.ReadIndex
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmdType    CmdType              `protobuf:"varint,1,opt,name=cmd_type,json=cmdType,proto3,enum=raft_cmdpb.CmdType" json:"cmd_type,omitempty"`
	Get        *GetResponse         `protobuf:"bytes,2,opt,name=get,proto3" json:"get,omitempty"`
	Put        *PutResponse         `protobuf:"bytes,4,opt,name=put,proto3" json:"put,omitempty"`
	Delete     *DeleteResponse      `protobuf:"bytes,5,opt,name=delete,proto3" json:"delete,omitempty"`
	Snap       *SnapResponse        `protobuf:"bytes,6,opt,name=snap,proto3" json:"snap,omitempty"`
	Prewrite   *PrewriteResponse    `protobuf:"bytes,7,opt,name=prewrite,proto3" json:"prewrite,omitempty"`
	DelteRange *DeleteRangeResponse `protobuf:"bytes,8,opt,name=delte_range,json=delteRange,proto3" json:"delte_range,omitempty"`
	IngestSst  *IngestSSTResponse   `protobuf:"bytes,9,opt,name=ingest_sst,json=ingestSst,proto3" json:"ingest_sst,omitempty"`
	ReadIndex  *ReadIndexResponse   `protobuf:"bytes,10,opt,name=read_index,json=readIndex,proto3" json:"read_index,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{17}
}

func (x *Response) GetCmdType() CmdType {
	if x != nil {
		return x.CmdType
	}
	return CmdType_Invalid
}

func (x *Response) GetGet() *GetResponse {
	if x != nil {
		return x.Get
	}
	return nil
}

func (x *Response) GetPut() *PutResponse {
	if x != nil {
		return x.Put
	}
	return nil
}

func (x *Response) GetDelete() *DeleteResponse {
	if x != nil {
		return x.Delete
	}
	return nil
}

func (x *Response) GetSnap() *SnapResponse {
	if x != nil {
		return x.Snap
	}
	return nil
}

func (x *Response) GetPrewrite() *PrewriteResponse {
	if x != nil {
		return x.Prewrite
	}
	return nil
}

func (x *Response) GetDelteRange() *DeleteRangeResponse {
	if x != nil {
		return x.DelteRange
	}
	return nil
}

func (x *Response) GetIngestSst() *IngestSSTResponse {
	if x != nil {
		return x.IngestSst
	}
	return nil
}

func (x *Response) GetReadIndex() *ReadIndexResponse {
	if x != nil {
		return x.ReadIndex
	}
	return nil
}

type ChangePeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This can be only called in internal RaftStore now.
	ChangeType eraftpb.ConfChangeType `protobuf:"varint,1,opt,name=change_type,json=changeType,proto3,enum=eraftpb.ConfChangeType" json:"change_type,omitempty"`
	Peer       *metapb.Peer           `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (x *ChangePeerRequest) Reset() {
	*x = ChangePeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePeerRequest) ProtoMessage() {}

func (x *ChangePeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePeerRequest.ProtoReflect.Descriptor instead.
func (*ChangePeerRequest) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{18}
}

func (x *ChangePeerRequest) GetChangeType() eraftpb.ConfChangeType {
	if x != nil {
		return x.ChangeType
	}
	return eraftpb.ConfChangeType_AddNode
}

func (x *ChangePeerRequest) GetPeer() *metapb.Peer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type ChangePeerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region *metapb.Region `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *ChangePeerResponse) Reset() {
	*x = ChangePeerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePeerResponse) ProtoMessage() {}

func (x *ChangePeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePeerResponse.ProtoReflect.Descriptor instead.
func (*ChangePeerResponse) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{19}
}

func (x *ChangePeerResponse) GetRegion() *metapb.Region {
	if x != nil {
		return x.Region
	}
	return nil
}

type ChangePeerV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Changes []*ChangePeerRequest `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *ChangePeerV2Request) Reset() {
	*x = ChangePeerV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePeerV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePeerV2Request) ProtoMessage() {}

func (x *ChangePeerV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePeerV2Request.ProtoReflect.Descriptor instead.
func (*ChangePeerV2Request) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{20}
}

func (x *ChangePeerV2Request) GetChanges() []*ChangePeerRequest {
	if x != nil {
		return x.Changes
	}
	return nil
}

type ChangePeerV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region *metapb.Region `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *ChangePeerV2Response) Reset() {
	*x = ChangePeerV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePeerV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePeerV2Response) ProtoMessage() {}

func (x *ChangePeerV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePeerV2Response.ProtoReflect.Descriptor instead.
func (*ChangePeerV2Response) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{21}
}

func (x *ChangePeerV2Response) GetRegion() *metapb.Region {
	if x != nil {
		return x.Region
	}
	return nil
}

type SplitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This can be only called in internal RaftStore now.
	// The split_key must be in the been splitting region.
	SplitKey []byte `protobuf:"bytes,1,opt,name=split_key,json=splitKey,proto3" json:"split_key,omitempty"`
	// We split the region into two, first uses the origin
	// parent region id, and the second uses the new_region_id.
	// We must guarantee that the new_region_id is global unique.
	NewRegionId uint64 `protobuf:"varint,2,opt,name=new_region_id,json=newRegionId,proto3" json:"new_region_id,omitempty"`
	// The peer ids for the new split region.
	NewPeerIds []uint64 `protobuf:"varint,3,rep,packed,name=new_peer_ids,json=newPeerIds,proto3" json:"new_peer_ids,omitempty"`
	// If true, right region derive the origin region_id,
	// left region use new_region_id.
	// Will be ignored in batch split, use `BatchSplitRequest::right_derive` instead.
	//
	// Deprecated: Do not use.
	RightDerive bool `protobuf:"varint,4,opt,name=right_derive,json=rightDerive,proto3" json:"right_derive,omitempty"`
}

func (x *SplitRequest) Reset() {
	*x = SplitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitRequest) ProtoMessage() {}

func (x *SplitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitRequest.ProtoReflect.Descriptor instead.
func (*SplitRequest) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{22}
}

func (x *SplitRequest) GetSplitKey() []byte {
	if x != nil {
		return x.SplitKey
	}
	return nil
}

func (x *SplitRequest) GetNewRegionId() uint64 {
	if x != nil {
		return x.NewRegionId
	}
	return 0
}

func (x *SplitRequest) GetNewPeerIds() []uint64 {
	if x != nil {
		return x.NewPeerIds
	}
	return nil
}

// Deprecated: Do not use.
func (x *SplitRequest) GetRightDerive() bool {
	if x != nil {
		return x.RightDerive
	}
	return false
}

type SplitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left  *metapb.Region `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Right *metapb.Region `protobuf:"bytes,2,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *SplitResponse) Reset() {
	*x = SplitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitResponse) ProtoMessage() {}

func (x *SplitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitResponse.ProtoReflect.Descriptor instead.
func (*SplitResponse) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{23}
}

func (x *SplitResponse) GetLeft() *metapb.Region {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *SplitResponse) GetRight() *metapb.Region {
	if x != nil {
		return x.Right
	}
	return nil
}

type BatchSplitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*SplitRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	// If true, the last region derive the origin region_id,
	// other regions use new ids.
	RightDerive bool `protobuf:"varint,2,opt,name=right_derive,json=rightDerive,proto3" json:"right_derive,omitempty"`
}

func (x *BatchSplitRequest) Reset() {
	*x = BatchSplitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchSplitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSplitRequest) ProtoMessage() {}

func (x *BatchSplitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSplitRequest.ProtoReflect.Descriptor instead.
func (*BatchSplitRequest) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{24}
}

func (x *BatchSplitRequest) GetRequests() []*SplitRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *BatchSplitRequest) GetRightDerive() bool {
	if x != nil {
		return x.RightDerive
	}
	return false
}

type BatchSplitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Regions []*metapb.Region `protobuf:"bytes,1,rep,name=regions,proto3" json:"regions,omitempty"`
}

func (x *BatchSplitResponse) Reset() {
	*x = BatchSplitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchSplitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSplitResponse) ProtoMessage() {}

func (x *BatchSplitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSplitResponse.ProtoReflect.Descriptor instead.
func (*BatchSplitResponse) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{25}
}

func (x *BatchSplitResponse) GetRegions() []*metapb.Region {
	if x != nil {
		return x.Regions
	}
	return nil
}

type CompactLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompactIndex uint64 `protobuf:"varint,1,opt,name=compact_index,json=compactIndex,proto3" json:"compact_index,omitempty"`
	CompactTerm  uint64 `protobuf:"varint,2,opt,name=compact_term,json=compactTerm,proto3" json:"compact_term,omitempty"`
}

func (x *CompactLogRequest) Reset() {
	*x = CompactLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactLogRequest) ProtoMessage() {}

func (x *CompactLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactLogRequest.ProtoReflect.Descriptor instead.
func (*CompactLogRequest) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{26}
}

func (x *CompactLogRequest) GetCompactIndex() uint64 {
	if x != nil {
		return x.CompactIndex
	}
	return 0
}

func (x *CompactLogRequest) GetCompactTerm() uint64 {
	if x != nil {
		return x.CompactTerm
	}
	return 0
}

type CompactLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CompactLogResponse) Reset() {
	*x = CompactLogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactLogResponse) ProtoMessage() {}

func (x *CompactLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactLogResponse.ProtoReflect.Descriptor instead.
func (*CompactLogResponse) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{27}
}

type TransferLeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peer  *metapb.Peer   `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Peers []*metapb.Peer `protobuf:"bytes,2,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (x *TransferLeaderRequest) Reset() {
	*x = TransferLeaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferLeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferLeaderRequest) ProtoMessage() {}

func (x *TransferLeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferLeaderRequest.ProtoReflect.Descriptor instead.
func (*TransferLeaderRequest) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{28}
}

func (x *TransferLeaderRequest) GetPeer() *metapb.Peer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TransferLeaderRequest) GetPeers() []*metapb.Peer {
	if x != nil {
		return x.Peers
	}
	return nil
}

type TransferLeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransferLeaderResponse) Reset() {
	*x = TransferLeaderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferLeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferLeaderResponse) ProtoMessage() {}

func (x *TransferLeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferLeaderResponse.ProtoReflect.Descriptor instead.
func (*TransferLeaderResponse) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{29}
}

type ComputeHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context []byte `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *ComputeHashRequest) Reset() {
	*x = ComputeHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeHashRequest) ProtoMessage() {}

func (x *ComputeHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeHashRequest.ProtoReflect.Descriptor instead.
func (*ComputeHashRequest) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{30}
}

func (x *ComputeHashRequest) GetContext() []byte {
	if x != nil {
		return x.Context
	}
	return nil
}

type VerifyHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index   uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Hash    []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Context []byte `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *VerifyHashRequest) Reset() {
	*x = VerifyHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyHashRequest) ProtoMessage() {}

func (x *VerifyHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyHashRequest.ProtoReflect.Descriptor instead.
func (*VerifyHashRequest) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{31}
}

func (x *VerifyHashRequest) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *VerifyHashRequest) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *VerifyHashRequest) GetContext() []byte {
	if x != nil {
		return x.Context
	}
	return nil
}

type VerifyHashResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VerifyHashResponse) Reset() {
	*x = VerifyHashResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyHashResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyHashResponse) ProtoMessage() {}

func (x *VerifyHashResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyHashResponse.ProtoReflect.Descriptor instead.
func (*VerifyHashResponse) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{32}
}

type PrepareMergeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinIndex uint64         `protobuf:"varint,1,opt,name=min_index,json=minIndex,proto3" json:"min_index,omitempty"`
	Target   *metapb.Region `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *PrepareMergeRequest) Reset() {
	*x = PrepareMergeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareMergeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareMergeRequest) ProtoMessage() {}

func (x *PrepareMergeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareMergeRequest.ProtoReflect.Descriptor instead.
func (*PrepareMergeRequest) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{33}
}

func (x *PrepareMergeRequest) GetMinIndex() uint64 {
	if x != nil {
		return x.MinIndex
	}
	return 0
}

func (x *PrepareMergeRequest) GetTarget() *metapb.Region {
	if x != nil {
		return x.Target
	}
	return nil
}

type PrepareMergeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PrepareMergeResponse) Reset() {
	*x = PrepareMergeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareMergeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareMergeResponse) ProtoMessage() {}

func (x *PrepareMergeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareMergeResponse.ProtoReflect.Descriptor instead.
func (*PrepareMergeResponse) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{34}
}

type CommitMergeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source  *metapb.Region   `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Commit  uint64           `protobuf:"varint,2,opt,name=commit,proto3" json:"commit,omitempty"`
	Entries []*eraftpb.Entry `protobuf:"bytes,3,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *CommitMergeRequest) Reset() {
	*x = CommitMergeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitMergeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitMergeRequest) ProtoMessage() {}

func (x *CommitMergeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitMergeRequest.ProtoReflect.Descriptor instead.
func (*CommitMergeRequest) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{35}
}

func (x *CommitMergeRequest) GetSource() *metapb.Region {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *CommitMergeRequest) GetCommit() uint64 {
	if x != nil {
		return x.Commit
	}
	return 0
}

func (x *CommitMergeRequest) GetEntries() []*eraftpb.Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type CommitMergeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommitMergeResponse) Reset() {
	*x = CommitMergeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitMergeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitMergeResponse) ProtoMessage() {}

func (x *CommitMergeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitMergeResponse.ProtoReflect.Descriptor instead.
func (*CommitMergeResponse) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{36}
}

type RollbackMergeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit uint64 `protobuf:"varint,1,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *RollbackMergeRequest) Reset() {
	*x = RollbackMergeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollbackMergeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackMergeRequest) ProtoMessage() {}

func (x *RollbackMergeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackMergeRequest.ProtoReflect.Descriptor instead.
func (*RollbackMergeRequest) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{37}
}

func (x *RollbackMergeRequest) GetCommit() uint64 {
	if x != nil {
		return x.Commit
	}
	return 0
}

type RollbackMergeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RollbackMergeResponse) Reset() {
	*x = RollbackMergeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollbackMergeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackMergeResponse) ProtoMessage() {}

func (x *RollbackMergeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackMergeResponse.ProtoReflect.Descriptor instead.
func (*RollbackMergeResponse) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{38}
}

type AdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmdType    AdminCmdType       `protobuf:"varint,1,opt,name=cmd_type,json=cmdType,proto3,enum=raft_cmdpb.AdminCmdType" json:"cmd_type,omitempty"`
	ChangePeer *ChangePeerRequest `protobuf:"bytes,2,opt,name=change_peer,json=changePeer,proto3" json:"change_peer,omitempty"`
	// Deprecated: Do not use.
	Split          *SplitRequest          `protobuf:"bytes,3,opt,name=split,proto3" json:"split,omitempty"`
	CompactLog     *CompactLogRequest     `protobuf:"bytes,4,opt,name=compact_log,json=compactLog,proto3" json:"compact_log,omitempty"`
	TransferLeader *TransferLeaderRequest `protobuf:"bytes,5,opt,name=transfer_leader,json=transferLeader,proto3" json:"transfer_leader,omitempty"`
	VerifyHash     *VerifyHashRequest     `protobuf:"bytes,6,opt,name=verify_hash,json=verifyHash,proto3" json:"verify_hash,omitempty"`
	PrepareMerge   *PrepareMergeRequest   `protobuf:"bytes,7,opt,name=prepare_merge,json=prepareMerge,proto3" json:"prepare_merge,omitempty"`
	CommitMerge    *CommitMergeRequest    `protobuf:"bytes,8,opt,name=commit_merge,json=commitMerge,proto3" json:"commit_merge,omitempty"`
	RollbackMerge  *RollbackMergeRequest  `protobuf:"bytes,9,opt,name=rollback_merge,json=rollbackMerge,proto3" json:"rollback_merge,omitempty"`
	Splits         *BatchSplitRequest     `protobuf:"bytes,10,opt,name=splits,proto3" json:"splits,omitempty"`
	ChangePeerV2   *ChangePeerV2Request   `protobuf:"bytes,11,opt,name=change_peer_v2,json=changePeerV2,proto3" json:"change_peer_v2,omitempty"`
	ComputeHash    *ComputeHashRequest    `protobuf:"bytes,12,opt,name=compute_hash,json=computeHash,proto3" json:"compute_hash,omitempty"`
}

func (x *AdminRequest) Reset() {
	*x = AdminRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminRequest) ProtoMessage() {}

func (x *AdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminRequest.ProtoReflect.Descriptor instead.
func (*AdminRequest) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{39}
}

func (x *AdminRequest) GetCmdType() AdminCmdType {
	if x != nil {
		return x.CmdType
	}
	return AdminCmdType_InvalidAdmin
}

func (x *AdminRequest) GetChangePeer() *ChangePeerRequest {
	if x != nil {
		return x.ChangePeer
	}
	return nil
}

// Deprecated: Do not use.
func (x *AdminRequest) GetSplit() *SplitRequest {
	if x != nil {
		return x.Split
	}
	return nil
}

func (x *AdminRequest) GetCompactLog() *CompactLogRequest {
	if x != nil {
		return x.CompactLog
	}
	return nil
}

func (x *AdminRequest) GetTransferLeader() *TransferLeaderRequest {
	if x != nil {
		return x.TransferLeader
	}
	return nil
}

func (x *AdminRequest) GetVerifyHash() *VerifyHashRequest {
	if x != nil {
		return x.VerifyHash
	}
	return nil
}

func (x *AdminRequest) GetPrepareMerge() *PrepareMergeRequest {
	if x != nil {
		return x.PrepareMerge
	}
	return nil
}

func (x *AdminRequest) GetCommitMerge() *CommitMergeRequest {
	if x != nil {
		return x.CommitMerge
	}
	return nil
}

func (x *AdminRequest) GetRollbackMerge() *RollbackMergeRequest {
	if x != nil {
		return x.RollbackMerge
	}
	return nil
}

func (x *AdminRequest) GetSplits() *BatchSplitRequest {
	if x != nil {
		return x.Splits
	}
	return nil
}

func (x *AdminRequest) GetChangePeerV2() *ChangePeerV2Request {
	if x != nil {
		return x.ChangePeerV2
	}
	return nil
}

func (x *AdminRequest) GetComputeHash() *ComputeHashRequest {
	if x != nil {
		return x.ComputeHash
	}
	return nil
}

type AdminResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmdType    AdminCmdType        `protobuf:"varint,1,opt,name=cmd_type,json=cmdType,proto3,enum=raft_cmdpb.AdminCmdType" json:"cmd_type,omitempty"`
	ChangePeer *ChangePeerResponse `protobuf:"bytes,2,opt,name=change_peer,json=changePeer,proto3" json:"change_peer,omitempty"`
	// Deprecated: Do not use.
	Split          *SplitResponse          `protobuf:"bytes,3,opt,name=split,proto3" json:"split,omitempty"`
	CompactLog     *CompactLogResponse     `protobuf:"bytes,4,opt,name=compact_log,json=compactLog,proto3" json:"compact_log,omitempty"`
	TransferLeader *TransferLeaderResponse `protobuf:"bytes,5,opt,name=transfer_leader,json=transferLeader,proto3" json:"transfer_leader,omitempty"`
	VerifyHash     *VerifyHashResponse     `protobuf:"bytes,6,opt,name=verify_hash,json=verifyHash,proto3" json:"verify_hash,omitempty"`
	PrepareMerge   *PrepareMergeResponse   `protobuf:"bytes,7,opt,name=prepare_merge,json=prepareMerge,proto3" json:"prepare_merge,omitempty"`
	CommitMerge    *CommitMergeResponse    `protobuf:"bytes,8,opt,name=commit_merge,json=commitMerge,proto3" json:"commit_merge,omitempty"`
	RollbackMerge  *RollbackMergeResponse  `protobuf:"bytes,9,opt,name=rollback_merge,json=rollbackMerge,proto3" json:"rollback_merge,omitempty"`
	Splits         *BatchSplitResponse     `protobuf:"bytes,10,opt,name=splits,proto3" json:"splits,omitempty"`
	ChangePeerV2   *ChangePeerV2Response   `protobuf:"bytes,11,opt,name=change_peer_v2,json=changePeerV2,proto3" json:"change_peer_v2,omitempty"`
}

func (x *AdminResponse) Reset() {
	*x = AdminResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminResponse) ProtoMessage() {}

func (x *AdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminResponse.ProtoReflect.Descriptor instead.
func (*AdminResponse) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{40}
}

func (x *AdminResponse) GetCmdType() AdminCmdType {
	if x != nil {
		return x.CmdType
	}
	return AdminCmdType_InvalidAdmin
}

func (x *AdminResponse) GetChangePeer() *ChangePeerResponse {
	if x != nil {
		return x.ChangePeer
	}
	return nil
}

// Deprecated: Do not use.
func (x *AdminResponse) GetSplit() *SplitResponse {
	if x != nil {
		return x.Split
	}
	return nil
}

func (x *AdminResponse) GetCompactLog() *CompactLogResponse {
	if x != nil {
		return x.CompactLog
	}
	return nil
}

func (x *AdminResponse) GetTransferLeader() *TransferLeaderResponse {
	if x != nil {
		return x.TransferLeader
	}
	return nil
}

func (x *AdminResponse) GetVerifyHash() *VerifyHashResponse {
	if x != nil {
		return x.VerifyHash
	}
	return nil
}

func (x *AdminResponse) GetPrepareMerge() *PrepareMergeResponse {
	if x != nil {
		return x.PrepareMerge
	}
	return nil
}

func (x *AdminResponse) GetCommitMerge() *CommitMergeResponse {
	if x != nil {
		return x.CommitMerge
	}
	return nil
}

func (x *AdminResponse) GetRollbackMerge() *RollbackMergeResponse {
	if x != nil {
		return x.RollbackMerge
	}
	return nil
}

func (x *AdminResponse) GetSplits() *BatchSplitResponse {
	if x != nil {
		return x.Splits
	}
	return nil
}

func (x *AdminResponse) GetChangePeerV2() *ChangePeerV2Response {
	if x != nil {
		return x.ChangePeerV2
	}
	return nil
}

// For get the leader of the region.
type RegionLeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegionLeaderRequest) Reset() {
	*x = RegionLeaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionLeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionLeaderRequest) ProtoMessage() {}

func (x *RegionLeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionLeaderRequest.ProtoReflect.Descriptor instead.
func (*RegionLeaderRequest) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{41}
}

type RegionLeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Leader *metapb.Peer `protobuf:"bytes,1,opt,name=leader,proto3" json:"leader,omitempty"`
}

func (x *RegionLeaderResponse) Reset() {
	*x = RegionLeaderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionLeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionLeaderResponse) ProtoMessage() {}

func (x *RegionLeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionLeaderResponse.ProtoReflect.Descriptor instead.
func (*RegionLeaderResponse) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{42}
}

func (x *RegionLeaderResponse) GetLeader() *metapb.Peer {
	if x != nil {
		return x.Leader
	}
	return nil
}

// For getting more information of the region.
// We add some admin operations (ChangePeer, Split...) into the pb job list,
// then pd server will peek the first one, handle it and then pop it from the job lib.
// But sometimes, the pd server may crash before popping. When another pd server
// starts and finds the job is running but not finished, it will first check whether
// the raft server already has handled this job.
// E,g, for ChangePeer, if we add Peer10 into region1 and find region1 has already had
// Peer10, we can think this ChangePeer is finished, and can pop this job from job list
// directly.
type RegionDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegionDetailRequest) Reset() {
	*x = RegionDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionDetailRequest) ProtoMessage() {}

func (x *RegionDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionDetailRequest.ProtoReflect.Descriptor instead.
func (*RegionDetailRequest) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{43}
}

type RegionDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region *metapb.Region `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	Leader *metapb.Peer   `protobuf:"bytes,2,opt,name=leader,proto3" json:"leader,omitempty"`
}

func (x *RegionDetailResponse) Reset() {
	*x = RegionDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionDetailResponse) ProtoMessage() {}

func (x *RegionDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionDetailResponse.ProtoReflect.Descriptor instead.
func (*RegionDetailResponse) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{44}
}

func (x *RegionDetailResponse) GetRegion() *metapb.Region {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *RegionDetailResponse) GetLeader() *metapb.Peer {
	if x != nil {
		return x.Leader
	}
	return nil
}

type StatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmdType      StatusCmdType        `protobuf:"varint,1,opt,name=cmd_type,json=cmdType,proto3,enum=raft_cmdpb.StatusCmdType" json:"cmd_type,omitempty"`
	RegionLeader *RegionLeaderRequest `protobuf:"bytes,2,opt,name=region_leader,json=regionLeader,proto3" json:"region_leader,omitempty"`
	RegionDetail *RegionDetailRequest `protobuf:"bytes,3,opt,name=region_detail,json=regionDetail,proto3" json:"region_detail,omitempty"`
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{45}
}

func (x *StatusRequest) GetCmdType() StatusCmdType {
	if x != nil {
		return x.CmdType
	}
	return StatusCmdType_InvalidStatus
}

func (x *StatusRequest) GetRegionLeader() *RegionLeaderRequest {
	if x != nil {
		return x.RegionLeader
	}
	return nil
}

func (x *StatusRequest) GetRegionDetail() *RegionDetailRequest {
	if x != nil {
		return x.RegionDetail
	}
	return nil
}

type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmdType      StatusCmdType         `protobuf:"varint,1,opt,name=cmd_type,json=cmdType,proto3,enum=raft_cmdpb.StatusCmdType" json:"cmd_type,omitempty"`
	RegionLeader *RegionLeaderResponse `protobuf:"bytes,2,opt,name=region_leader,json=regionLeader,proto3" json:"region_leader,omitempty"`
	RegionDetail *RegionDetailResponse `protobuf:"bytes,3,opt,name=region_detail,json=regionDetail,proto3" json:"region_detail,omitempty"`
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{46}
}

func (x *StatusResponse) GetCmdType() StatusCmdType {
	if x != nil {
		return x.CmdType
	}
	return StatusCmdType_InvalidStatus
}

func (x *StatusResponse) GetRegionLeader() *RegionLeaderResponse {
	if x != nil {
		return x.RegionLeader
	}
	return nil
}

func (x *StatusResponse) GetRegionDetail() *RegionDetailResponse {
	if x != nil {
		return x.RegionDetail
	}
	return nil
}

type RaftRequestHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId uint64       `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	Peer     *metapb.Peer `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
	// true for read linearization
	ReadQuorum bool `protobuf:"varint,3,opt,name=read_quorum,json=readQuorum,proto3" json:"read_quorum,omitempty"`
	// 16 bytes, to distinguish request.
	Uuid        []byte              `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
	RegionEpoch *metapb.RegionEpoch `protobuf:"bytes,5,opt,name=region_epoch,json=regionEpoch,proto3" json:"region_epoch,omitempty"`
	Term        uint64              `protobuf:"varint,6,opt,name=term,proto3" json:"term,omitempty"`
	SyncLog     bool                `protobuf:"varint,7,opt,name=sync_log,json=syncLog,proto3" json:"sync_log,omitempty"`
	ReplicaRead bool                `protobuf:"varint,8,opt,name=replica_read,json=replicaRead,proto3" json:"replica_read,omitempty"`
	// Read requests can be responsed directly after the Raft applys to `applied_index`.
	AppliedIndex uint64 `protobuf:"varint,9,opt,name=applied_index,json=appliedIndex,proto3" json:"applied_index,omitempty"`
	// Custom flags for this raft request.
	Flags    uint64 `protobuf:"varint,10,opt,name=flags,proto3" json:"flags,omitempty"`
	FlagData []byte `protobuf:"bytes,11,opt,name=flag_data,json=flagData,proto3" json:"flag_data,omitempty"`
}

func (x *RaftRequestHeader) Reset() {
	*x = RaftRequestHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftRequestHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftRequestHeader) ProtoMessage() {}

func (x *RaftRequestHeader) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftRequestHeader.ProtoReflect.Descriptor instead.
func (*RaftRequestHeader) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{47}
}

func (x *RaftRequestHeader) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *RaftRequestHeader) GetPeer() *metapb.Peer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *RaftRequestHeader) GetReadQuorum() bool {
	if x != nil {
		return x.ReadQuorum
	}
	return false
}

func (x *RaftRequestHeader) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *RaftRequestHeader) GetRegionEpoch() *metapb.RegionEpoch {
	if x != nil {
		return x.RegionEpoch
	}
	return nil
}

func (x *RaftRequestHeader) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *RaftRequestHeader) GetSyncLog() bool {
	if x != nil {
		return x.SyncLog
	}
	return false
}

func (x *RaftRequestHeader) GetReplicaRead() bool {
	if x != nil {
		return x.ReplicaRead
	}
	return false
}

func (x *RaftRequestHeader) GetAppliedIndex() uint64 {
	if x != nil {
		return x.AppliedIndex
	}
	return 0
}

func (x *RaftRequestHeader) GetFlags() uint64 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *RaftRequestHeader) GetFlagData() []byte {
	if x != nil {
		return x.FlagData
	}
	return nil
}

type RaftResponseHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error       *errorpb.Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Uuid        []byte         `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	CurrentTerm uint64         `protobuf:"varint,3,opt,name=current_term,json=currentTerm,proto3" json:"current_term,omitempty"`
}

func (x *RaftResponseHeader) Reset() {
	*x = RaftResponseHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftResponseHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftResponseHeader) ProtoMessage() {}

func (x *RaftResponseHeader) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftResponseHeader.ProtoReflect.Descriptor instead.
func (*RaftResponseHeader) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{48}
}

func (x *RaftResponseHeader) GetError() *errorpb.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *RaftResponseHeader) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *RaftResponseHeader) GetCurrentTerm() uint64 {
	if x != nil {
		return x.CurrentTerm
	}
	return 0
}

type RaftCmdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *RaftRequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// We can't enclose normal requests and administrator request
	// at same time.
	Requests      []*Request     `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
	AdminRequest  *AdminRequest  `protobuf:"bytes,3,opt,name=admin_request,json=adminRequest,proto3" json:"admin_request,omitempty"`
	StatusRequest *StatusRequest `protobuf:"bytes,4,opt,name=status_request,json=statusRequest,proto3" json:"status_request,omitempty"`
}

func (x *RaftCmdRequest) Reset() {
	*x = RaftCmdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftCmdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftCmdRequest) ProtoMessage() {}

func (x *RaftCmdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftCmdRequest.ProtoReflect.Descriptor instead.
func (*RaftCmdRequest) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{49}
}

func (x *RaftCmdRequest) GetHeader() *RaftRequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RaftCmdRequest) GetRequests() []*Request {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *RaftCmdRequest) GetAdminRequest() *AdminRequest {
	if x != nil {
		return x.AdminRequest
	}
	return nil
}

func (x *RaftCmdRequest) GetStatusRequest() *StatusRequest {
	if x != nil {
		return x.StatusRequest
	}
	return nil
}

type RaftCmdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header         *RaftResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Responses      []*Response         `protobuf:"bytes,2,rep,name=responses,proto3" json:"responses,omitempty"`
	AdminResponse  *AdminResponse      `protobuf:"bytes,3,opt,name=admin_response,json=adminResponse,proto3" json:"admin_response,omitempty"`
	StatusResponse *StatusResponse     `protobuf:"bytes,4,opt,name=status_response,json=statusResponse,proto3" json:"status_response,omitempty"`
}

func (x *RaftCmdResponse) Reset() {
	*x = RaftCmdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raft_cmdpb_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftCmdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftCmdResponse) ProtoMessage() {}

func (x *RaftCmdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_cmdpb_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftCmdResponse.ProtoReflect.Descriptor instead.
func (*RaftCmdResponse) Descriptor() ([]byte, []int) {
	return file_raft_cmdpb_proto_rawDescGZIP(), []int{50}
}

func (x *RaftCmdResponse) GetHeader() *RaftResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RaftCmdResponse) GetResponses() []*Response {
	if x != nil {
		return x.Responses
	}
	return nil
}

func (x *RaftCmdResponse) GetAdminResponse() *AdminResponse {
	if x != nil {
		return x.AdminResponse
	}
	return nil
}

func (x *RaftCmdResponse) GetStatusResponse() *StatusResponse {
	if x != nil {
		return x.StatusResponse
	}
	return nil
}

var File_raft_cmdpb_proto protoreflect.FileDescriptor

var file_raft_cmdpb_proto_rawDesc = []byte{
	0x0a, 0x10, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x1a, 0x0c,
	0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x65, 0x72, 0x61,
	0x66, 0x74, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x6b, 0x76, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x73, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x72,
	0x75, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2e,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x63, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x63, 0x66, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x23,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x44, 0x0a, 0x0a, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x63,
	0x66, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x0d, 0x0a, 0x0b, 0x50, 0x75, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x63, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x10, 0x0a, 0x0e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7b, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x63, 0x66, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x15, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x0d, 0x0a, 0x0b, 0x53, 0x6e, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x36, 0x0a, 0x0c, 0x53, 0x6e, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x12, 0x0a, 0x10, 0x50, 0x72, 0x65, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x0a, 0x10, 0x49,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x53, 0x53, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x03, 0x73, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x53, 0x53, 0x54, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x03, 0x73, 0x73, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x49, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x53, 0x53, 0x54, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5f, 0x0a,
	0x10, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x12, 0x30, 0x0a, 0x0a,
	0x6b, 0x65, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x5d,
	0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x29, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0xe3, 0x03,
	0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x6d, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x72, 0x61,
	0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x43, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x63, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x67, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d,
	0x64, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03,
	0x67, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x50, 0x75,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x70, 0x75, 0x74, 0x12, 0x31, 0x0a,
	0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x2b, 0x0a, 0x04, 0x73, 0x6e, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x6e, 0x61, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x73, 0x6e, 0x61, 0x70, 0x12, 0x37, 0x0a,
	0x08, 0x70, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x65,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x70, 0x72,
	0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72,
	0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x69, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x5f, 0x73, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x53, 0x53, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x69, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x53, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x61, 0x66,
	0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0xea, 0x03, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e,
	0x43, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x29, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x03, 0x67, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x03, 0x70,
	0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f,
	0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x03, 0x70, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d,
	0x64, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x73, 0x6e,
	0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f,
	0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x04, 0x73, 0x6e, 0x61, 0x70, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x61, 0x66,
	0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x70, 0x72, 0x65, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63,
	0x6d, 0x64, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x74, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x73,
	0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f,
	0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x53, 0x53, 0x54, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x53,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d,
	0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x6f, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65, 0x72, 0x61,
	0x66, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x22, 0x3c, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22,
	0x4e, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x65, 0x72, 0x56, 0x32, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63,
	0x6d, 0x64, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22,
	0x3e, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x65, 0x72, 0x56, 0x32, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22,
	0x98, 0x01, 0x0a, 0x0c, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a,
	0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x50, 0x65, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x65, 0x72,
	0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x22, 0x59, 0x0a, 0x0d, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x6c,
	0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12,
	0x24, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x6c, 0x0a, 0x11, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72,
	0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x72,
	0x69, 0x76, 0x65, 0x22, 0x3e, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x5b, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x65, 0x72, 0x6d,
	0x22, 0x14, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5d, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x12, 0x22, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x05,
	0x70, 0x65, 0x65, 0x72, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2e, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22,
	0x57, 0x0a, 0x11, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5a,
	0x0a, 0x13, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x26, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x7e, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x72, 0x61, 0x66,
	0x74, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x0a, 0x14, 0x52, 0x6f, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x6f, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x96, 0x06, 0x0a, 0x0c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64,
	0x70, 0x62, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x63, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63,
	0x6d, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x3e, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x4a, 0x0a, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64,
	0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x44, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0c, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x41,
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x12, 0x47, 0x0a, 0x0e, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x61, 0x66, 0x74,
	0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x72, 0x6f, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x66,
	0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x73, 0x12, 0x45, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x76, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x61, 0x66, 0x74,
	0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x65,
	0x72, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x50, 0x65, 0x65, 0x72, 0x56, 0x32, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x22, 0xde, 0x05, 0x0a, 0x0d,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x08, 0x63, 0x6d, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x43, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63,
	0x6d, 0x64, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x65, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x05, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x4b, 0x0a, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x61,
	0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x45, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0c, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x42,
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x61, 0x66,
	0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x72,
	0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x06,
	0x73, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72,
	0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x76, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72,
	0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x65, 0x65, 0x72, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x65, 0x72, 0x56, 0x32, 0x22, 0x15, 0x0a, 0x13,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x3c, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x6c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x22, 0x15, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x64, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70,
	0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0xd1,
	0x01, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x34, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x63,
	0x6d, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0d,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x22, 0xd4, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63,
	0x6d, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6d, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x45, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x61, 0x66, 0x74,
	0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xe9, 0x02, 0x0a, 0x11, 0x52, 0x61,
	0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x04,
	0x70, 0x65, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x0b,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x4c, 0x6f, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x61, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x67,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x6c, 0x61,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x22, 0x71, 0x0a, 0x12, 0x52, 0x61, 0x66, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x22, 0xf9, 0x01, 0x0a, 0x0e, 0x52, 0x61, 0x66,
	0x74, 0x43, 0x6d, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x61,
	0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x2f, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x66,
	0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x61, 0x66,
	0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x84, 0x02, 0x0a, 0x0f, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6d, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f,
	0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x32, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72,
	0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x7b, 0x0a, 0x07, 0x43,
	0x6d, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x50, 0x75, 0x74, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10,
	0x04, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x6e, 0x61, 0x70, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x50,
	0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x53, 0x53, 0x54, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x65, 0x61,
	0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x10, 0x09, 0x2a, 0xdc, 0x01, 0x0a, 0x0c, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x43, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x05, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x4c, 0x6f, 0x67, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x10, 0x04, 0x12, 0x0f,
	0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x10, 0x05, 0x12,
	0x0e, 0x0a, 0x0a, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x48, 0x61, 0x73, 0x68, 0x10, 0x06, 0x12,
	0x10, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x10,
	0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x65, 0x65, 0x72, 0x56, 0x32, 0x10, 0x0b, 0x2a, 0x46, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x10, 0x02, 0x42,
	0x4d, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x2e, 0x74, 0x69, 0x6b, 0x76, 0x2e, 0x6b, 0x76, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x70, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x70, 0x2f, 0x6b, 0x76, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6b, 0x69, 0x74, 0x65, 0x78, 0x5f, 0x67, 0x65, 0x6e, 0x2f,
	0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6d, 0x64, 0x70, 0x62, 0xd8, 0xa8, 0x08, 0x01, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_raft_cmdpb_proto_rawDescOnce sync.Once
	file_raft_cmdpb_proto_rawDescData = file_raft_cmdpb_proto_rawDesc
)

func file_raft_cmdpb_proto_rawDescGZIP() []byte {
	file_raft_cmdpb_proto_rawDescOnce.Do(func() {
		file_raft_cmdpb_proto_rawDescData = protoimpl.X.CompressGZIP(file_raft_cmdpb_proto_rawDescData)
	})
	return file_raft_cmdpb_proto_rawDescData
}

var file_raft_cmdpb_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_raft_cmdpb_proto_msgTypes = make([]protoimpl.MessageInfo, 51)
var file_raft_cmdpb_proto_goTypes = []interface{}{
	(CmdType)(0),                   // 0: raft_cmdpb.CmdType
	(AdminCmdType)(0),              // 1: raft_cmdpb.AdminCmdType
	(StatusCmdType)(0),             // 2: raft_cmdpb.StatusCmdType
	(*GetRequest)(nil),             // 3: raft_cmdpb.GetRequest
	(*GetResponse)(nil),            // 4: raft_cmdpb.GetResponse
	(*PutRequest)(nil),             // 5: raft_cmdpb.PutRequest
	(*PutResponse)(nil),            // 6: raft_cmdpb.PutResponse
	(*DeleteRequest)(nil),          // 7: raft_cmdpb.DeleteRequest
	(*DeleteResponse)(nil),         // 8: raft_cmdpb.DeleteResponse
	(*DeleteRangeRequest)(nil),     // 9: raft_cmdpb.DeleteRangeRequest
	(*DeleteRangeResponse)(nil),    // 10: raft_cmdpb.DeleteRangeResponse
	(*SnapRequest)(nil),            // 11: raft_cmdpb.SnapRequest
	(*SnapResponse)(nil),           // 12: raft_cmdpb.SnapResponse
	(*PrewriteRequest)(nil),        // 13: raft_cmdpb.PrewriteRequest
	(*PrewriteResponse)(nil),       // 14: raft_cmdpb.PrewriteResponse
	(*IngestSSTRequest)(nil),       // 15: raft_cmdpb.IngestSSTRequest
	(*IngestSSTResponse)(nil),      // 16: raft_cmdpb.IngestSSTResponse
	(*ReadIndexRequest)(nil),       // 17: raft_cmdpb.ReadIndexRequest
	(*ReadIndexResponse)(nil),      // 18: raft_cmdpb.ReadIndexResponse
	(*Request)(nil),                // 19: raft_cmdpb.Request
	(*Response)(nil),               // 20: raft_cmdpb.Response
	(*ChangePeerRequest)(nil),      // 21: raft_cmdpb.ChangePeerRequest
	(*ChangePeerResponse)(nil),     // 22: raft_cmdpb.ChangePeerResponse
	(*ChangePeerV2Request)(nil),    // 23: raft_cmdpb.ChangePeerV2Request
	(*ChangePeerV2Response)(nil),   // 24: raft_cmdpb.ChangePeerV2Response
	(*SplitRequest)(nil),           // 25: raft_cmdpb.SplitRequest
	(*SplitResponse)(nil),          // 26: raft_cmdpb.SplitResponse
	(*BatchSplitRequest)(nil),      // 27: raft_cmdpb.BatchSplitRequest
	(*BatchSplitResponse)(nil),     // 28: raft_cmdpb.BatchSplitResponse
	(*CompactLogRequest)(nil),      // 29: raft_cmdpb.CompactLogRequest
	(*CompactLogResponse)(nil),     // 30: raft_cmdpb.CompactLogResponse
	(*TransferLeaderRequest)(nil),  // 31: raft_cmdpb.TransferLeaderRequest
	(*TransferLeaderResponse)(nil), // 32: raft_cmdpb.TransferLeaderResponse
	(*ComputeHashRequest)(nil),     // 33: raft_cmdpb.ComputeHashRequest
	(*VerifyHashRequest)(nil),      // 34: raft_cmdpb.VerifyHashRequest
	(*VerifyHashResponse)(nil),     // 35: raft_cmdpb.VerifyHashResponse
	(*PrepareMergeRequest)(nil),    // 36: raft_cmdpb.PrepareMergeRequest
	(*PrepareMergeResponse)(nil),   // 37: raft_cmdpb.PrepareMergeResponse
	(*CommitMergeRequest)(nil),     // 38: raft_cmdpb.CommitMergeRequest
	(*CommitMergeResponse)(nil),    // 39: raft_cmdpb.CommitMergeResponse
	(*RollbackMergeRequest)(nil),   // 40: raft_cmdpb.RollbackMergeRequest
	(*RollbackMergeResponse)(nil),  // 41: raft_cmdpb.RollbackMergeResponse
	(*AdminRequest)(nil),           // 42: raft_cmdpb.AdminRequest
	(*AdminResponse)(nil),          // 43: raft_cmdpb.AdminResponse
	(*RegionLeaderRequest)(nil),    // 44: raft_cmdpb.RegionLeaderRequest
	(*RegionLeaderResponse)(nil),   // 45: raft_cmdpb.RegionLeaderResponse
	(*RegionDetailRequest)(nil),    // 46: raft_cmdpb.RegionDetailRequest
	(*RegionDetailResponse)(nil),   // 47: raft_cmdpb.RegionDetailResponse
	(*StatusRequest)(nil),          // 48: raft_cmdpb.StatusRequest
	(*StatusResponse)(nil),         // 49: raft_cmdpb.StatusResponse
	(*RaftRequestHeader)(nil),      // 50: raft_cmdpb.RaftRequestHeader
	(*RaftResponseHeader)(nil),     // 51: raft_cmdpb.RaftResponseHeader
	(*RaftCmdRequest)(nil),         // 52: raft_cmdpb.RaftCmdRequest
	(*RaftCmdResponse)(nil),        // 53: raft_cmdpb.RaftCmdResponse
	(*metapb.Region)(nil),          // 54: metapb.Region
	(*import_sstpb.SSTMeta)(nil),   // 55: import_sstpb.SSTMeta
	(*kvrpcpb.KeyRange)(nil),       // 56: kvrpcpb.KeyRange
	(*kvrpcpb.LockInfo)(nil),       // 57: kvrpcpb.LockInfo
	(eraftpb.ConfChangeType)(0),    // 58: eraftpb.ConfChangeType
	(*metapb.Peer)(nil),            // 59: metapb.Peer
	(*eraftpb.Entry)(nil),          // 60: eraftpb.Entry
	(*metapb.RegionEpoch)(nil),     // 61: metapb.RegionEpoch
	(*errorpb.Error)(nil),          // 62: errorpb.Error
}
var file_raft_cmdpb_proto_depIdxs = []int32{
	54, // 0: raft_cmdpb.SnapResponse.region:type_name -> metapb.Region
	55, // 1: raft_cmdpb.IngestSSTRequest.sst:type_name -> import_sstpb.SSTMeta
	56, // 2: raft_cmdpb.ReadIndexRequest.key_ranges:type_name -> kvrpcpb.KeyRange
	57, // 3: raft_cmdpb.ReadIndexResponse.locked:type_name -> kvrpcpb.LockInfo
	0,  // 4: raft_cmdpb.Request.cmd_type:type_name -> raft_cmdpb.CmdType
	3,  // 5: raft_cmdpb.Request.get:type_name -> raft_cmdpb.GetRequest
	5,  // 6: raft_cmdpb.Request.put:type_name -> raft_cmdpb.PutRequest
	7,  // 7: raft_cmdpb.Request.delete:type_name -> raft_cmdpb.DeleteRequest
	11, // 8: raft_cmdpb.Request.snap:type_name -> raft_cmdpb.SnapRequest
	13, // 9: raft_cmdpb.Request.prewrite:type_name -> raft_cmdpb.PrewriteRequest
	9,  // 10: raft_cmdpb.Request.delete_range:type_name -> raft_cmdpb.DeleteRangeRequest
	15, // 11: raft_cmdpb.Request.ingest_sst:type_name -> raft_cmdpb.IngestSSTRequest
	17, // 12: raft_cmdpb.Request.read_index:type_name -> raft_cmdpb.ReadIndexRequest
	0,  // 13: raft_cmdpb.Response.cmd_type:type_name -> raft_cmdpb.CmdType
	4,  // 14: raft_cmdpb.Response.get:type_name -> raft_cmdpb.GetResponse
	6,  // 15: raft_cmdpb.Response.put:type_name -> raft_cmdpb.PutResponse
	8,  // 16: raft_cmdpb.Response.delete:type_name -> raft_cmdpb.DeleteResponse
	12, // 17: raft_cmdpb.Response.snap:type_name -> raft_cmdpb.SnapResponse
	14, // 18: raft_cmdpb.Response.prewrite:type_name -> raft_cmdpb.PrewriteResponse
	10, // 19: raft_cmdpb.Response.delte_range:type_name -> raft_cmdpb.DeleteRangeResponse
	16, // 20: raft_cmdpb.Response.ingest_sst:type_name -> raft_cmdpb.IngestSSTResponse
	18, // 21: raft_cmdpb.Response.read_index:type_name -> raft_cmdpb.ReadIndexResponse
	58, // 22: raft_cmdpb.ChangePeerRequest.change_type:type_name -> eraftpb.ConfChangeType
	59, // 23: raft_cmdpb.ChangePeerRequest.peer:type_name -> metapb.Peer
	54, // 24: raft_cmdpb.ChangePeerResponse.region:type_name -> metapb.Region
	21, // 25: raft_cmdpb.ChangePeerV2Request.changes:type_name -> raft_cmdpb.ChangePeerRequest
	54, // 26: raft_cmdpb.ChangePeerV2Response.region:type_name -> metapb.Region
	54, // 27: raft_cmdpb.SplitResponse.left:type_name -> metapb.Region
	54, // 28: raft_cmdpb.SplitResponse.right:type_name -> metapb.Region
	25, // 29: raft_cmdpb.BatchSplitRequest.requests:type_name -> raft_cmdpb.SplitRequest
	54, // 30: raft_cmdpb.BatchSplitResponse.regions:type_name -> metapb.Region
	59, // 31: raft_cmdpb.TransferLeaderRequest.peer:type_name -> metapb.Peer
	59, // 32: raft_cmdpb.TransferLeaderRequest.peers:type_name -> metapb.Peer
	54, // 33: raft_cmdpb.PrepareMergeRequest.target:type_name -> metapb.Region
	54, // 34: raft_cmdpb.CommitMergeRequest.source:type_name -> metapb.Region
	60, // 35: raft_cmdpb.CommitMergeRequest.entries:type_name -> eraftpb.Entry
	1,  // 36: raft_cmdpb.AdminRequest.cmd_type:type_name -> raft_cmdpb.AdminCmdType
	21, // 37: raft_cmdpb.AdminRequest.change_peer:type_name -> raft_cmdpb.ChangePeerRequest
	25, // 38: raft_cmdpb.AdminRequest.split:type_name -> raft_cmdpb.SplitRequest
	29, // 39: raft_cmdpb.AdminRequest.compact_log:type_name -> raft_cmdpb.CompactLogRequest
	31, // 40: raft_cmdpb.AdminRequest.transfer_leader:type_name -> raft_cmdpb.TransferLeaderRequest
	34, // 41: raft_cmdpb.AdminRequest.verify_hash:type_name -> raft_cmdpb.VerifyHashRequest
	36, // 42: raft_cmdpb.AdminRequest.prepare_merge:type_name -> raft_cmdpb.PrepareMergeRequest
	38, // 43: raft_cmdpb.AdminRequest.commit_merge:type_name -> raft_cmdpb.CommitMergeRequest
	40, // 44: raft_cmdpb.AdminRequest.rollback_merge:type_name -> raft_cmdpb.RollbackMergeRequest
	27, // 45: raft_cmdpb.AdminRequest.splits:type_name -> raft_cmdpb.BatchSplitRequest
	23, // 46: raft_cmdpb.AdminRequest.change_peer_v2:type_name -> raft_cmdpb.ChangePeerV2Request
	33, // 47: raft_cmdpb.AdminRequest.compute_hash:type_name -> raft_cmdpb.ComputeHashRequest
	1,  // 48: raft_cmdpb.AdminResponse.cmd_type:type_name -> raft_cmdpb.AdminCmdType
	22, // 49: raft_cmdpb.AdminResponse.change_peer:type_name -> raft_cmdpb.ChangePeerResponse
	26, // 50: raft_cmdpb.AdminResponse.split:type_name -> raft_cmdpb.SplitResponse
	30, // 51: raft_cmdpb.AdminResponse.compact_log:type_name -> raft_cmdpb.CompactLogResponse
	32, // 52: raft_cmdpb.AdminResponse.transfer_leader:type_name -> raft_cmdpb.TransferLeaderResponse
	35, // 53: raft_cmdpb.AdminResponse.verify_hash:type_name -> raft_cmdpb.VerifyHashResponse
	37, // 54: raft_cmdpb.AdminResponse.prepare_merge:type_name -> raft_cmdpb.PrepareMergeResponse
	39, // 55: raft_cmdpb.AdminResponse.commit_merge:type_name -> raft_cmdpb.CommitMergeResponse
	41, // 56: raft_cmdpb.AdminResponse.rollback_merge:type_name -> raft_cmdpb.RollbackMergeResponse
	28, // 57: raft_cmdpb.AdminResponse.splits:type_name -> raft_cmdpb.BatchSplitResponse
	24, // 58: raft_cmdpb.AdminResponse.change_peer_v2:type_name -> raft_cmdpb.ChangePeerV2Response
	59, // 59: raft_cmdpb.RegionLeaderResponse.leader:type_name -> metapb.Peer
	54, // 60: raft_cmdpb.RegionDetailResponse.region:type_name -> metapb.Region
	59, // 61: raft_cmdpb.RegionDetailResponse.leader:type_name -> metapb.Peer
	2,  // 62: raft_cmdpb.StatusRequest.cmd_type:type_name -> raft_cmdpb.StatusCmdType
	44, // 63: raft_cmdpb.StatusRequest.region_leader:type_name -> raft_cmdpb.RegionLeaderRequest
	46, // 64: raft_cmdpb.StatusRequest.region_detail:type_name -> raft_cmdpb.RegionDetailRequest
	2,  // 65: raft_cmdpb.StatusResponse.cmd_type:type_name -> raft_cmdpb.StatusCmdType
	45, // 66: raft_cmdpb.StatusResponse.region_leader:type_name -> raft_cmdpb.RegionLeaderResponse
	47, // 67: raft_cmdpb.StatusResponse.region_detail:type_name -> raft_cmdpb.RegionDetailResponse
	59, // 68: raft_cmdpb.RaftRequestHeader.peer:type_name -> metapb.Peer
	61, // 69: raft_cmdpb.RaftRequestHeader.region_epoch:type_name -> metapb.RegionEpoch
	62, // 70: raft_cmdpb.RaftResponseHeader.error:type_name -> errorpb.Error
	50, // 71: raft_cmdpb.RaftCmdRequest.header:type_name -> raft_cmdpb.RaftRequestHeader
	19, // 72: raft_cmdpb.RaftCmdRequest.requests:type_name -> raft_cmdpb.Request
	42, // 73: raft_cmdpb.RaftCmdRequest.admin_request:type_name -> raft_cmdpb.AdminRequest
	48, // 74: raft_cmdpb.RaftCmdRequest.status_request:type_name -> raft_cmdpb.StatusRequest
	51, // 75: raft_cmdpb.RaftCmdResponse.header:type_name -> raft_cmdpb.RaftResponseHeader
	20, // 76: raft_cmdpb.RaftCmdResponse.responses:type_name -> raft_cmdpb.Response
	43, // 77: raft_cmdpb.RaftCmdResponse.admin_response:type_name -> raft_cmdpb.AdminResponse
	49, // 78: raft_cmdpb.RaftCmdResponse.status_response:type_name -> raft_cmdpb.StatusResponse
	79, // [79:79] is the sub-list for method output_type
	79, // [79:79] is the sub-list for method input_type
	79, // [79:79] is the sub-list for extension type_name
	79, // [79:79] is the sub-list for extension extendee
	0,  // [0:79] is the sub-list for field type_name
}

func init() { file_raft_cmdpb_proto_init() }
func file_raft_cmdpb_proto_init() {
	if File_raft_cmdpb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_raft_cmdpb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrewriteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrewriteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngestSSTRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngestSSTResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePeerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePeerV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePeerV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchSplitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchSplitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompactLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompactLogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferLeaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferLeaderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyHashResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareMergeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareMergeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitMergeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitMergeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollbackMergeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollbackMergeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionLeaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionLeaderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftRequestHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftResponseHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftCmdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raft_cmdpb_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftCmdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_raft_cmdpb_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   51,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_raft_cmdpb_proto_goTypes,
		DependencyIndexes: file_raft_cmdpb_proto_depIdxs,
		EnumInfos:         file_raft_cmdpb_proto_enumTypes,
		MessageInfos:      file_raft_cmdpb_proto_msgTypes,
	}.Build()
	File_raft_cmdpb_proto = out.File
	file_raft_cmdpb_proto_rawDesc = nil
	file_raft_cmdpb_proto_goTypes = nil
	file_raft_cmdpb_proto_depIdxs = nil
}

var _ context.Context

// Code generated by Kitex v0.1.3. DO NOT EDIT.
