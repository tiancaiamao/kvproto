// Code generated by Kitex v0.1.3. DO NOT EDIT.

package importsst

import (
	"context"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
	"github.com/cloudwego/kitex/pkg/streaming"
	"github.com/cloudwego/kitex/transport"
	"github.com/pingcap/kvproto/proto/kitex_gen/import_sstpb"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	SwitchMode(ctx context.Context, Req *import_sstpb.SwitchModeRequest, callOptions ...callopt.Option) (r *import_sstpb.SwitchModeResponse, err error)
	Upload(ctx context.Context, callOptions ...callopt.Option) (stream ImportSST_UploadClient, err error)
	Ingest(ctx context.Context, Req *import_sstpb.IngestRequest, callOptions ...callopt.Option) (r *import_sstpb.IngestResponse, err error)
	Compact(ctx context.Context, Req *import_sstpb.CompactRequest, callOptions ...callopt.Option) (r *import_sstpb.CompactResponse, err error)
	SetDownloadSpeedLimit(ctx context.Context, Req *import_sstpb.SetDownloadSpeedLimitRequest, callOptions ...callopt.Option) (r *import_sstpb.SetDownloadSpeedLimitResponse, err error)
	Download(ctx context.Context, Req *import_sstpb.DownloadRequest, callOptions ...callopt.Option) (r *import_sstpb.DownloadResponse, err error)
	Write(ctx context.Context, callOptions ...callopt.Option) (stream ImportSST_WriteClient, err error)
	RawWrite(ctx context.Context, callOptions ...callopt.Option) (stream ImportSST_RawWriteClient, err error)
	MultiIngest(ctx context.Context, Req *import_sstpb.MultiIngestRequest, callOptions ...callopt.Option) (r *import_sstpb.IngestResponse, err error)
	DuplicateDetect(ctx context.Context, Req *import_sstpb.DuplicateDetectRequest, callOptions ...callopt.Option) (stream ImportSST_DuplicateDetectClient, err error)
}

type ImportSST_UploadClient interface {
	streaming.Stream
	Send(*import_sstpb.UploadRequest) error
	CloseAndRecv() (*import_sstpb.UploadResponse, error)
}

type ImportSST_WriteClient interface {
	streaming.Stream
	Send(*import_sstpb.WriteRequest) error
	CloseAndRecv() (*import_sstpb.WriteResponse, error)
}

type ImportSST_RawWriteClient interface {
	streaming.Stream
	Send(*import_sstpb.RawWriteRequest) error
	CloseAndRecv() (*import_sstpb.RawWriteResponse, error)
}

type ImportSST_DuplicateDetectClient interface {
	streaming.Stream
	Recv() (*import_sstpb.DuplicateDetectResponse, error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, client.WithTransportProtocol(transport.GRPC))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kImportSSTClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kImportSSTClient struct {
	*kClient
}

func (p *kImportSSTClient) SwitchMode(ctx context.Context, Req *import_sstpb.SwitchModeRequest, callOptions ...callopt.Option) (r *import_sstpb.SwitchModeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SwitchMode(ctx, Req)
}

func (p *kImportSSTClient) Upload(ctx context.Context, callOptions ...callopt.Option) (stream ImportSST_UploadClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Upload(ctx)
}

func (p *kImportSSTClient) Ingest(ctx context.Context, Req *import_sstpb.IngestRequest, callOptions ...callopt.Option) (r *import_sstpb.IngestResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Ingest(ctx, Req)
}

func (p *kImportSSTClient) Compact(ctx context.Context, Req *import_sstpb.CompactRequest, callOptions ...callopt.Option) (r *import_sstpb.CompactResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Compact(ctx, Req)
}

func (p *kImportSSTClient) SetDownloadSpeedLimit(ctx context.Context, Req *import_sstpb.SetDownloadSpeedLimitRequest, callOptions ...callopt.Option) (r *import_sstpb.SetDownloadSpeedLimitResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SetDownloadSpeedLimit(ctx, Req)
}

func (p *kImportSSTClient) Download(ctx context.Context, Req *import_sstpb.DownloadRequest, callOptions ...callopt.Option) (r *import_sstpb.DownloadResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Download(ctx, Req)
}

func (p *kImportSSTClient) Write(ctx context.Context, callOptions ...callopt.Option) (stream ImportSST_WriteClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Write(ctx)
}

func (p *kImportSSTClient) RawWrite(ctx context.Context, callOptions ...callopt.Option) (stream ImportSST_RawWriteClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RawWrite(ctx)
}

func (p *kImportSSTClient) MultiIngest(ctx context.Context, Req *import_sstpb.MultiIngestRequest, callOptions ...callopt.Option) (r *import_sstpb.IngestResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MultiIngest(ctx, Req)
}

func (p *kImportSSTClient) DuplicateDetect(ctx context.Context, Req *import_sstpb.DuplicateDetectRequest, callOptions ...callopt.Option) (stream ImportSST_DuplicateDetectClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DuplicateDetect(ctx, Req)
}
