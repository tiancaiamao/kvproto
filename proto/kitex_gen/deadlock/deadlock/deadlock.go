// Code generated by Kitex v0.1.2. DO NOT EDIT.

package deadlock

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"github.com/pingcap/kvproto/proto/kitex_gen/deadlock"
	"google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return deadlockServiceInfo
}

var deadlockServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Deadlock"
	handlerType := (*deadlock.Deadlock)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetWaitForEntries": kitex.NewMethodInfo(getWaitForEntriesHandler, newGetWaitForEntriesArgs, newGetWaitForEntriesResult, false),
		"Detect":            kitex.NewMethodInfo(detectHandler, newDetectArgs, newDetectResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "deadlock",
	}
	extra["streaming"] = true
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.1.2",
		Extra:           extra,
	}
	return svcInfo
}

func getWaitForEntriesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(deadlock.WaitForEntriesRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(deadlock.Deadlock).GetWaitForEntries(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetWaitForEntriesArgs:
		success, err := handler.(deadlock.Deadlock).GetWaitForEntries(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetWaitForEntriesResult)
		realResult.Success = success
	}
	return nil
}
func newGetWaitForEntriesArgs() interface{} {
	return &GetWaitForEntriesArgs{}
}

func newGetWaitForEntriesResult() interface{} {
	return &GetWaitForEntriesResult{}
}

type GetWaitForEntriesArgs struct {
	Req *deadlock.WaitForEntriesRequest
}

func (p *GetWaitForEntriesArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetWaitForEntriesArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetWaitForEntriesArgs) Unmarshal(in []byte) error {
	msg := new(deadlock.WaitForEntriesRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetWaitForEntriesArgs_Req_DEFAULT *deadlock.WaitForEntriesRequest

func (p *GetWaitForEntriesArgs) GetReq() *deadlock.WaitForEntriesRequest {
	if !p.IsSetReq() {
		return GetWaitForEntriesArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetWaitForEntriesArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetWaitForEntriesResult struct {
	Success *deadlock.WaitForEntriesResponse
}

var GetWaitForEntriesResult_Success_DEFAULT *deadlock.WaitForEntriesResponse

func (p *GetWaitForEntriesResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetWaitForEntriesResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetWaitForEntriesResult) Unmarshal(in []byte) error {
	msg := new(deadlock.WaitForEntriesResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetWaitForEntriesResult) GetSuccess() *deadlock.WaitForEntriesResponse {
	if !p.IsSetSuccess() {
		return GetWaitForEntriesResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetWaitForEntriesResult) SetSuccess(x interface{}) {
	p.Success = x.(*deadlock.WaitForEntriesResponse)
}

func (p *GetWaitForEntriesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func detectHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st := arg.(*streaming.Args).Stream
	stream := &deadlockDetectServer{st}
	return handler.(deadlock.Deadlock).Detect(stream)
}

type deadlockDetectClient struct {
	streaming.Stream
}

func (x *deadlockDetectClient) Send(m *deadlock.DeadlockRequest) error {
	return x.Stream.SendMsg(m)
}
func (x *deadlockDetectClient) Recv() (*deadlock.DeadlockResponse, error) {
	m := new(deadlock.DeadlockResponse)
	return m, x.Stream.RecvMsg(m)
}

type deadlockDetectServer struct {
	streaming.Stream
}

func (x *deadlockDetectServer) Send(m *deadlock.DeadlockResponse) error {
	return x.Stream.SendMsg(m)
}

func (x *deadlockDetectServer) Recv() (*deadlock.DeadlockRequest, error) {
	m := new(deadlock.DeadlockRequest)
	return m, x.Stream.RecvMsg(m)
}

func newDetectArgs() interface{} {
	return &DetectArgs{}
}

func newDetectResult() interface{} {
	return &DetectResult{}
}

type DetectArgs struct {
	Req *deadlock.DeadlockRequest
}

func (p *DetectArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in DetectArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *DetectArgs) Unmarshal(in []byte) error {
	msg := new(deadlock.DeadlockRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DetectArgs_Req_DEFAULT *deadlock.DeadlockRequest

func (p *DetectArgs) GetReq() *deadlock.DeadlockRequest {
	if !p.IsSetReq() {
		return DetectArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DetectArgs) IsSetReq() bool {
	return p.Req != nil
}

type DetectResult struct {
	Success *deadlock.DeadlockResponse
}

var DetectResult_Success_DEFAULT *deadlock.DeadlockResponse

func (p *DetectResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in DetectResult")
	}
	return proto.Marshal(p.Success)
}

func (p *DetectResult) Unmarshal(in []byte) error {
	msg := new(deadlock.DeadlockResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DetectResult) GetSuccess() *deadlock.DeadlockResponse {
	if !p.IsSetSuccess() {
		return DetectResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DetectResult) SetSuccess(x interface{}) {
	p.Success = x.(*deadlock.DeadlockResponse)
}

func (p *DetectResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetWaitForEntries(ctx context.Context, Req *deadlock.WaitForEntriesRequest) (r *deadlock.WaitForEntriesResponse, err error) {
	var _args GetWaitForEntriesArgs
	_args.Req = Req
	var _result GetWaitForEntriesResult
	if err = p.c.Call(ctx, "GetWaitForEntries", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Detect(ctx context.Context) (Deadlock_DetectClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "Detect", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &deadlockDetectClient{res.Stream}
	return stream, nil
}
