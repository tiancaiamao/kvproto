// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.8.0
// source: resource_usage_agent.proto

package resource_usage_agent

import (
	context "context"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	_ "github.com/pingcap/kvproto/proto/kitex_gen/github.com/gogo/protobuf/gogoproto"
	_ "github.com/pingcap/kvproto/proto/kitex_gen/rustproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CPUTimeRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceGroupTag []byte `protobuf:"bytes,1,opt,name=resource_group_tag,json=resourceGroupTag,proto3" json:"resource_group_tag,omitempty"`
	// UNIX timestamp in second.
	RecordListTimestampSec []uint64 `protobuf:"varint,2,rep,packed,name=record_list_timestamp_sec,json=recordListTimestampSec,proto3" json:"record_list_timestamp_sec,omitempty"`
	// The value can be greater than 1000ms if the requests are running parallelly.
	RecordListCpuTimeMs []uint32 `protobuf:"varint,3,rep,packed,name=record_list_cpu_time_ms,json=recordListCpuTimeMs,proto3" json:"record_list_cpu_time_ms,omitempty"`
}

func (x *CPUTimeRecord) Reset() {
	*x = CPUTimeRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_usage_agent_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUTimeRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUTimeRecord) ProtoMessage() {}

func (x *CPUTimeRecord) ProtoReflect() protoreflect.Message {
	mi := &file_resource_usage_agent_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUTimeRecord.ProtoReflect.Descriptor instead.
func (*CPUTimeRecord) Descriptor() ([]byte, []int) {
	return file_resource_usage_agent_proto_rawDescGZIP(), []int{0}
}

func (x *CPUTimeRecord) GetResourceGroupTag() []byte {
	if x != nil {
		return x.ResourceGroupTag
	}
	return nil
}

func (x *CPUTimeRecord) GetRecordListTimestampSec() []uint64 {
	if x != nil {
		return x.RecordListTimestampSec
	}
	return nil
}

func (x *CPUTimeRecord) GetRecordListCpuTimeMs() []uint32 {
	if x != nil {
		return x.RecordListCpuTimeMs
	}
	return nil
}

type ResourceUsageRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceGroupTag []byte `protobuf:"bytes,1,opt,name=resource_group_tag,json=resourceGroupTag,proto3" json:"resource_group_tag,omitempty"`
	// UNIX timestamp in second.
	RecordListTimestampSec []uint64 `protobuf:"varint,2,rep,packed,name=record_list_timestamp_sec,json=recordListTimestampSec,proto3" json:"record_list_timestamp_sec,omitempty"`
	// The value can be greater than 1000ms if the requests are running parallelly.
	RecordListCpuTimeMs []uint32 `protobuf:"varint,3,rep,packed,name=record_list_cpu_time_ms,json=recordListCpuTimeMs,proto3" json:"record_list_cpu_time_ms,omitempty"`
	// The number of reads of keys associated with resource_group_tag.
	RecordListReadKeys []uint32 `protobuf:"varint,4,rep,packed,name=record_list_read_keys,json=recordListReadKeys,proto3" json:"record_list_read_keys,omitempty"`
	// The number of writes of keys associated with resource_group_tag.
	RecordListWriteKeys []uint32 `protobuf:"varint,5,rep,packed,name=record_list_write_keys,json=recordListWriteKeys,proto3" json:"record_list_write_keys,omitempty"`
}

func (x *ResourceUsageRecord) Reset() {
	*x = ResourceUsageRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_usage_agent_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceUsageRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceUsageRecord) ProtoMessage() {}

func (x *ResourceUsageRecord) ProtoReflect() protoreflect.Message {
	mi := &file_resource_usage_agent_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceUsageRecord.ProtoReflect.Descriptor instead.
func (*ResourceUsageRecord) Descriptor() ([]byte, []int) {
	return file_resource_usage_agent_proto_rawDescGZIP(), []int{1}
}

func (x *ResourceUsageRecord) GetResourceGroupTag() []byte {
	if x != nil {
		return x.ResourceGroupTag
	}
	return nil
}

func (x *ResourceUsageRecord) GetRecordListTimestampSec() []uint64 {
	if x != nil {
		return x.RecordListTimestampSec
	}
	return nil
}

func (x *ResourceUsageRecord) GetRecordListCpuTimeMs() []uint32 {
	if x != nil {
		return x.RecordListCpuTimeMs
	}
	return nil
}

func (x *ResourceUsageRecord) GetRecordListReadKeys() []uint32 {
	if x != nil {
		return x.RecordListReadKeys
	}
	return nil
}

func (x *ResourceUsageRecord) GetRecordListWriteKeys() []uint32 {
	if x != nil {
		return x.RecordListWriteKeys
	}
	return nil
}

type EmptyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyResponse) Reset() {
	*x = EmptyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_usage_agent_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyResponse) ProtoMessage() {}

func (x *EmptyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resource_usage_agent_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyResponse.ProtoReflect.Descriptor instead.
func (*EmptyResponse) Descriptor() ([]byte, []int) {
	return file_resource_usage_agent_proto_rawDescGZIP(), []int{2}
}

type ResourceMeteringRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResourceMeteringRequest) Reset() {
	*x = ResourceMeteringRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_usage_agent_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceMeteringRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceMeteringRequest) ProtoMessage() {}

func (x *ResourceMeteringRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resource_usage_agent_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceMeteringRequest.ProtoReflect.Descriptor instead.
func (*ResourceMeteringRequest) Descriptor() ([]byte, []int) {
	return file_resource_usage_agent_proto_rawDescGZIP(), []int{3}
}

var File_resource_usage_agent_proto protoreflect.FileDescriptor

var file_resource_usage_agent_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x72, 0x75, 0x73, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xae, 0x01, 0x0a, 0x0d, 0x43, 0x50,
	0x55, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x61,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x16, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x53, 0x65, 0x63, 0x12, 0x34, 0x0a, 0x17, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x70, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x22, 0x9c, 0x02, 0x0a, 0x13, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67,
	0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x16, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x12, 0x34, 0x0a, 0x17, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x70, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x73, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64,
	0x4b, 0x65, 0x79, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x0f, 0x0a, 0x0d, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0xd1, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x0d,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x50, 0x55, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x50, 0x55, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x1a, 0x23, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x5c, 0x0a, 0x06, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x29, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x1a, 0x23, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x32, 0x83, 0x01, 0x0a, 0x16, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x75,
	0x62, 0x53, 0x75, 0x62, 0x12, 0x69, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x12, 0x2d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x30, 0x01, 0x42,
	0x63, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x2e, 0x74, 0x69, 0x6b, 0x76, 0x2e, 0x6b, 0x76, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x70, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x70, 0x2f, 0x6b, 0x76, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6b, 0x69, 0x74, 0x65, 0x78, 0x5f, 0x67, 0x65, 0x6e, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0xc8, 0xe2, 0x1e, 0x01, 0xe0, 0xe2, 0x1e, 0x01, 0xd0, 0xe2, 0x1e, 0x01,
	0xd8, 0xa8, 0x08, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_resource_usage_agent_proto_rawDescOnce sync.Once
	file_resource_usage_agent_proto_rawDescData = file_resource_usage_agent_proto_rawDesc
)

func file_resource_usage_agent_proto_rawDescGZIP() []byte {
	file_resource_usage_agent_proto_rawDescOnce.Do(func() {
		file_resource_usage_agent_proto_rawDescData = protoimpl.X.CompressGZIP(file_resource_usage_agent_proto_rawDescData)
	})
	return file_resource_usage_agent_proto_rawDescData
}

var file_resource_usage_agent_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_resource_usage_agent_proto_goTypes = []interface{}{
	(*CPUTimeRecord)(nil),           // 0: resource_usage_agent.CPUTimeRecord
	(*ResourceUsageRecord)(nil),     // 1: resource_usage_agent.ResourceUsageRecord
	(*EmptyResponse)(nil),           // 2: resource_usage_agent.EmptyResponse
	(*ResourceMeteringRequest)(nil), // 3: resource_usage_agent.ResourceMeteringRequest
}
var file_resource_usage_agent_proto_depIdxs = []int32{
	0, // 0: resource_usage_agent.ResourceUsageAgent.ReportCPUTime:input_type -> resource_usage_agent.CPUTimeRecord
	1, // 1: resource_usage_agent.ResourceUsageAgent.Report:input_type -> resource_usage_agent.ResourceUsageRecord
	3, // 2: resource_usage_agent.ResourceMeteringPubSub.Subscribe:input_type -> resource_usage_agent.ResourceMeteringRequest
	2, // 3: resource_usage_agent.ResourceUsageAgent.ReportCPUTime:output_type -> resource_usage_agent.EmptyResponse
	2, // 4: resource_usage_agent.ResourceUsageAgent.Report:output_type -> resource_usage_agent.EmptyResponse
	1, // 5: resource_usage_agent.ResourceMeteringPubSub.Subscribe:output_type -> resource_usage_agent.ResourceUsageRecord
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_resource_usage_agent_proto_init() }
func file_resource_usage_agent_proto_init() {
	if File_resource_usage_agent_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_resource_usage_agent_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUTimeRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_usage_agent_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceUsageRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_usage_agent_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_usage_agent_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceMeteringRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_resource_usage_agent_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_resource_usage_agent_proto_goTypes,
		DependencyIndexes: file_resource_usage_agent_proto_depIdxs,
		MessageInfos:      file_resource_usage_agent_proto_msgTypes,
	}.Build()
	File_resource_usage_agent_proto = out.File
	file_resource_usage_agent_proto_rawDesc = nil
	file_resource_usage_agent_proto_goTypes = nil
	file_resource_usage_agent_proto_depIdxs = nil
}

var _ context.Context

// Code generated by Kitex v0.1.3. DO NOT EDIT.

type ResourceUsageAgent interface {
	ReportCPUTime(stream ResourceUsageAgent_ReportCPUTimeServer) (err error)
	Report(stream ResourceUsageAgent_ReportServer) (err error)
}

type ResourceUsageAgent_ReportCPUTimeServer interface {
	streaming.Stream
	Recv() (*CPUTimeRecord, error)
	SendAndClose(*EmptyResponse) error
}

type ResourceUsageAgent_ReportServer interface {
	streaming.Stream
	Recv() (*ResourceUsageRecord, error)
	SendAndClose(*EmptyResponse) error
}

type ResourceMeteringPubSub interface {
	Subscribe(req *ResourceMeteringRequest, stream ResourceMeteringPubSub_SubscribeServer) (err error)
}

type ResourceMeteringPubSub_SubscribeServer interface {
	streaming.Stream
	Send(*ResourceUsageRecord) error
}
