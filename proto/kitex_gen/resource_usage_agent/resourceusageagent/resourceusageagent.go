// Code generated by Kitex v0.1.3. DO NOT EDIT.

package resourceusageagent

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"github.com/pingcap/kvproto/proto/kitex_gen/resource_usage_agent"
	"google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return resourceUsageAgentServiceInfo
}

var resourceUsageAgentServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ResourceUsageAgent"
	handlerType := (*resource_usage_agent.ResourceUsageAgent)(nil)
	methods := map[string]kitex.MethodInfo{
		"ReportCPUTime": kitex.NewMethodInfo(reportCPUTimeHandler, newReportCPUTimeArgs, newReportCPUTimeResult, false),
		"Report":        kitex.NewMethodInfo(reportHandler, newReportArgs, newReportResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "resource_usage_agent",
	}
	extra["streaming"] = true
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.1.3",
		Extra:           extra,
	}
	return svcInfo
}

func reportCPUTimeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st := arg.(*streaming.Args).Stream
	stream := &resourceUsageAgentReportCPUTimeServer{st}
	return handler.(resource_usage_agent.ResourceUsageAgent).ReportCPUTime(stream)
}

type resourceUsageAgentReportCPUTimeClient struct {
	streaming.Stream
}

func (x *resourceUsageAgentReportCPUTimeClient) Send(m *resource_usage_agent.CPUTimeRecord) error {
	return x.Stream.SendMsg(m)
}
func (x *resourceUsageAgentReportCPUTimeClient) CloseAndRecv() (*resource_usage_agent.EmptyResponse, error) {
	if err := x.Stream.Close(); err != nil {
		return nil, err
	}
	m := new(resource_usage_agent.EmptyResponse)
	return m, x.Stream.RecvMsg(m)
}

type resourceUsageAgentReportCPUTimeServer struct {
	streaming.Stream
}

func (x *resourceUsageAgentReportCPUTimeServer) SendAndClose(m *resource_usage_agent.EmptyResponse) error {
	return x.Stream.SendMsg(m)
}

func (x *resourceUsageAgentReportCPUTimeServer) Recv() (*resource_usage_agent.CPUTimeRecord, error) {
	m := new(resource_usage_agent.CPUTimeRecord)
	return m, x.Stream.RecvMsg(m)
}

func newReportCPUTimeArgs() interface{} {
	return &ReportCPUTimeArgs{}
}

func newReportCPUTimeResult() interface{} {
	return &ReportCPUTimeResult{}
}

type ReportCPUTimeArgs struct {
	Req *resource_usage_agent.CPUTimeRecord
}

func (p *ReportCPUTimeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ReportCPUTimeArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ReportCPUTimeArgs) Unmarshal(in []byte) error {
	msg := new(resource_usage_agent.CPUTimeRecord)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ReportCPUTimeArgs_Req_DEFAULT *resource_usage_agent.CPUTimeRecord

func (p *ReportCPUTimeArgs) GetReq() *resource_usage_agent.CPUTimeRecord {
	if !p.IsSetReq() {
		return ReportCPUTimeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ReportCPUTimeArgs) IsSetReq() bool {
	return p.Req != nil
}

type ReportCPUTimeResult struct {
	Success *resource_usage_agent.EmptyResponse
}

var ReportCPUTimeResult_Success_DEFAULT *resource_usage_agent.EmptyResponse

func (p *ReportCPUTimeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ReportCPUTimeResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ReportCPUTimeResult) Unmarshal(in []byte) error {
	msg := new(resource_usage_agent.EmptyResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ReportCPUTimeResult) GetSuccess() *resource_usage_agent.EmptyResponse {
	if !p.IsSetSuccess() {
		return ReportCPUTimeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ReportCPUTimeResult) SetSuccess(x interface{}) {
	p.Success = x.(*resource_usage_agent.EmptyResponse)
}

func (p *ReportCPUTimeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func reportHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st := arg.(*streaming.Args).Stream
	stream := &resourceUsageAgentReportServer{st}
	return handler.(resource_usage_agent.ResourceUsageAgent).Report(stream)
}

type resourceUsageAgentReportClient struct {
	streaming.Stream
}

func (x *resourceUsageAgentReportClient) Send(m *resource_usage_agent.ResourceUsageRecord) error {
	return x.Stream.SendMsg(m)
}
func (x *resourceUsageAgentReportClient) CloseAndRecv() (*resource_usage_agent.EmptyResponse, error) {
	if err := x.Stream.Close(); err != nil {
		return nil, err
	}
	m := new(resource_usage_agent.EmptyResponse)
	return m, x.Stream.RecvMsg(m)
}

type resourceUsageAgentReportServer struct {
	streaming.Stream
}

func (x *resourceUsageAgentReportServer) SendAndClose(m *resource_usage_agent.EmptyResponse) error {
	return x.Stream.SendMsg(m)
}

func (x *resourceUsageAgentReportServer) Recv() (*resource_usage_agent.ResourceUsageRecord, error) {
	m := new(resource_usage_agent.ResourceUsageRecord)
	return m, x.Stream.RecvMsg(m)
}

func newReportArgs() interface{} {
	return &ReportArgs{}
}

func newReportResult() interface{} {
	return &ReportResult{}
}

type ReportArgs struct {
	Req *resource_usage_agent.ResourceUsageRecord
}

func (p *ReportArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ReportArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ReportArgs) Unmarshal(in []byte) error {
	msg := new(resource_usage_agent.ResourceUsageRecord)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ReportArgs_Req_DEFAULT *resource_usage_agent.ResourceUsageRecord

func (p *ReportArgs) GetReq() *resource_usage_agent.ResourceUsageRecord {
	if !p.IsSetReq() {
		return ReportArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ReportArgs) IsSetReq() bool {
	return p.Req != nil
}

type ReportResult struct {
	Success *resource_usage_agent.EmptyResponse
}

var ReportResult_Success_DEFAULT *resource_usage_agent.EmptyResponse

func (p *ReportResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ReportResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ReportResult) Unmarshal(in []byte) error {
	msg := new(resource_usage_agent.EmptyResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ReportResult) GetSuccess() *resource_usage_agent.EmptyResponse {
	if !p.IsSetSuccess() {
		return ReportResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ReportResult) SetSuccess(x interface{}) {
	p.Success = x.(*resource_usage_agent.EmptyResponse)
}

func (p *ReportResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ReportCPUTime(ctx context.Context) (ResourceUsageAgent_ReportCPUTimeClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "ReportCPUTime", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &resourceUsageAgentReportCPUTimeClient{res.Stream}
	return stream, nil
}

func (p *kClient) Report(ctx context.Context) (ResourceUsageAgent_ReportClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "Report", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &resourceUsageAgentReportClient{res.Stream}
	return stream, nil
}
