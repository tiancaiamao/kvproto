// Code generated by Kitex v0.1.3. DO NOT EDIT.

package resourcemeteringpubsub

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"github.com/pingcap/kvproto/proto/kitex_gen/resource_usage_agent"
	"google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return resourceMeteringPubSubServiceInfo
}

var resourceMeteringPubSubServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ResourceMeteringPubSub"
	handlerType := (*resource_usage_agent.ResourceMeteringPubSub)(nil)
	methods := map[string]kitex.MethodInfo{
		"Subscribe": kitex.NewMethodInfo(subscribeHandler, newSubscribeArgs, newSubscribeResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "resource_usage_agent",
	}
	extra["streaming"] = true
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.1.3",
		Extra:           extra,
	}
	return svcInfo
}

func subscribeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st := arg.(*streaming.Args).Stream
	stream := &resourceMeteringPubSubSubscribeServer{st}
	req := new(resource_usage_agent.ResourceMeteringRequest)
	if err := st.RecvMsg(req); err != nil {
		return err
	}
	return handler.(resource_usage_agent.ResourceMeteringPubSub).Subscribe(req, stream)
}

type resourceMeteringPubSubSubscribeClient struct {
	streaming.Stream
}

func (x *resourceMeteringPubSubSubscribeClient) Recv() (*resource_usage_agent.ResourceUsageRecord, error) {
	m := new(resource_usage_agent.ResourceUsageRecord)
	return m, x.Stream.RecvMsg(m)
}

type resourceMeteringPubSubSubscribeServer struct {
	streaming.Stream
}

func (x *resourceMeteringPubSubSubscribeServer) Send(m *resource_usage_agent.ResourceUsageRecord) error {
	return x.Stream.SendMsg(m)
}

func newSubscribeArgs() interface{} {
	return &SubscribeArgs{}
}

func newSubscribeResult() interface{} {
	return &SubscribeResult{}
}

type SubscribeArgs struct {
	Req *resource_usage_agent.ResourceMeteringRequest
}

func (p *SubscribeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in SubscribeArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *SubscribeArgs) Unmarshal(in []byte) error {
	msg := new(resource_usage_agent.ResourceMeteringRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SubscribeArgs_Req_DEFAULT *resource_usage_agent.ResourceMeteringRequest

func (p *SubscribeArgs) GetReq() *resource_usage_agent.ResourceMeteringRequest {
	if !p.IsSetReq() {
		return SubscribeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SubscribeArgs) IsSetReq() bool {
	return p.Req != nil
}

type SubscribeResult struct {
	Success *resource_usage_agent.ResourceUsageRecord
}

var SubscribeResult_Success_DEFAULT *resource_usage_agent.ResourceUsageRecord

func (p *SubscribeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in SubscribeResult")
	}
	return proto.Marshal(p.Success)
}

func (p *SubscribeResult) Unmarshal(in []byte) error {
	msg := new(resource_usage_agent.ResourceUsageRecord)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SubscribeResult) GetSuccess() *resource_usage_agent.ResourceUsageRecord {
	if !p.IsSetSuccess() {
		return SubscribeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SubscribeResult) SetSuccess(x interface{}) {
	p.Success = x.(*resource_usage_agent.ResourceUsageRecord)
}

func (p *SubscribeResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Subscribe(ctx context.Context, req *resource_usage_agent.ResourceMeteringRequest) (ResourceMeteringPubSub_SubscribeClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "Subscribe", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &resourceMeteringPubSubSubscribeClient{res.Stream}
	if err := stream.Stream.SendMsg(req); err != nil {
		return nil, err
	}
	if err := stream.Stream.Close(); err != nil {
		return nil, err
	}
	return stream, nil
}
