// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.8.0
// source: kvrpcpb.proto

package kvrpcpb

import (
	context "context"
	deadlock "github.com/pingcap/kvproto/proto/kitex_gen/deadlock"
	errorpb "github.com/pingcap/kvproto/proto/kitex_gen/errorpb"
	_ "github.com/pingcap/kvproto/proto/kitex_gen/github.com/gogo/protobuf/gogoproto"
	metapb "github.com/pingcap/kvproto/proto/kitex_gen/metapb"
	_ "github.com/pingcap/kvproto/proto/kitex_gen/rustproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The API version the server and the client is using.
// See more details in https://github.com/tikv/rfcs/blob/master/text/0069-api-v2.md.
type APIVersion int32

const (
	// Mainly for TxnKV and not safe to use RawKV along with TxnKV.
	//
	// V1 server only accepts V1 requests. Except that the V1 raw requests with TTL
	// will be rejected.
	APIVersion_V1 APIVersion = 0
	// Only RawKV is available, and then 8 bytes representing the unix timestamp in
	// seconds for expiring time will be append to the value of all RawKV kv pairs.
	//
	// ------------------------------------------------------------
	// | User value     | Expire Ts                               |
	// ------------------------------------------------------------
	// | 0x12 0x34 0x56 | 0x00 0x00 0x00 0x00 0x00 0x00 0xff 0xff |
	// ------------------------------------------------------------
	//
	// V1TTL server only accepts V1 raw requests.
	// V1 client should not use `V1TTL` in request. V1 client should always send `V1`.
	APIVersion_V1TTL APIVersion = 1
	// TxnKV keys start with `x{keyspace id}`, `m`, or `t`.
	//
	// RawKV keys must be in `default` CF and all start with `r{keyspace id}` prefix,
	// where the keyspace id is in varint format (little endian), whose bytes expect
	// the last one always sets the most significant bit to 1.
	//
	// The last byte in the raw value must be a meta flag. For example:
	//
	// --------------------------------------
	// | User value     | Meta flags        |
	// --------------------------------------
	// | 0x12 0x34 0x56 | 0x00 (0b00000000) |
	// --------------------------------------
	//
	// As shown in the example below, the least significant bit of the meta flag
	// indicates whether the value contains 8 bytes expire ts at the very left to the
	// meta flags.
	//
	// --------------------------------------------------------------------------------
	// | User value     | Expire Ts                               | Meta flags        |
	// --------------------------------------------------------------------------------
	// | 0x12 0x34 0x56 | 0x00 0x00 0x00 0x00 0x00 0x00 0xff 0xff | 0x01 (0b00000001) |
	// --------------------------------------------------------------------------------
	//
	// V2 server accpets V2 requests and V1 txn requests that statrts with TiDB key
	// prefix (`m` and `t`).
	APIVersion_V2 APIVersion = 2
)

// Enum value maps for APIVersion.
var (
	APIVersion_name = map[int32]string{
		0: "V1",
		1: "V1TTL",
		2: "V2",
	}
	APIVersion_value = map[string]int32{
		"V1":    0,
		"V1TTL": 1,
		"V2":    2,
	}
)

func (x APIVersion) Enum() *APIVersion {
	p := new(APIVersion)
	*p = x
	return p
}

func (x APIVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APIVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_kvrpcpb_proto_enumTypes[0].Descriptor()
}

func (APIVersion) Type() protoreflect.EnumType {
	return &file_kvrpcpb_proto_enumTypes[0]
}

func (x APIVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use APIVersion.Descriptor instead.
func (APIVersion) EnumDescriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{0}
}

type CommandPri int32

const (
	CommandPri_Normal CommandPri = 0 // Normal is the default value.
	CommandPri_Low    CommandPri = 1
	CommandPri_High   CommandPri = 2
)

// Enum value maps for CommandPri.
var (
	CommandPri_name = map[int32]string{
		0: "Normal",
		1: "Low",
		2: "High",
	}
	CommandPri_value = map[string]int32{
		"Normal": 0,
		"Low":    1,
		"High":   2,
	}
)

func (x CommandPri) Enum() *CommandPri {
	p := new(CommandPri)
	*p = x
	return p
}

func (x CommandPri) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommandPri) Descriptor() protoreflect.EnumDescriptor {
	return file_kvrpcpb_proto_enumTypes[1].Descriptor()
}

func (CommandPri) Type() protoreflect.EnumType {
	return &file_kvrpcpb_proto_enumTypes[1]
}

func (x CommandPri) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommandPri.Descriptor instead.
func (CommandPri) EnumDescriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{1}
}

type IsolationLevel int32

const (
	IsolationLevel_SI IsolationLevel = 0 // SI = snapshot isolation
	IsolationLevel_RC IsolationLevel = 1 // RC = read committed
)

// Enum value maps for IsolationLevel.
var (
	IsolationLevel_name = map[int32]string{
		0: "SI",
		1: "RC",
	}
	IsolationLevel_value = map[string]int32{
		"SI": 0,
		"RC": 1,
	}
)

func (x IsolationLevel) Enum() *IsolationLevel {
	p := new(IsolationLevel)
	*p = x
	return p
}

func (x IsolationLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsolationLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_kvrpcpb_proto_enumTypes[2].Descriptor()
}

func (IsolationLevel) Type() protoreflect.EnumType {
	return &file_kvrpcpb_proto_enumTypes[2]
}

func (x IsolationLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsolationLevel.Descriptor instead.
func (IsolationLevel) EnumDescriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{2}
}

// Operation allowed info during each TiKV storage threshold.
type DiskFullOpt int32

const (
	DiskFullOpt_NotAllowedOnFull     DiskFullOpt = 0 // The default value, means operations are not allowed either under almost full or already full.
	DiskFullOpt_AllowedOnAlmostFull  DiskFullOpt = 1 // Means operations will be allowed when disk is almost full.
	DiskFullOpt_AllowedOnAlreadyFull DiskFullOpt = 2 // Means operations will be allowed when disk is already full.
)

// Enum value maps for DiskFullOpt.
var (
	DiskFullOpt_name = map[int32]string{
		0: "NotAllowedOnFull",
		1: "AllowedOnAlmostFull",
		2: "AllowedOnAlreadyFull",
	}
	DiskFullOpt_value = map[string]int32{
		"NotAllowedOnFull":     0,
		"AllowedOnAlmostFull":  1,
		"AllowedOnAlreadyFull": 2,
	}
)

func (x DiskFullOpt) Enum() *DiskFullOpt {
	p := new(DiskFullOpt)
	*p = x
	return p
}

func (x DiskFullOpt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiskFullOpt) Descriptor() protoreflect.EnumDescriptor {
	return file_kvrpcpb_proto_enumTypes[3].Descriptor()
}

func (DiskFullOpt) Type() protoreflect.EnumType {
	return &file_kvrpcpb_proto_enumTypes[3]
}

func (x DiskFullOpt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiskFullOpt.Descriptor instead.
func (DiskFullOpt) EnumDescriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{3}
}

type Op int32

const (
	Op_Put      Op = 0
	Op_Del      Op = 1
	Op_Lock     Op = 2
	Op_Rollback Op = 3
	// insert operation has a constraint that key should not exist before.
	Op_Insert          Op = 4
	Op_PessimisticLock Op = 5
	Op_CheckNotExists  Op = 6
)

// Enum value maps for Op.
var (
	Op_name = map[int32]string{
		0: "Put",
		1: "Del",
		2: "Lock",
		3: "Rollback",
		4: "Insert",
		5: "PessimisticLock",
		6: "CheckNotExists",
	}
	Op_value = map[string]int32{
		"Put":             0,
		"Del":             1,
		"Lock":            2,
		"Rollback":        3,
		"Insert":          4,
		"PessimisticLock": 5,
		"CheckNotExists":  6,
	}
)

func (x Op) Enum() *Op {
	p := new(Op)
	*p = x
	return p
}

func (x Op) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Op) Descriptor() protoreflect.EnumDescriptor {
	return file_kvrpcpb_proto_enumTypes[4].Descriptor()
}

func (Op) Type() protoreflect.EnumType {
	return &file_kvrpcpb_proto_enumTypes[4]
}

func (x Op) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Op.Descriptor instead.
func (Op) EnumDescriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{4}
}

type Assertion int32

const (
	Assertion_None     Assertion = 0
	Assertion_Exist    Assertion = 1
	Assertion_NotExist Assertion = 2
)

// Enum value maps for Assertion.
var (
	Assertion_name = map[int32]string{
		0: "None",
		1: "Exist",
		2: "NotExist",
	}
	Assertion_value = map[string]int32{
		"None":     0,
		"Exist":    1,
		"NotExist": 2,
	}
)

func (x Assertion) Enum() *Assertion {
	p := new(Assertion)
	*p = x
	return p
}

func (x Assertion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Assertion) Descriptor() protoreflect.EnumDescriptor {
	return file_kvrpcpb_proto_enumTypes[5].Descriptor()
}

func (Assertion) Type() protoreflect.EnumType {
	return &file_kvrpcpb_proto_enumTypes[5]
}

func (x Assertion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Assertion.Descriptor instead.
func (Assertion) EnumDescriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{5}
}

type Action int32

const (
	Action_NoAction                     Action = 0
	Action_TTLExpireRollback            Action = 1
	Action_LockNotExistRollback         Action = 2
	Action_MinCommitTSPushed            Action = 3
	Action_TTLExpirePessimisticRollback Action = 4
	Action_LockNotExistDoNothing        Action = 5
)

// Enum value maps for Action.
var (
	Action_name = map[int32]string{
		0: "NoAction",
		1: "TTLExpireRollback",
		2: "LockNotExistRollback",
		3: "MinCommitTSPushed",
		4: "TTLExpirePessimisticRollback",
		5: "LockNotExistDoNothing",
	}
	Action_value = map[string]int32{
		"NoAction":                     0,
		"TTLExpireRollback":            1,
		"LockNotExistRollback":         2,
		"MinCommitTSPushed":            3,
		"TTLExpirePessimisticRollback": 4,
		"LockNotExistDoNothing":        5,
	}
)

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}

func (x Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action) Descriptor() protoreflect.EnumDescriptor {
	return file_kvrpcpb_proto_enumTypes[6].Descriptor()
}

func (Action) Type() protoreflect.EnumType {
	return &file_kvrpcpb_proto_enumTypes[6]
}

func (x Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action.Descriptor instead.
func (Action) EnumDescriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{6}
}

type ExtraOp int32

const (
	ExtraOp_Noop ExtraOp = 0
	// ReadOldValue represents to output the previous value for delete/update operations.
	ExtraOp_ReadOldValue ExtraOp = 1
)

// Enum value maps for ExtraOp.
var (
	ExtraOp_name = map[int32]string{
		0: "Noop",
		1: "ReadOldValue",
	}
	ExtraOp_value = map[string]int32{
		"Noop":         0,
		"ReadOldValue": 1,
	}
)

func (x ExtraOp) Enum() *ExtraOp {
	p := new(ExtraOp)
	*p = x
	return p
}

func (x ExtraOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExtraOp) Descriptor() protoreflect.EnumDescriptor {
	return file_kvrpcpb_proto_enumTypes[7].Descriptor()
}

func (ExtraOp) Type() protoreflect.EnumType {
	return &file_kvrpcpb_proto_enumTypes[7]
}

func (x ExtraOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExtraOp.Descriptor instead.
func (ExtraOp) EnumDescriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{7}
}

type ChecksumAlgorithm int32

const (
	ChecksumAlgorithm_Crc64_Xor ChecksumAlgorithm = 0
)

// Enum value maps for ChecksumAlgorithm.
var (
	ChecksumAlgorithm_name = map[int32]string{
		0: "Crc64_Xor",
	}
	ChecksumAlgorithm_value = map[string]int32{
		"Crc64_Xor": 0,
	}
)

func (x ChecksumAlgorithm) Enum() *ChecksumAlgorithm {
	p := new(ChecksumAlgorithm)
	*p = x
	return p
}

func (x ChecksumAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChecksumAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_kvrpcpb_proto_enumTypes[8].Descriptor()
}

func (ChecksumAlgorithm) Type() protoreflect.EnumType {
	return &file_kvrpcpb_proto_enumTypes[8]
}

func (x ChecksumAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChecksumAlgorithm.Descriptor instead.
func (ChecksumAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{8}
}

// A transactional get command. Lookup a value for `key` in the transaction with
// starting timestamp = `version`.
type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Key     []byte   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Version uint64   `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{0}
}

func (x *GetRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *GetRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *GetRequest) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type GetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A region error indicates that the request was sent to the wrong TiKV node
	// (or other, similar errors).
	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	// A value could not be retrieved due to the state of the database for the requested key.
	Error *KeyError `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// A successful result.
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// True if the key does not exist in the database.
	NotFound bool `protobuf:"varint,4,opt,name=not_found,json=notFound,proto3" json:"not_found,omitempty"`
	// Time and scan details when processing the request.
	ExecDetailsV2 *ExecDetailsV2 `protobuf:"bytes,6,opt,name=exec_details_v2,json=execDetailsV2,proto3" json:"exec_details_v2,omitempty"`
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{1}
}

func (x *GetResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *GetResponse) GetError() *KeyError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *GetResponse) GetNotFound() bool {
	if x != nil {
		return x.NotFound
	}
	return false
}

func (x *GetResponse) GetExecDetailsV2() *ExecDetailsV2 {
	if x != nil {
		return x.ExecDetailsV2
	}
	return nil
}

// Scan fetches values for a range of keys; it is part of the transaction with
// starting timestamp = `version`.
type ScanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context  *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	StartKey []byte   `protobuf:"bytes,2,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	// The maximum number of results to return.
	Limit   uint32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Version uint64 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	// Return only the keys found by scanning, not their values.
	KeyOnly bool `protobuf:"varint,5,opt,name=key_only,json=keyOnly,proto3" json:"key_only,omitempty"`
	Reverse bool `protobuf:"varint,6,opt,name=reverse,proto3" json:"reverse,omitempty"`
	// For compatibility, when scanning forward, the range to scan is [start_key, end_key), where start_key < end_key;
	// and when scanning backward, it scans [end_key, start_key) in descending order, where end_key < start_key.
	EndKey []byte `protobuf:"bytes,7,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
	// If sample_step > 0, skips 'sample_step - 1' number of keys after each returned key.
	// locks are not checked.
	SampleStep uint32 `protobuf:"varint,8,opt,name=sample_step,json=sampleStep,proto3" json:"sample_step,omitempty"`
}

func (x *ScanRequest) Reset() {
	*x = ScanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanRequest) ProtoMessage() {}

func (x *ScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanRequest.ProtoReflect.Descriptor instead.
func (*ScanRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{2}
}

func (x *ScanRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ScanRequest) GetStartKey() []byte {
	if x != nil {
		return x.StartKey
	}
	return nil
}

func (x *ScanRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ScanRequest) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ScanRequest) GetKeyOnly() bool {
	if x != nil {
		return x.KeyOnly
	}
	return false
}

func (x *ScanRequest) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *ScanRequest) GetEndKey() []byte {
	if x != nil {
		return x.EndKey
	}
	return nil
}

func (x *ScanRequest) GetSampleStep() uint32 {
	if x != nil {
		return x.SampleStep
	}
	return 0
}

type ScanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	// Each KvPair may contain a key error.
	Pairs []*KvPair `protobuf:"bytes,2,rep,name=pairs,proto3" json:"pairs,omitempty"`
	// This KeyError exists when some key is locked but we cannot check locks of all keys.
	// In this case, `pairs` should be empty and the client should redo scanning all the keys
	// after resolving the lock.
	Error *KeyError `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ScanResponse) Reset() {
	*x = ScanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanResponse) ProtoMessage() {}

func (x *ScanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanResponse.ProtoReflect.Descriptor instead.
func (*ScanResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{3}
}

func (x *ScanResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *ScanResponse) GetPairs() []*KvPair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

func (x *ScanResponse) GetError() *KeyError {
	if x != nil {
		return x.Error
	}
	return nil
}

// A prewrite is the first phase of writing to TiKV. It contains all data to be written in a transaction.
// TiKV will write the data in a preliminary state. Data cannot be read until it has been committed.
// The client should only commit a transaction once all prewrites succeed.
type PrewriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	// The data to be written to the database.
	Mutations []*Mutation `protobuf:"bytes,2,rep,name=mutations,proto3" json:"mutations,omitempty"`
	// The client picks one key to be primary (unrelated to the primary key concept in SQL). This
	// key's lock is the source of truth for the state of a transaction. All other locks due to a
	// transaction will point to the primary lock.
	PrimaryLock []byte `protobuf:"bytes,3,opt,name=primary_lock,json=primaryLock,proto3" json:"primary_lock,omitempty"`
	// Identifies the transaction being written.
	StartVersion uint64 `protobuf:"varint,4,opt,name=start_version,json=startVersion,proto3" json:"start_version,omitempty"`
	LockTtl      uint64 `protobuf:"varint,5,opt,name=lock_ttl,json=lockTtl,proto3" json:"lock_ttl,omitempty"`
	// TiKV can skip some checks, used for speeding up data migration.
	SkipConstraintCheck bool `protobuf:"varint,6,opt,name=skip_constraint_check,json=skipConstraintCheck,proto3" json:"skip_constraint_check,omitempty"`
	// For pessimistic transaction, some mutations don't need to be locked, for example, non-unique index key.
	IsPessimisticLock []bool `protobuf:"varint,7,rep,packed,name=is_pessimistic_lock,json=isPessimisticLock,proto3" json:"is_pessimistic_lock,omitempty"`
	// How many keys this transaction involves in this region.
	TxnSize uint64 `protobuf:"varint,8,opt,name=txn_size,json=txnSize,proto3" json:"txn_size,omitempty"`
	// For pessimistic transactions only; used to check if a conflict lock is already committed.
	ForUpdateTs uint64 `protobuf:"varint,9,opt,name=for_update_ts,json=forUpdateTs,proto3" json:"for_update_ts,omitempty"`
	// If min_commit_ts > 0, this is a large transaction request, the final commit_ts
	// will be inferred from `min_commit_ts`.
	MinCommitTs uint64 `protobuf:"varint,10,opt,name=min_commit_ts,json=minCommitTs,proto3" json:"min_commit_ts,omitempty"`
	// When async commit is enabled, `secondaries` should be set as the key list of all secondary
	// locks if the request prewrites the primary lock.
	UseAsyncCommit bool     `protobuf:"varint,11,opt,name=use_async_commit,json=useAsyncCommit,proto3" json:"use_async_commit,omitempty"`
	Secondaries    [][]byte `protobuf:"bytes,12,rep,name=secondaries,proto3" json:"secondaries,omitempty"`
	// When the transaction involves only one region, it's possible to commit the transaction
	// directly with 1PC protocol.
	TryOnePc bool `protobuf:"varint,13,opt,name=try_one_pc,json=tryOnePc,proto3" json:"try_one_pc,omitempty"`
	// The max commit ts is reserved for limiting the commit ts of 1PC or async commit, which can be used to avoid
	// inconsistency with schema change.
	MaxCommitTs uint64 `protobuf:"varint,14,opt,name=max_commit_ts,json=maxCommitTs,proto3" json:"max_commit_ts,omitempty"`
}

func (x *PrewriteRequest) Reset() {
	*x = PrewriteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrewriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrewriteRequest) ProtoMessage() {}

func (x *PrewriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrewriteRequest.ProtoReflect.Descriptor instead.
func (*PrewriteRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{4}
}

func (x *PrewriteRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *PrewriteRequest) GetMutations() []*Mutation {
	if x != nil {
		return x.Mutations
	}
	return nil
}

func (x *PrewriteRequest) GetPrimaryLock() []byte {
	if x != nil {
		return x.PrimaryLock
	}
	return nil
}

func (x *PrewriteRequest) GetStartVersion() uint64 {
	if x != nil {
		return x.StartVersion
	}
	return 0
}

func (x *PrewriteRequest) GetLockTtl() uint64 {
	if x != nil {
		return x.LockTtl
	}
	return 0
}

func (x *PrewriteRequest) GetSkipConstraintCheck() bool {
	if x != nil {
		return x.SkipConstraintCheck
	}
	return false
}

func (x *PrewriteRequest) GetIsPessimisticLock() []bool {
	if x != nil {
		return x.IsPessimisticLock
	}
	return nil
}

func (x *PrewriteRequest) GetTxnSize() uint64 {
	if x != nil {
		return x.TxnSize
	}
	return 0
}

func (x *PrewriteRequest) GetForUpdateTs() uint64 {
	if x != nil {
		return x.ForUpdateTs
	}
	return 0
}

func (x *PrewriteRequest) GetMinCommitTs() uint64 {
	if x != nil {
		return x.MinCommitTs
	}
	return 0
}

func (x *PrewriteRequest) GetUseAsyncCommit() bool {
	if x != nil {
		return x.UseAsyncCommit
	}
	return false
}

func (x *PrewriteRequest) GetSecondaries() [][]byte {
	if x != nil {
		return x.Secondaries
	}
	return nil
}

func (x *PrewriteRequest) GetTryOnePc() bool {
	if x != nil {
		return x.TryOnePc
	}
	return false
}

func (x *PrewriteRequest) GetMaxCommitTs() uint64 {
	if x != nil {
		return x.MaxCommitTs
	}
	return 0
}

type PrewriteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	Errors      []*KeyError    `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	// 0 if the min_commit_ts is not ready or any other reason that async
	// commit cannot proceed. The client can then fallback to normal way to
	// continue committing the transaction if prewrite are all finished.
	MinCommitTs uint64 `protobuf:"varint,3,opt,name=min_commit_ts,json=minCommitTs,proto3" json:"min_commit_ts,omitempty"`
	// When the transaction is successfully committed with 1PC protocol, this field will be set to
	// the commit ts of the transaction. Otherwise, if TiKV failed to commit it with 1PC or the
	// transaction is not 1PC, the value will be 0.
	OnePcCommitTs uint64 `protobuf:"varint,4,opt,name=one_pc_commit_ts,json=onePcCommitTs,proto3" json:"one_pc_commit_ts,omitempty"`
}

func (x *PrewriteResponse) Reset() {
	*x = PrewriteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrewriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrewriteResponse) ProtoMessage() {}

func (x *PrewriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrewriteResponse.ProtoReflect.Descriptor instead.
func (*PrewriteResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{5}
}

func (x *PrewriteResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *PrewriteResponse) GetErrors() []*KeyError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *PrewriteResponse) GetMinCommitTs() uint64 {
	if x != nil {
		return x.MinCommitTs
	}
	return 0
}

func (x *PrewriteResponse) GetOnePcCommitTs() uint64 {
	if x != nil {
		return x.OnePcCommitTs
	}
	return 0
}

// Lock a set of keys to prepare to write to them.
type PessimisticLockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	// In this case every `Op` of the mutations must be `PessimisticLock`.
	Mutations    []*Mutation `protobuf:"bytes,2,rep,name=mutations,proto3" json:"mutations,omitempty"`
	PrimaryLock  []byte      `protobuf:"bytes,3,opt,name=primary_lock,json=primaryLock,proto3" json:"primary_lock,omitempty"`
	StartVersion uint64      `protobuf:"varint,4,opt,name=start_version,json=startVersion,proto3" json:"start_version,omitempty"`
	LockTtl      uint64      `protobuf:"varint,5,opt,name=lock_ttl,json=lockTtl,proto3" json:"lock_ttl,omitempty"`
	// Each locking command in a pessimistic transaction has its own timestamp. If locking fails, then
	// the corresponding SQL statement can be retried with a later timestamp, TiDB does not need to
	// retry the whole transaction. The name comes from the `SELECT ... FOR UPDATE` SQL statement which
	// is a locking read. Each `SELECT ... FOR UPDATE` in a transaction will be assigned its own
	// timestamp.
	ForUpdateTs uint64 `protobuf:"varint,6,opt,name=for_update_ts,json=forUpdateTs,proto3" json:"for_update_ts,omitempty"`
	// If the request is the first lock request, we don't need to detect deadlock.
	IsFirstLock bool `protobuf:"varint,7,opt,name=is_first_lock,json=isFirstLock,proto3" json:"is_first_lock,omitempty"`
	// Time to wait for lock released in milliseconds when encountering locks.
	// 0 means using default timeout in TiKV. Negative means no wait.
	WaitTimeout int64 `protobuf:"varint,8,opt,name=wait_timeout,json=waitTimeout,proto3" json:"wait_timeout,omitempty"`
	// If it is true, TiKV will acquire the pessimistic lock regardless of write conflict
	// and return the latest value. It's only supported for single mutation.
	Force bool `protobuf:"varint,9,opt,name=force,proto3" json:"force,omitempty"`
	// If it is true, TiKV will return values of the keys if no error, so TiDB can cache the values for
	// later read in the same transaction.
	// When 'force' is set to true, this field is ignored.
	ReturnValues bool `protobuf:"varint,10,opt,name=return_values,json=returnValues,proto3" json:"return_values,omitempty"`
	// If min_commit_ts > 0, this is large transaction proto, the final commit_ts
	// would be infered from min_commit_ts.
	MinCommitTs uint64 `protobuf:"varint,11,opt,name=min_commit_ts,json=minCommitTs,proto3" json:"min_commit_ts,omitempty"`
}

func (x *PessimisticLockRequest) Reset() {
	*x = PessimisticLockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PessimisticLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PessimisticLockRequest) ProtoMessage() {}

func (x *PessimisticLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PessimisticLockRequest.ProtoReflect.Descriptor instead.
func (*PessimisticLockRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{6}
}

func (x *PessimisticLockRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *PessimisticLockRequest) GetMutations() []*Mutation {
	if x != nil {
		return x.Mutations
	}
	return nil
}

func (x *PessimisticLockRequest) GetPrimaryLock() []byte {
	if x != nil {
		return x.PrimaryLock
	}
	return nil
}

func (x *PessimisticLockRequest) GetStartVersion() uint64 {
	if x != nil {
		return x.StartVersion
	}
	return 0
}

func (x *PessimisticLockRequest) GetLockTtl() uint64 {
	if x != nil {
		return x.LockTtl
	}
	return 0
}

func (x *PessimisticLockRequest) GetForUpdateTs() uint64 {
	if x != nil {
		return x.ForUpdateTs
	}
	return 0
}

func (x *PessimisticLockRequest) GetIsFirstLock() bool {
	if x != nil {
		return x.IsFirstLock
	}
	return false
}

func (x *PessimisticLockRequest) GetWaitTimeout() int64 {
	if x != nil {
		return x.WaitTimeout
	}
	return 0
}

func (x *PessimisticLockRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *PessimisticLockRequest) GetReturnValues() bool {
	if x != nil {
		return x.ReturnValues
	}
	return false
}

func (x *PessimisticLockRequest) GetMinCommitTs() uint64 {
	if x != nil {
		return x.MinCommitTs
	}
	return 0
}

type PessimisticLockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	Errors      []*KeyError    `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	// It carries the latest value and its commit ts if force in PessimisticLockRequest is true.
	CommitTs uint64 `protobuf:"varint,3,opt,name=commit_ts,json=commitTs,proto3" json:"commit_ts,omitempty"`
	Value    []byte `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// The values is set if 'return_values' is true in the request and no error.
	// If 'force' is true, this field is not used.
	Values [][]byte `protobuf:"bytes,5,rep,name=values,proto3" json:"values,omitempty"`
	// Indicates whether the values at the same index is correspond to an existing key.
	// In legacy TiKV, this field is not used even 'force' is false. In that case, an empty value indicates
	// two possible situations: (1) the key does not exist. (2) the key exists but the value is empty.
	NotFounds []bool `protobuf:"varint,6,rep,packed,name=not_founds,json=notFounds,proto3" json:"not_founds,omitempty"`
}

func (x *PessimisticLockResponse) Reset() {
	*x = PessimisticLockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PessimisticLockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PessimisticLockResponse) ProtoMessage() {}

func (x *PessimisticLockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PessimisticLockResponse.ProtoReflect.Descriptor instead.
func (*PessimisticLockResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{7}
}

func (x *PessimisticLockResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *PessimisticLockResponse) GetErrors() []*KeyError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *PessimisticLockResponse) GetCommitTs() uint64 {
	if x != nil {
		return x.CommitTs
	}
	return 0
}

func (x *PessimisticLockResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PessimisticLockResponse) GetValues() [][]byte {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PessimisticLockResponse) GetNotFounds() []bool {
	if x != nil {
		return x.NotFounds
	}
	return nil
}

// Unlock keys locked using `PessimisticLockRequest`.
type PessimisticRollbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context      *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	StartVersion uint64   `protobuf:"varint,2,opt,name=start_version,json=startVersion,proto3" json:"start_version,omitempty"`
	ForUpdateTs  uint64   `protobuf:"varint,3,opt,name=for_update_ts,json=forUpdateTs,proto3" json:"for_update_ts,omitempty"`
	Keys         [][]byte `protobuf:"bytes,4,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *PessimisticRollbackRequest) Reset() {
	*x = PessimisticRollbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PessimisticRollbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PessimisticRollbackRequest) ProtoMessage() {}

func (x *PessimisticRollbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PessimisticRollbackRequest.ProtoReflect.Descriptor instead.
func (*PessimisticRollbackRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{8}
}

func (x *PessimisticRollbackRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *PessimisticRollbackRequest) GetStartVersion() uint64 {
	if x != nil {
		return x.StartVersion
	}
	return 0
}

func (x *PessimisticRollbackRequest) GetForUpdateTs() uint64 {
	if x != nil {
		return x.ForUpdateTs
	}
	return 0
}

func (x *PessimisticRollbackRequest) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

type PessimisticRollbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	Errors      []*KeyError    `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *PessimisticRollbackResponse) Reset() {
	*x = PessimisticRollbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PessimisticRollbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PessimisticRollbackResponse) ProtoMessage() {}

func (x *PessimisticRollbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PessimisticRollbackResponse.ProtoReflect.Descriptor instead.
func (*PessimisticRollbackResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{9}
}

func (x *PessimisticRollbackResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *PessimisticRollbackResponse) GetErrors() []*KeyError {
	if x != nil {
		return x.Errors
	}
	return nil
}

// Used to update the lock_ttl of a psessimistic and/or large transaction to prevent it from been killed.
type TxnHeartBeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	// The key of the lock to update.
	PrimaryLock []byte `protobuf:"bytes,2,opt,name=primary_lock,json=primaryLock,proto3" json:"primary_lock,omitempty"`
	// Start timestamp of the large transaction.
	StartVersion uint64 `protobuf:"varint,3,opt,name=start_version,json=startVersion,proto3" json:"start_version,omitempty"`
	// The new TTL the sender would like.
	AdviseLockTtl uint64 `protobuf:"varint,4,opt,name=advise_lock_ttl,json=adviseLockTtl,proto3" json:"advise_lock_ttl,omitempty"`
}

func (x *TxnHeartBeatRequest) Reset() {
	*x = TxnHeartBeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxnHeartBeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxnHeartBeatRequest) ProtoMessage() {}

func (x *TxnHeartBeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxnHeartBeatRequest.ProtoReflect.Descriptor instead.
func (*TxnHeartBeatRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{10}
}

func (x *TxnHeartBeatRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *TxnHeartBeatRequest) GetPrimaryLock() []byte {
	if x != nil {
		return x.PrimaryLock
	}
	return nil
}

func (x *TxnHeartBeatRequest) GetStartVersion() uint64 {
	if x != nil {
		return x.StartVersion
	}
	return 0
}

func (x *TxnHeartBeatRequest) GetAdviseLockTtl() uint64 {
	if x != nil {
		return x.AdviseLockTtl
	}
	return 0
}

type TxnHeartBeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	Error       *KeyError      `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// The TTL actually set on the requested lock.
	LockTtl uint64 `protobuf:"varint,3,opt,name=lock_ttl,json=lockTtl,proto3" json:"lock_ttl,omitempty"`
}

func (x *TxnHeartBeatResponse) Reset() {
	*x = TxnHeartBeatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxnHeartBeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxnHeartBeatResponse) ProtoMessage() {}

func (x *TxnHeartBeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxnHeartBeatResponse.ProtoReflect.Descriptor instead.
func (*TxnHeartBeatResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{11}
}

func (x *TxnHeartBeatResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *TxnHeartBeatResponse) GetError() *KeyError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TxnHeartBeatResponse) GetLockTtl() uint64 {
	if x != nil {
		return x.LockTtl
	}
	return 0
}

// CheckTxnStatusRequest checks the status of a transaction.
// If the transaction is rollbacked/committed, return that result.
// If the TTL of the transaction is exhausted, abort that transaction and inform the caller.
// Otherwise, returns the TTL information for the transaction.
// CheckTxnStatusRequest may also push forward the minCommitTS of a large transaction.
type CheckTxnStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	// Primary key and lock ts together to locate the primary lock of a transaction.
	PrimaryKey []byte `protobuf:"bytes,2,opt,name=primary_key,json=primaryKey,proto3" json:"primary_key,omitempty"`
	// Starting timestamp of the transaction being checked.
	LockTs uint64 `protobuf:"varint,3,opt,name=lock_ts,json=lockTs,proto3" json:"lock_ts,omitempty"`
	// The start timestamp of the transaction which this request is part of.
	CallerStartTs uint64 `protobuf:"varint,4,opt,name=caller_start_ts,json=callerStartTs,proto3" json:"caller_start_ts,omitempty"`
	// The client must specify the current time to TiKV using this timestamp. It is used to check TTL
	// timeouts. It may be inaccurate.
	CurrentTs uint64 `protobuf:"varint,5,opt,name=current_ts,json=currentTs,proto3" json:"current_ts,omitempty"`
	// If true, then TiKV will leave a rollback tombstone in the write CF for `primary_key`, even if
	// that key is not locked.
	RollbackIfNotExist bool `protobuf:"varint,6,opt,name=rollback_if_not_exist,json=rollbackIfNotExist,proto3" json:"rollback_if_not_exist,omitempty"`
	// This field is set to true only if the transaction is known to fall back from async commit.
	// Then, CheckTxnStatus treats the transaction as non-async-commit even if the use_async_commit
	// field in the primary lock is true.
	ForceSyncCommit bool `protobuf:"varint,7,opt,name=force_sync_commit,json=forceSyncCommit,proto3" json:"force_sync_commit,omitempty"`
	// If the check request is used to resolve or decide the transaction status for a input pessimistic
	// lock, the transaction status could not be decided if the primary lock is pessimistic too and
	// it's still uncertain.
	ResolvingPessimisticLock bool `protobuf:"varint,8,opt,name=resolving_pessimistic_lock,json=resolvingPessimisticLock,proto3" json:"resolving_pessimistic_lock,omitempty"`
}

func (x *CheckTxnStatusRequest) Reset() {
	*x = CheckTxnStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTxnStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTxnStatusRequest) ProtoMessage() {}

func (x *CheckTxnStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTxnStatusRequest.ProtoReflect.Descriptor instead.
func (*CheckTxnStatusRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{12}
}

func (x *CheckTxnStatusRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *CheckTxnStatusRequest) GetPrimaryKey() []byte {
	if x != nil {
		return x.PrimaryKey
	}
	return nil
}

func (x *CheckTxnStatusRequest) GetLockTs() uint64 {
	if x != nil {
		return x.LockTs
	}
	return 0
}

func (x *CheckTxnStatusRequest) GetCallerStartTs() uint64 {
	if x != nil {
		return x.CallerStartTs
	}
	return 0
}

func (x *CheckTxnStatusRequest) GetCurrentTs() uint64 {
	if x != nil {
		return x.CurrentTs
	}
	return 0
}

func (x *CheckTxnStatusRequest) GetRollbackIfNotExist() bool {
	if x != nil {
		return x.RollbackIfNotExist
	}
	return false
}

func (x *CheckTxnStatusRequest) GetForceSyncCommit() bool {
	if x != nil {
		return x.ForceSyncCommit
	}
	return false
}

func (x *CheckTxnStatusRequest) GetResolvingPessimisticLock() bool {
	if x != nil {
		return x.ResolvingPessimisticLock
	}
	return false
}

type CheckTxnStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	Error       *KeyError      `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Three kinds of transaction status:
	//   locked: lock_ttl > 0
	//   committed: commit_version > 0
	//   rollbacked: lock_ttl = 0 && commit_version = 0
	LockTtl       uint64 `protobuf:"varint,3,opt,name=lock_ttl,json=lockTtl,proto3" json:"lock_ttl,omitempty"`
	CommitVersion uint64 `protobuf:"varint,4,opt,name=commit_version,json=commitVersion,proto3" json:"commit_version,omitempty"`
	// The action performed by TiKV (and why if the action is to rollback).
	Action   Action    `protobuf:"varint,5,opt,name=action,proto3,enum=kvrpcpb.Action" json:"action,omitempty"`
	LockInfo *LockInfo `protobuf:"bytes,6,opt,name=lock_info,json=lockInfo,proto3" json:"lock_info,omitempty"`
}

func (x *CheckTxnStatusResponse) Reset() {
	*x = CheckTxnStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTxnStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTxnStatusResponse) ProtoMessage() {}

func (x *CheckTxnStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTxnStatusResponse.ProtoReflect.Descriptor instead.
func (*CheckTxnStatusResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{13}
}

func (x *CheckTxnStatusResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *CheckTxnStatusResponse) GetError() *KeyError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CheckTxnStatusResponse) GetLockTtl() uint64 {
	if x != nil {
		return x.LockTtl
	}
	return 0
}

func (x *CheckTxnStatusResponse) GetCommitVersion() uint64 {
	if x != nil {
		return x.CommitVersion
	}
	return 0
}

func (x *CheckTxnStatusResponse) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_NoAction
}

func (x *CheckTxnStatusResponse) GetLockInfo() *LockInfo {
	if x != nil {
		return x.LockInfo
	}
	return nil
}

// Part of the async commit protocol, checks for locks on all supplied keys. If a lock is missing,
// does not have a successful status, or belongs to another transaction, TiKV will leave a rollback
// tombstone for that key.
type CheckSecondaryLocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Keys    [][]byte `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	// Identifies the transaction we are investigating.
	StartVersion uint64 `protobuf:"varint,3,opt,name=start_version,json=startVersion,proto3" json:"start_version,omitempty"`
}

func (x *CheckSecondaryLocksRequest) Reset() {
	*x = CheckSecondaryLocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSecondaryLocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSecondaryLocksRequest) ProtoMessage() {}

func (x *CheckSecondaryLocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSecondaryLocksRequest.ProtoReflect.Descriptor instead.
func (*CheckSecondaryLocksRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{14}
}

func (x *CheckSecondaryLocksRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *CheckSecondaryLocksRequest) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *CheckSecondaryLocksRequest) GetStartVersion() uint64 {
	if x != nil {
		return x.StartVersion
	}
	return 0
}

type CheckSecondaryLocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	Error       *KeyError      `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// For each key in `keys` in `CheckSecondaryLocks`, there will be a lock in
	// this list if there is a lock present and belonging to the correct transaction,
	// nil otherwise.
	Locks []*LockInfo `protobuf:"bytes,3,rep,name=locks,proto3" json:"locks,omitempty"`
	// If any of the locks have been committed, this is the commit ts used. If no
	// locks have been committed, it will be zero.
	CommitTs uint64 `protobuf:"varint,4,opt,name=commit_ts,json=commitTs,proto3" json:"commit_ts,omitempty"`
}

func (x *CheckSecondaryLocksResponse) Reset() {
	*x = CheckSecondaryLocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSecondaryLocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSecondaryLocksResponse) ProtoMessage() {}

func (x *CheckSecondaryLocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSecondaryLocksResponse.ProtoReflect.Descriptor instead.
func (*CheckSecondaryLocksResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{15}
}

func (x *CheckSecondaryLocksResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *CheckSecondaryLocksResponse) GetError() *KeyError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CheckSecondaryLocksResponse) GetLocks() []*LockInfo {
	if x != nil {
		return x.Locks
	}
	return nil
}

func (x *CheckSecondaryLocksResponse) GetCommitTs() uint64 {
	if x != nil {
		return x.CommitTs
	}
	return 0
}

// The second phase of writing to TiKV. If there are no errors or conflicts, then this request
// commits a transaction so that its data can be read by other transactions.
type CommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	// Identifies the transaction.
	StartVersion uint64 `protobuf:"varint,2,opt,name=start_version,json=startVersion,proto3" json:"start_version,omitempty"`
	// All keys in the transaction (to be committed).
	Keys [][]byte `protobuf:"bytes,3,rep,name=keys,proto3" json:"keys,omitempty"`
	// Timestamp for the end of the transaction. Must be greater than `start_version`.
	CommitVersion uint64 `protobuf:"varint,4,opt,name=commit_version,json=commitVersion,proto3" json:"commit_version,omitempty"`
}

func (x *CommitRequest) Reset() {
	*x = CommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitRequest) ProtoMessage() {}

func (x *CommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitRequest.ProtoReflect.Descriptor instead.
func (*CommitRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{16}
}

func (x *CommitRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *CommitRequest) GetStartVersion() uint64 {
	if x != nil {
		return x.StartVersion
	}
	return 0
}

func (x *CommitRequest) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *CommitRequest) GetCommitVersion() uint64 {
	if x != nil {
		return x.CommitVersion
	}
	return 0
}

type CommitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	Error       *KeyError      `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// If the commit ts is derived from min_commit_ts, this field should be set.
	CommitVersion uint64 `protobuf:"varint,3,opt,name=commit_version,json=commitVersion,proto3" json:"commit_version,omitempty"`
}

func (x *CommitResponse) Reset() {
	*x = CommitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitResponse) ProtoMessage() {}

func (x *CommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitResponse.ProtoReflect.Descriptor instead.
func (*CommitResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{17}
}

func (x *CommitResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *CommitResponse) GetError() *KeyError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CommitResponse) GetCommitVersion() uint64 {
	if x != nil {
		return x.CommitVersion
	}
	return 0
}

// Not yet implemented.
type ImportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mutations     []*Mutation `protobuf:"bytes,1,rep,name=mutations,proto3" json:"mutations,omitempty"`
	CommitVersion uint64      `protobuf:"varint,2,opt,name=commit_version,json=commitVersion,proto3" json:"commit_version,omitempty"`
}

func (x *ImportRequest) Reset() {
	*x = ImportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportRequest) ProtoMessage() {}

func (x *ImportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportRequest.ProtoReflect.Descriptor instead.
func (*ImportRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{18}
}

func (x *ImportRequest) GetMutations() []*Mutation {
	if x != nil {
		return x.Mutations
	}
	return nil
}

func (x *ImportRequest) GetCommitVersion() uint64 {
	if x != nil {
		return x.CommitVersion
	}
	return 0
}

type ImportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	Error       string         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ImportResponse) Reset() {
	*x = ImportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportResponse) ProtoMessage() {}

func (x *ImportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportResponse.ProtoReflect.Descriptor instead.
func (*ImportResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{19}
}

func (x *ImportResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *ImportResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Cleanup a key by possibly unlocking it.
// From 4.0 onwards, this message is no longer used.
type CleanupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context      *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Key          []byte   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	StartVersion uint64   `protobuf:"varint,3,opt,name=start_version,json=startVersion,proto3" json:"start_version,omitempty"`
	// The current timestamp, used in combination with a lock's TTL to determine
	// if the lock has expired. If `current_ts == 0`, then the key will be unlocked
	// irrespective of its TTL.
	CurrentTs uint64 `protobuf:"varint,4,opt,name=current_ts,json=currentTs,proto3" json:"current_ts,omitempty"`
}

func (x *CleanupRequest) Reset() {
	*x = CleanupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanupRequest) ProtoMessage() {}

func (x *CleanupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanupRequest.ProtoReflect.Descriptor instead.
func (*CleanupRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{20}
}

func (x *CleanupRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *CleanupRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *CleanupRequest) GetStartVersion() uint64 {
	if x != nil {
		return x.StartVersion
	}
	return 0
}

func (x *CleanupRequest) GetCurrentTs() uint64 {
	if x != nil {
		return x.CurrentTs
	}
	return 0
}

type CleanupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	Error       *KeyError      `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Set if the key is already committed.
	CommitVersion uint64 `protobuf:"varint,3,opt,name=commit_version,json=commitVersion,proto3" json:"commit_version,omitempty"`
}

func (x *CleanupResponse) Reset() {
	*x = CleanupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanupResponse) ProtoMessage() {}

func (x *CleanupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanupResponse.ProtoReflect.Descriptor instead.
func (*CleanupResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{21}
}

func (x *CleanupResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *CleanupResponse) GetError() *KeyError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CleanupResponse) GetCommitVersion() uint64 {
	if x != nil {
		return x.CommitVersion
	}
	return 0
}

// Similar to a `Get` request.
type BatchGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Keys    [][]byte `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	Version uint64   `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *BatchGetRequest) Reset() {
	*x = BatchGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetRequest) ProtoMessage() {}

func (x *BatchGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetRequest.ProtoReflect.Descriptor instead.
func (*BatchGetRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{22}
}

func (x *BatchGetRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *BatchGetRequest) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *BatchGetRequest) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type BatchGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	Pairs       []*KvPair      `protobuf:"bytes,2,rep,name=pairs,proto3" json:"pairs,omitempty"`
	// Time and scan details when processing the request.
	ExecDetailsV2 *ExecDetailsV2 `protobuf:"bytes,4,opt,name=exec_details_v2,json=execDetailsV2,proto3" json:"exec_details_v2,omitempty"`
	// This KeyError exists when some key is locked but we cannot check locks of all keys.
	// In this case, `pairs` should be empty and the client should redo batch get all the keys
	// after resolving the lock.
	Error *KeyError `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *BatchGetResponse) Reset() {
	*x = BatchGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetResponse) ProtoMessage() {}

func (x *BatchGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetResponse.ProtoReflect.Descriptor instead.
func (*BatchGetResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{23}
}

func (x *BatchGetResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *BatchGetResponse) GetPairs() []*KvPair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

func (x *BatchGetResponse) GetExecDetailsV2() *ExecDetailsV2 {
	if x != nil {
		return x.ExecDetailsV2
	}
	return nil
}

func (x *BatchGetResponse) GetError() *KeyError {
	if x != nil {
		return x.Error
	}
	return nil
}

// Rollback a prewritten transaction. This will remove the preliminary data from the database,
// unlock locks, and leave a rollback tombstone.
type BatchRollbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	// Identify the transaction to be rolled back.
	StartVersion uint64 `protobuf:"varint,2,opt,name=start_version,json=startVersion,proto3" json:"start_version,omitempty"`
	// The keys to rollback.
	Keys [][]byte `protobuf:"bytes,3,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *BatchRollbackRequest) Reset() {
	*x = BatchRollbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchRollbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchRollbackRequest) ProtoMessage() {}

func (x *BatchRollbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchRollbackRequest.ProtoReflect.Descriptor instead.
func (*BatchRollbackRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{24}
}

func (x *BatchRollbackRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *BatchRollbackRequest) GetStartVersion() uint64 {
	if x != nil {
		return x.StartVersion
	}
	return 0
}

func (x *BatchRollbackRequest) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

type BatchRollbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	Error       *KeyError      `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *BatchRollbackResponse) Reset() {
	*x = BatchRollbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchRollbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchRollbackResponse) ProtoMessage() {}

func (x *BatchRollbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchRollbackResponse.ProtoReflect.Descriptor instead.
func (*BatchRollbackResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{25}
}

func (x *BatchRollbackResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *BatchRollbackResponse) GetError() *KeyError {
	if x != nil {
		return x.Error
	}
	return nil
}

// Scan the database for locks. Used at the start of the GC process to find all
// old locks.
type ScanLockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	// Returns all locks with a start timestamp before `max_version`.
	MaxVersion uint64 `protobuf:"varint,2,opt,name=max_version,json=maxVersion,proto3" json:"max_version,omitempty"`
	// Start scanning from this key.
	StartKey []byte `protobuf:"bytes,3,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	// The maximum number of locks to return.
	Limit uint32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// The exclusive upperbound for scanning.
	EndKey []byte `protobuf:"bytes,5,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
}

func (x *ScanLockRequest) Reset() {
	*x = ScanLockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanLockRequest) ProtoMessage() {}

func (x *ScanLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanLockRequest.ProtoReflect.Descriptor instead.
func (*ScanLockRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{26}
}

func (x *ScanLockRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ScanLockRequest) GetMaxVersion() uint64 {
	if x != nil {
		return x.MaxVersion
	}
	return 0
}

func (x *ScanLockRequest) GetStartKey() []byte {
	if x != nil {
		return x.StartKey
	}
	return nil
}

func (x *ScanLockRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ScanLockRequest) GetEndKey() []byte {
	if x != nil {
		return x.EndKey
	}
	return nil
}

type ScanLockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	Error       *KeyError      `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Info on all locks found by the scan.
	Locks []*LockInfo `protobuf:"bytes,3,rep,name=locks,proto3" json:"locks,omitempty"`
}

func (x *ScanLockResponse) Reset() {
	*x = ScanLockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanLockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanLockResponse) ProtoMessage() {}

func (x *ScanLockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanLockResponse.ProtoReflect.Descriptor instead.
func (*ScanLockResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{27}
}

func (x *ScanLockResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *ScanLockResponse) GetError() *KeyError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ScanLockResponse) GetLocks() []*LockInfo {
	if x != nil {
		return x.Locks
	}
	return nil
}

// For all keys locked by the transaction identified by `start_version`, either
// commit or rollback the transaction and unlock the key.
type ResolveLockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context      *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	StartVersion uint64   `protobuf:"varint,2,opt,name=start_version,json=startVersion,proto3" json:"start_version,omitempty"`
	// `commit_version == 0` means the transaction was rolled back.
	// `commit_version > 0` means the transaction was committed at the given timestamp.
	CommitVersion uint64     `protobuf:"varint,3,opt,name=commit_version,json=commitVersion,proto3" json:"commit_version,omitempty"`
	TxnInfos      []*TxnInfo `protobuf:"bytes,4,rep,name=txn_infos,json=txnInfos,proto3" json:"txn_infos,omitempty"`
	// Only resolve specified keys.
	Keys [][]byte `protobuf:"bytes,5,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *ResolveLockRequest) Reset() {
	*x = ResolveLockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveLockRequest) ProtoMessage() {}

func (x *ResolveLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveLockRequest.ProtoReflect.Descriptor instead.
func (*ResolveLockRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{28}
}

func (x *ResolveLockRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ResolveLockRequest) GetStartVersion() uint64 {
	if x != nil {
		return x.StartVersion
	}
	return 0
}

func (x *ResolveLockRequest) GetCommitVersion() uint64 {
	if x != nil {
		return x.CommitVersion
	}
	return 0
}

func (x *ResolveLockRequest) GetTxnInfos() []*TxnInfo {
	if x != nil {
		return x.TxnInfos
	}
	return nil
}

func (x *ResolveLockRequest) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

type ResolveLockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	Error       *KeyError      `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ResolveLockResponse) Reset() {
	*x = ResolveLockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveLockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveLockResponse) ProtoMessage() {}

func (x *ResolveLockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveLockResponse.ProtoReflect.Descriptor instead.
func (*ResolveLockResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{29}
}

func (x *ResolveLockResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *ResolveLockResponse) GetError() *KeyError {
	if x != nil {
		return x.Error
	}
	return nil
}

// Request TiKV to garbage collect all non-current data older than `safe_point`.
type GCRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context   *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	SafePoint uint64   `protobuf:"varint,2,opt,name=safe_point,json=safePoint,proto3" json:"safe_point,omitempty"`
}

func (x *GCRequest) Reset() {
	*x = GCRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCRequest) ProtoMessage() {}

func (x *GCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCRequest.ProtoReflect.Descriptor instead.
func (*GCRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{30}
}

func (x *GCRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *GCRequest) GetSafePoint() uint64 {
	if x != nil {
		return x.SafePoint
	}
	return 0
}

type GCResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	Error       *KeyError      `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GCResponse) Reset() {
	*x = GCResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCResponse) ProtoMessage() {}

func (x *GCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCResponse.ProtoReflect.Descriptor instead.
func (*GCResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{31}
}

func (x *GCResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *GCResponse) GetError() *KeyError {
	if x != nil {
		return x.Error
	}
	return nil
}

// Delete a range of data from TiKV.
// This message should not be used.
type DeleteRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context  *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	StartKey []byte   `protobuf:"bytes,2,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	EndKey   []byte   `protobuf:"bytes,3,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
	// If true, the data will not be immediately deleted, but the operation will
	// still be replicated via Raft. This is used to notify TiKV that the data
	// will be deleted using `unsafe_destroy_range` soon.
	NotifyOnly bool `protobuf:"varint,4,opt,name=notify_only,json=notifyOnly,proto3" json:"notify_only,omitempty"`
}

func (x *DeleteRangeRequest) Reset() {
	*x = DeleteRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRangeRequest) ProtoMessage() {}

func (x *DeleteRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRangeRequest.ProtoReflect.Descriptor instead.
func (*DeleteRangeRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{32}
}

func (x *DeleteRangeRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *DeleteRangeRequest) GetStartKey() []byte {
	if x != nil {
		return x.StartKey
	}
	return nil
}

func (x *DeleteRangeRequest) GetEndKey() []byte {
	if x != nil {
		return x.EndKey
	}
	return nil
}

func (x *DeleteRangeRequest) GetNotifyOnly() bool {
	if x != nil {
		return x.NotifyOnly
	}
	return false
}

type DeleteRangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	Error       string         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DeleteRangeResponse) Reset() {
	*x = DeleteRangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRangeResponse) ProtoMessage() {}

func (x *DeleteRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRangeResponse.ProtoReflect.Descriptor instead.
func (*DeleteRangeResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{33}
}

func (x *DeleteRangeResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *DeleteRangeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type RawGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Key     []byte   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Cf      string   `protobuf:"bytes,3,opt,name=cf,proto3" json:"cf,omitempty"`
}

func (x *RawGetRequest) Reset() {
	*x = RawGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawGetRequest) ProtoMessage() {}

func (x *RawGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawGetRequest.ProtoReflect.Descriptor instead.
func (*RawGetRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{34}
}

func (x *RawGetRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *RawGetRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RawGetRequest) GetCf() string {
	if x != nil {
		return x.Cf
	}
	return ""
}

type RawGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	Error       string         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Value       []byte         `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	NotFound    bool           `protobuf:"varint,4,opt,name=not_found,json=notFound,proto3" json:"not_found,omitempty"`
}

func (x *RawGetResponse) Reset() {
	*x = RawGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawGetResponse) ProtoMessage() {}

func (x *RawGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawGetResponse.ProtoReflect.Descriptor instead.
func (*RawGetResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{35}
}

func (x *RawGetResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *RawGetResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *RawGetResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *RawGetResponse) GetNotFound() bool {
	if x != nil {
		return x.NotFound
	}
	return false
}

type RawBatchGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Keys    [][]byte `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	Cf      string   `protobuf:"bytes,3,opt,name=cf,proto3" json:"cf,omitempty"`
}

func (x *RawBatchGetRequest) Reset() {
	*x = RawBatchGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawBatchGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawBatchGetRequest) ProtoMessage() {}

func (x *RawBatchGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawBatchGetRequest.ProtoReflect.Descriptor instead.
func (*RawBatchGetRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{36}
}

func (x *RawBatchGetRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *RawBatchGetRequest) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *RawBatchGetRequest) GetCf() string {
	if x != nil {
		return x.Cf
	}
	return ""
}

type RawBatchGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	Pairs       []*KvPair      `protobuf:"bytes,2,rep,name=pairs,proto3" json:"pairs,omitempty"`
}

func (x *RawBatchGetResponse) Reset() {
	*x = RawBatchGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawBatchGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawBatchGetResponse) ProtoMessage() {}

func (x *RawBatchGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawBatchGetResponse.ProtoReflect.Descriptor instead.
func (*RawBatchGetResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{37}
}

func (x *RawBatchGetResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *RawBatchGetResponse) GetPairs() []*KvPair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

type RawPutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Key     []byte   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value   []byte   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Cf      string   `protobuf:"bytes,4,opt,name=cf,proto3" json:"cf,omitempty"`
	Ttl     uint64   `protobuf:"varint,5,opt,name=ttl,proto3" json:"ttl,omitempty"`
	ForCas  bool     `protobuf:"varint,6,opt,name=for_cas,json=forCas,proto3" json:"for_cas,omitempty"`
}

func (x *RawPutRequest) Reset() {
	*x = RawPutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawPutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawPutRequest) ProtoMessage() {}

func (x *RawPutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawPutRequest.ProtoReflect.Descriptor instead.
func (*RawPutRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{38}
}

func (x *RawPutRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *RawPutRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RawPutRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *RawPutRequest) GetCf() string {
	if x != nil {
		return x.Cf
	}
	return ""
}

func (x *RawPutRequest) GetTtl() uint64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *RawPutRequest) GetForCas() bool {
	if x != nil {
		return x.ForCas
	}
	return false
}

type RawPutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	Error       string         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RawPutResponse) Reset() {
	*x = RawPutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawPutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawPutResponse) ProtoMessage() {}

func (x *RawPutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawPutResponse.ProtoReflect.Descriptor instead.
func (*RawPutResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{39}
}

func (x *RawPutResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *RawPutResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type RawBatchPutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context  `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Pairs   []*KvPair `protobuf:"bytes,2,rep,name=pairs,proto3" json:"pairs,omitempty"`
	Cf      string    `protobuf:"bytes,3,opt,name=cf,proto3" json:"cf,omitempty"`
	// The time-to-live for each keys in seconds, and if the length of `ttls`
	// is exactly one, the ttl will be applied to all keys. Otherwise, the length
	// mismatch between `ttls` and `pairs` will return an error.
	Ttls   []uint64 `protobuf:"varint,4,rep,packed,name=ttls,proto3" json:"ttls,omitempty"`
	ForCas bool     `protobuf:"varint,5,opt,name=for_cas,json=forCas,proto3" json:"for_cas,omitempty"`
}

func (x *RawBatchPutRequest) Reset() {
	*x = RawBatchPutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawBatchPutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawBatchPutRequest) ProtoMessage() {}

func (x *RawBatchPutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawBatchPutRequest.ProtoReflect.Descriptor instead.
func (*RawBatchPutRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{40}
}

func (x *RawBatchPutRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *RawBatchPutRequest) GetPairs() []*KvPair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

func (x *RawBatchPutRequest) GetCf() string {
	if x != nil {
		return x.Cf
	}
	return ""
}

func (x *RawBatchPutRequest) GetTtls() []uint64 {
	if x != nil {
		return x.Ttls
	}
	return nil
}

func (x *RawBatchPutRequest) GetForCas() bool {
	if x != nil {
		return x.ForCas
	}
	return false
}

type RawBatchPutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	Error       string         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RawBatchPutResponse) Reset() {
	*x = RawBatchPutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawBatchPutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawBatchPutResponse) ProtoMessage() {}

func (x *RawBatchPutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawBatchPutResponse.ProtoReflect.Descriptor instead.
func (*RawBatchPutResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{41}
}

func (x *RawBatchPutResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *RawBatchPutResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type RawDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Key     []byte   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Cf      string   `protobuf:"bytes,3,opt,name=cf,proto3" json:"cf,omitempty"`
	ForCas  bool     `protobuf:"varint,4,opt,name=for_cas,json=forCas,proto3" json:"for_cas,omitempty"`
}

func (x *RawDeleteRequest) Reset() {
	*x = RawDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawDeleteRequest) ProtoMessage() {}

func (x *RawDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawDeleteRequest.ProtoReflect.Descriptor instead.
func (*RawDeleteRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{42}
}

func (x *RawDeleteRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *RawDeleteRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RawDeleteRequest) GetCf() string {
	if x != nil {
		return x.Cf
	}
	return ""
}

func (x *RawDeleteRequest) GetForCas() bool {
	if x != nil {
		return x.ForCas
	}
	return false
}

type RawDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	Error       string         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RawDeleteResponse) Reset() {
	*x = RawDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawDeleteResponse) ProtoMessage() {}

func (x *RawDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawDeleteResponse.ProtoReflect.Descriptor instead.
func (*RawDeleteResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{43}
}

func (x *RawDeleteResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *RawDeleteResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type RawBatchDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Keys    [][]byte `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	Cf      string   `protobuf:"bytes,3,opt,name=cf,proto3" json:"cf,omitempty"`
	ForCas  bool     `protobuf:"varint,4,opt,name=for_cas,json=forCas,proto3" json:"for_cas,omitempty"`
}

func (x *RawBatchDeleteRequest) Reset() {
	*x = RawBatchDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawBatchDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawBatchDeleteRequest) ProtoMessage() {}

func (x *RawBatchDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawBatchDeleteRequest.ProtoReflect.Descriptor instead.
func (*RawBatchDeleteRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{44}
}

func (x *RawBatchDeleteRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *RawBatchDeleteRequest) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *RawBatchDeleteRequest) GetCf() string {
	if x != nil {
		return x.Cf
	}
	return ""
}

func (x *RawBatchDeleteRequest) GetForCas() bool {
	if x != nil {
		return x.ForCas
	}
	return false
}

type RawBatchDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	Error       string         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RawBatchDeleteResponse) Reset() {
	*x = RawBatchDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawBatchDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawBatchDeleteResponse) ProtoMessage() {}

func (x *RawBatchDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawBatchDeleteResponse.ProtoReflect.Descriptor instead.
func (*RawBatchDeleteResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{45}
}

func (x *RawBatchDeleteResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *RawBatchDeleteResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type RawScanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context  *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	StartKey []byte   `protobuf:"bytes,2,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	Limit    uint32   `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	KeyOnly  bool     `protobuf:"varint,4,opt,name=key_only,json=keyOnly,proto3" json:"key_only,omitempty"`
	Cf       string   `protobuf:"bytes,5,opt,name=cf,proto3" json:"cf,omitempty"`
	Reverse  bool     `protobuf:"varint,6,opt,name=reverse,proto3" json:"reverse,omitempty"`
	// For compatibility, when scanning forward, the range to scan is [start_key, end_key), where start_key < end_key;
	// and when scanning backward, it scans [end_key, start_key) in descending order, where end_key < start_key.
	EndKey []byte `protobuf:"bytes,7,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
}

func (x *RawScanRequest) Reset() {
	*x = RawScanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawScanRequest) ProtoMessage() {}

func (x *RawScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawScanRequest.ProtoReflect.Descriptor instead.
func (*RawScanRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{46}
}

func (x *RawScanRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *RawScanRequest) GetStartKey() []byte {
	if x != nil {
		return x.StartKey
	}
	return nil
}

func (x *RawScanRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RawScanRequest) GetKeyOnly() bool {
	if x != nil {
		return x.KeyOnly
	}
	return false
}

func (x *RawScanRequest) GetCf() string {
	if x != nil {
		return x.Cf
	}
	return ""
}

func (x *RawScanRequest) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *RawScanRequest) GetEndKey() []byte {
	if x != nil {
		return x.EndKey
	}
	return nil
}

type RawScanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	Kvs         []*KvPair      `protobuf:"bytes,2,rep,name=kvs,proto3" json:"kvs,omitempty"`
}

func (x *RawScanResponse) Reset() {
	*x = RawScanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawScanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawScanResponse) ProtoMessage() {}

func (x *RawScanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawScanResponse.ProtoReflect.Descriptor instead.
func (*RawScanResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{47}
}

func (x *RawScanResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *RawScanResponse) GetKvs() []*KvPair {
	if x != nil {
		return x.Kvs
	}
	return nil
}

type RawDeleteRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context  *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	StartKey []byte   `protobuf:"bytes,2,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	EndKey   []byte   `protobuf:"bytes,3,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
	Cf       string   `protobuf:"bytes,4,opt,name=cf,proto3" json:"cf,omitempty"`
}

func (x *RawDeleteRangeRequest) Reset() {
	*x = RawDeleteRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawDeleteRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawDeleteRangeRequest) ProtoMessage() {}

func (x *RawDeleteRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawDeleteRangeRequest.ProtoReflect.Descriptor instead.
func (*RawDeleteRangeRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{48}
}

func (x *RawDeleteRangeRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *RawDeleteRangeRequest) GetStartKey() []byte {
	if x != nil {
		return x.StartKey
	}
	return nil
}

func (x *RawDeleteRangeRequest) GetEndKey() []byte {
	if x != nil {
		return x.EndKey
	}
	return nil
}

func (x *RawDeleteRangeRequest) GetCf() string {
	if x != nil {
		return x.Cf
	}
	return ""
}

type RawDeleteRangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	Error       string         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RawDeleteRangeResponse) Reset() {
	*x = RawDeleteRangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawDeleteRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawDeleteRangeResponse) ProtoMessage() {}

func (x *RawDeleteRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawDeleteRangeResponse.ProtoReflect.Descriptor instead.
func (*RawDeleteRangeResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{49}
}

func (x *RawDeleteRangeResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *RawDeleteRangeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type RawBatchScanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context   *Context    `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Ranges    []*KeyRange `protobuf:"bytes,2,rep,name=ranges,proto3" json:"ranges,omitempty"`                         // scanning range
	EachLimit uint32      `protobuf:"varint,3,opt,name=each_limit,json=eachLimit,proto3" json:"each_limit,omitempty"` // max number of returning kv pairs for each scanning range
	KeyOnly   bool        `protobuf:"varint,4,opt,name=key_only,json=keyOnly,proto3" json:"key_only,omitempty"`
	Cf        string      `protobuf:"bytes,5,opt,name=cf,proto3" json:"cf,omitempty"`
	Reverse   bool        `protobuf:"varint,6,opt,name=reverse,proto3" json:"reverse,omitempty"`
}

func (x *RawBatchScanRequest) Reset() {
	*x = RawBatchScanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawBatchScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawBatchScanRequest) ProtoMessage() {}

func (x *RawBatchScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawBatchScanRequest.ProtoReflect.Descriptor instead.
func (*RawBatchScanRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{50}
}

func (x *RawBatchScanRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *RawBatchScanRequest) GetRanges() []*KeyRange {
	if x != nil {
		return x.Ranges
	}
	return nil
}

func (x *RawBatchScanRequest) GetEachLimit() uint32 {
	if x != nil {
		return x.EachLimit
	}
	return 0
}

func (x *RawBatchScanRequest) GetKeyOnly() bool {
	if x != nil {
		return x.KeyOnly
	}
	return false
}

func (x *RawBatchScanRequest) GetCf() string {
	if x != nil {
		return x.Cf
	}
	return ""
}

func (x *RawBatchScanRequest) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

type RawBatchScanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	Kvs         []*KvPair      `protobuf:"bytes,2,rep,name=kvs,proto3" json:"kvs,omitempty"`
}

func (x *RawBatchScanResponse) Reset() {
	*x = RawBatchScanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawBatchScanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawBatchScanResponse) ProtoMessage() {}

func (x *RawBatchScanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawBatchScanResponse.ProtoReflect.Descriptor instead.
func (*RawBatchScanResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{51}
}

func (x *RawBatchScanResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *RawBatchScanResponse) GetKvs() []*KvPair {
	if x != nil {
		return x.Kvs
	}
	return nil
}

type UnsafeDestroyRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context  *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	StartKey []byte   `protobuf:"bytes,2,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	EndKey   []byte   `protobuf:"bytes,3,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
}

func (x *UnsafeDestroyRangeRequest) Reset() {
	*x = UnsafeDestroyRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsafeDestroyRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsafeDestroyRangeRequest) ProtoMessage() {}

func (x *UnsafeDestroyRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsafeDestroyRangeRequest.ProtoReflect.Descriptor instead.
func (*UnsafeDestroyRangeRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{52}
}

func (x *UnsafeDestroyRangeRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *UnsafeDestroyRangeRequest) GetStartKey() []byte {
	if x != nil {
		return x.StartKey
	}
	return nil
}

func (x *UnsafeDestroyRangeRequest) GetEndKey() []byte {
	if x != nil {
		return x.EndKey
	}
	return nil
}

type UnsafeDestroyRangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	Error       string         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *UnsafeDestroyRangeResponse) Reset() {
	*x = UnsafeDestroyRangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsafeDestroyRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsafeDestroyRangeResponse) ProtoMessage() {}

func (x *UnsafeDestroyRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsafeDestroyRangeResponse.ProtoReflect.Descriptor instead.
func (*UnsafeDestroyRangeResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{53}
}

func (x *UnsafeDestroyRangeResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *UnsafeDestroyRangeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type RegisterLockObserverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	MaxTs   uint64   `protobuf:"varint,2,opt,name=max_ts,json=maxTs,proto3" json:"max_ts,omitempty"`
}

func (x *RegisterLockObserverRequest) Reset() {
	*x = RegisterLockObserverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterLockObserverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterLockObserverRequest) ProtoMessage() {}

func (x *RegisterLockObserverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterLockObserverRequest.ProtoReflect.Descriptor instead.
func (*RegisterLockObserverRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{54}
}

func (x *RegisterLockObserverRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *RegisterLockObserverRequest) GetMaxTs() uint64 {
	if x != nil {
		return x.MaxTs
	}
	return 0
}

type RegisterLockObserverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RegisterLockObserverResponse) Reset() {
	*x = RegisterLockObserverResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterLockObserverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterLockObserverResponse) ProtoMessage() {}

func (x *RegisterLockObserverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterLockObserverResponse.ProtoReflect.Descriptor instead.
func (*RegisterLockObserverResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{55}
}

func (x *RegisterLockObserverResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type CheckLockObserverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	MaxTs   uint64   `protobuf:"varint,2,opt,name=max_ts,json=maxTs,proto3" json:"max_ts,omitempty"`
}

func (x *CheckLockObserverRequest) Reset() {
	*x = CheckLockObserverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckLockObserverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckLockObserverRequest) ProtoMessage() {}

func (x *CheckLockObserverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckLockObserverRequest.ProtoReflect.Descriptor instead.
func (*CheckLockObserverRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{56}
}

func (x *CheckLockObserverRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *CheckLockObserverRequest) GetMaxTs() uint64 {
	if x != nil {
		return x.MaxTs
	}
	return 0
}

type CheckLockObserverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   string      `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	IsClean bool        `protobuf:"varint,2,opt,name=is_clean,json=isClean,proto3" json:"is_clean,omitempty"`
	Locks   []*LockInfo `protobuf:"bytes,3,rep,name=locks,proto3" json:"locks,omitempty"`
}

func (x *CheckLockObserverResponse) Reset() {
	*x = CheckLockObserverResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckLockObserverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckLockObserverResponse) ProtoMessage() {}

func (x *CheckLockObserverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckLockObserverResponse.ProtoReflect.Descriptor instead.
func (*CheckLockObserverResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{57}
}

func (x *CheckLockObserverResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *CheckLockObserverResponse) GetIsClean() bool {
	if x != nil {
		return x.IsClean
	}
	return false
}

func (x *CheckLockObserverResponse) GetLocks() []*LockInfo {
	if x != nil {
		return x.Locks
	}
	return nil
}

type RemoveLockObserverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	MaxTs   uint64   `protobuf:"varint,2,opt,name=max_ts,json=maxTs,proto3" json:"max_ts,omitempty"`
}

func (x *RemoveLockObserverRequest) Reset() {
	*x = RemoveLockObserverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveLockObserverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveLockObserverRequest) ProtoMessage() {}

func (x *RemoveLockObserverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveLockObserverRequest.ProtoReflect.Descriptor instead.
func (*RemoveLockObserverRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{58}
}

func (x *RemoveLockObserverRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *RemoveLockObserverRequest) GetMaxTs() uint64 {
	if x != nil {
		return x.MaxTs
	}
	return 0
}

type RemoveLockObserverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RemoveLockObserverResponse) Reset() {
	*x = RemoveLockObserverResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveLockObserverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveLockObserverResponse) ProtoMessage() {}

func (x *RemoveLockObserverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveLockObserverResponse.ProtoReflect.Descriptor instead.
func (*RemoveLockObserverResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{59}
}

func (x *RemoveLockObserverResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type PhysicalScanLockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context  *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	MaxTs    uint64   `protobuf:"varint,2,opt,name=max_ts,json=maxTs,proto3" json:"max_ts,omitempty"`
	StartKey []byte   `protobuf:"bytes,3,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	Limit    uint32   `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *PhysicalScanLockRequest) Reset() {
	*x = PhysicalScanLockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhysicalScanLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhysicalScanLockRequest) ProtoMessage() {}

func (x *PhysicalScanLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhysicalScanLockRequest.ProtoReflect.Descriptor instead.
func (*PhysicalScanLockRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{60}
}

func (x *PhysicalScanLockRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *PhysicalScanLockRequest) GetMaxTs() uint64 {
	if x != nil {
		return x.MaxTs
	}
	return 0
}

func (x *PhysicalScanLockRequest) GetStartKey() []byte {
	if x != nil {
		return x.StartKey
	}
	return nil
}

func (x *PhysicalScanLockRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type PhysicalScanLockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string      `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Locks []*LockInfo `protobuf:"bytes,2,rep,name=locks,proto3" json:"locks,omitempty"`
}

func (x *PhysicalScanLockResponse) Reset() {
	*x = PhysicalScanLockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhysicalScanLockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhysicalScanLockResponse) ProtoMessage() {}

func (x *PhysicalScanLockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhysicalScanLockResponse.ProtoReflect.Descriptor instead.
func (*PhysicalScanLockResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{61}
}

func (x *PhysicalScanLockResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *PhysicalScanLockResponse) GetLocks() []*LockInfo {
	if x != nil {
		return x.Locks
	}
	return nil
}

// Sent from PD to a TiKV node.
type SplitRegionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	// Deprecated: Do not use.
	SplitKey  []byte   `protobuf:"bytes,2,opt,name=split_key,json=splitKey,proto3" json:"split_key,omitempty"`
	SplitKeys [][]byte `protobuf:"bytes,3,rep,name=split_keys,json=splitKeys,proto3" json:"split_keys,omitempty"` // when use it to do batch split, `split_key` should be empty.
	// Once enabled, the split_key will not be encoded.
	IsRawKv bool `protobuf:"varint,4,opt,name=is_raw_kv,json=isRawKv,proto3" json:"is_raw_kv,omitempty"`
}

func (x *SplitRegionRequest) Reset() {
	*x = SplitRegionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitRegionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitRegionRequest) ProtoMessage() {}

func (x *SplitRegionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitRegionRequest.ProtoReflect.Descriptor instead.
func (*SplitRegionRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{62}
}

func (x *SplitRegionRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

// Deprecated: Do not use.
func (x *SplitRegionRequest) GetSplitKey() []byte {
	if x != nil {
		return x.SplitKey
	}
	return nil
}

func (x *SplitRegionRequest) GetSplitKeys() [][]byte {
	if x != nil {
		return x.SplitKeys
	}
	return nil
}

func (x *SplitRegionRequest) GetIsRawKv() bool {
	if x != nil {
		return x.IsRawKv
	}
	return false
}

type SplitRegionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	// Deprecated: Do not use.
	Left *metapb.Region `protobuf:"bytes,2,opt,name=left,proto3" json:"left,omitempty"` // set when there are only 2 result regions.
	// Deprecated: Do not use.
	Right   *metapb.Region   `protobuf:"bytes,3,opt,name=right,proto3" json:"right,omitempty"`     // set when there are only 2 result regions.
	Regions []*metapb.Region `protobuf:"bytes,4,rep,name=regions,proto3" json:"regions,omitempty"` // include all result regions.
}

func (x *SplitRegionResponse) Reset() {
	*x = SplitRegionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitRegionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitRegionResponse) ProtoMessage() {}

func (x *SplitRegionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitRegionResponse.ProtoReflect.Descriptor instead.
func (*SplitRegionResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{63}
}

func (x *SplitRegionResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

// Deprecated: Do not use.
func (x *SplitRegionResponse) GetLeft() *metapb.Region {
	if x != nil {
		return x.Left
	}
	return nil
}

// Deprecated: Do not use.
func (x *SplitRegionResponse) GetRight() *metapb.Region {
	if x != nil {
		return x.Right
	}
	return nil
}

func (x *SplitRegionResponse) GetRegions() []*metapb.Region {
	if x != nil {
		return x.Regions
	}
	return nil
}

// Sent from TiFlash to a TiKV node.
type ReadIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	// TiKV checks the given range if there is any unapplied lock
	// blocking the read request.
	StartTs uint64      `protobuf:"varint,2,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	Ranges  []*KeyRange `protobuf:"bytes,3,rep,name=ranges,proto3" json:"ranges,omitempty"`
}

func (x *ReadIndexRequest) Reset() {
	*x = ReadIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadIndexRequest) ProtoMessage() {}

func (x *ReadIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadIndexRequest.ProtoReflect.Descriptor instead.
func (*ReadIndexRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{64}
}

func (x *ReadIndexRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ReadIndexRequest) GetStartTs() uint64 {
	if x != nil {
		return x.StartTs
	}
	return 0
}

func (x *ReadIndexRequest) GetRanges() []*KeyRange {
	if x != nil {
		return x.Ranges
	}
	return nil
}

type ReadIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	ReadIndex   uint64         `protobuf:"varint,2,opt,name=read_index,json=readIndex,proto3" json:"read_index,omitempty"`
	// If `locked` is set, this read request is blocked by a lock.
	// The lock should be returned to the client.
	Locked *LockInfo `protobuf:"bytes,3,opt,name=locked,proto3" json:"locked,omitempty"`
}

func (x *ReadIndexResponse) Reset() {
	*x = ReadIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadIndexResponse) ProtoMessage() {}

func (x *ReadIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadIndexResponse.ProtoReflect.Descriptor instead.
func (*ReadIndexResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{65}
}

func (x *ReadIndexResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *ReadIndexResponse) GetReadIndex() uint64 {
	if x != nil {
		return x.ReadIndex
	}
	return 0
}

func (x *ReadIndexResponse) GetLocked() *LockInfo {
	if x != nil {
		return x.Locked
	}
	return nil
}

type MvccGetByKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Key     []byte   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *MvccGetByKeyRequest) Reset() {
	*x = MvccGetByKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MvccGetByKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MvccGetByKeyRequest) ProtoMessage() {}

func (x *MvccGetByKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MvccGetByKeyRequest.ProtoReflect.Descriptor instead.
func (*MvccGetByKeyRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{66}
}

func (x *MvccGetByKeyRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *MvccGetByKeyRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type MvccGetByKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	Error       string         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Info        *MvccInfo      `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *MvccGetByKeyResponse) Reset() {
	*x = MvccGetByKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MvccGetByKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MvccGetByKeyResponse) ProtoMessage() {}

func (x *MvccGetByKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MvccGetByKeyResponse.ProtoReflect.Descriptor instead.
func (*MvccGetByKeyResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{67}
}

func (x *MvccGetByKeyResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *MvccGetByKeyResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *MvccGetByKeyResponse) GetInfo() *MvccInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type MvccGetByStartTsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	StartTs uint64   `protobuf:"varint,2,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
}

func (x *MvccGetByStartTsRequest) Reset() {
	*x = MvccGetByStartTsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MvccGetByStartTsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MvccGetByStartTsRequest) ProtoMessage() {}

func (x *MvccGetByStartTsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MvccGetByStartTsRequest.ProtoReflect.Descriptor instead.
func (*MvccGetByStartTsRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{68}
}

func (x *MvccGetByStartTsRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *MvccGetByStartTsRequest) GetStartTs() uint64 {
	if x != nil {
		return x.StartTs
	}
	return 0
}

type MvccGetByStartTsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	Error       string         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Key         []byte         `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Info        *MvccInfo      `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *MvccGetByStartTsResponse) Reset() {
	*x = MvccGetByStartTsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MvccGetByStartTsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MvccGetByStartTsResponse) ProtoMessage() {}

func (x *MvccGetByStartTsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MvccGetByStartTsResponse.ProtoReflect.Descriptor instead.
func (*MvccGetByStartTsResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{69}
}

func (x *MvccGetByStartTsResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *MvccGetByStartTsResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *MvccGetByStartTsResponse) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *MvccGetByStartTsResponse) GetInfo() *MvccInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

// Miscellaneous metadata attached to most requests.
type Context struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId       uint64              `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	RegionEpoch    *metapb.RegionEpoch `protobuf:"bytes,2,opt,name=region_epoch,json=regionEpoch,proto3" json:"region_epoch,omitempty"`
	Peer           *metapb.Peer        `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Term           uint64              `protobuf:"varint,5,opt,name=term,proto3" json:"term,omitempty"`
	Priority       CommandPri          `protobuf:"varint,6,opt,name=priority,proto3,enum=kvrpcpb.CommandPri" json:"priority,omitempty"`
	IsolationLevel IsolationLevel      `protobuf:"varint,7,opt,name=isolation_level,json=isolationLevel,proto3,enum=kvrpcpb.IsolationLevel" json:"isolation_level,omitempty"`
	NotFillCache   bool                `protobuf:"varint,8,opt,name=not_fill_cache,json=notFillCache,proto3" json:"not_fill_cache,omitempty"`
	SyncLog        bool                `protobuf:"varint,9,opt,name=sync_log,json=syncLog,proto3" json:"sync_log,omitempty"`
	// True means execution time statistics should be recorded and returned.
	RecordTimeStat bool `protobuf:"varint,10,opt,name=record_time_stat,json=recordTimeStat,proto3" json:"record_time_stat,omitempty"`
	// True means RocksDB scan statistics should be recorded and returned.
	RecordScanStat bool `protobuf:"varint,11,opt,name=record_scan_stat,json=recordScanStat,proto3" json:"record_scan_stat,omitempty"`
	ReplicaRead    bool `protobuf:"varint,12,opt,name=replica_read,json=replicaRead,proto3" json:"replica_read,omitempty"`
	// Read requests can ignore locks belonging to these transactions because either
	// these transactions are rolled back or theirs commit_ts > read request's start_ts.
	ResolvedLocks          []uint64 `protobuf:"varint,13,rep,packed,name=resolved_locks,json=resolvedLocks,proto3" json:"resolved_locks,omitempty"`
	MaxExecutionDurationMs uint64   `protobuf:"varint,14,opt,name=max_execution_duration_ms,json=maxExecutionDurationMs,proto3" json:"max_execution_duration_ms,omitempty"`
	// After a region applies to `applied_index`, we can get a
	// snapshot for the region even if the peer is a follower.
	AppliedIndex uint64 `protobuf:"varint,15,opt,name=applied_index,json=appliedIndex,proto3" json:"applied_index,omitempty"`
	// A hint for TiKV to schedule tasks more fairly. Query with same task ID
	// may share same priority and resource quota.
	TaskId uint64 `protobuf:"varint,16,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Not required to read the most up-to-date data, replicas with `safe_ts` >= `start_ts`
	// can handle read request directly
	StaleRead bool `protobuf:"varint,17,opt,name=stale_read,json=staleRead,proto3" json:"stale_read,omitempty"`
	// Any additional serialized information about the request.
	ResourceGroupTag []byte `protobuf:"bytes,18,opt,name=resource_group_tag,json=resourceGroupTag,proto3" json:"resource_group_tag,omitempty"`
	// Used to tell TiKV whether operations are allowed or not on different disk usages.
	DiskFullOpt DiskFullOpt `protobuf:"varint,19,opt,name=disk_full_opt,json=diskFullOpt,proto3,enum=kvrpcpb.DiskFullOpt" json:"disk_full_opt,omitempty"`
	// Indicates the request is a retry request and the same request may have been sent before.
	IsRetryRequest bool `protobuf:"varint,20,opt,name=is_retry_request,json=isRetryRequest,proto3" json:"is_retry_request,omitempty"`
	// API version implies the encode of the key and value.
	ApiVersion APIVersion `protobuf:"varint,21,opt,name=api_version,json=apiVersion,proto3,enum=kvrpcpb.APIVersion" json:"api_version,omitempty"`
	// Read request should read through locks belonging to these transactions because these
	// transactions are committed and theirs commit_ts <= read request's start_ts.
	CommittedLocks []uint64 `protobuf:"varint,22,rep,packed,name=committed_locks,json=committedLocks,proto3" json:"committed_locks,omitempty"`
}

func (x *Context) Reset() {
	*x = Context{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Context) ProtoMessage() {}

func (x *Context) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Context.ProtoReflect.Descriptor instead.
func (*Context) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{70}
}

func (x *Context) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *Context) GetRegionEpoch() *metapb.RegionEpoch {
	if x != nil {
		return x.RegionEpoch
	}
	return nil
}

func (x *Context) GetPeer() *metapb.Peer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *Context) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *Context) GetPriority() CommandPri {
	if x != nil {
		return x.Priority
	}
	return CommandPri_Normal
}

func (x *Context) GetIsolationLevel() IsolationLevel {
	if x != nil {
		return x.IsolationLevel
	}
	return IsolationLevel_SI
}

func (x *Context) GetNotFillCache() bool {
	if x != nil {
		return x.NotFillCache
	}
	return false
}

func (x *Context) GetSyncLog() bool {
	if x != nil {
		return x.SyncLog
	}
	return false
}

func (x *Context) GetRecordTimeStat() bool {
	if x != nil {
		return x.RecordTimeStat
	}
	return false
}

func (x *Context) GetRecordScanStat() bool {
	if x != nil {
		return x.RecordScanStat
	}
	return false
}

func (x *Context) GetReplicaRead() bool {
	if x != nil {
		return x.ReplicaRead
	}
	return false
}

func (x *Context) GetResolvedLocks() []uint64 {
	if x != nil {
		return x.ResolvedLocks
	}
	return nil
}

func (x *Context) GetMaxExecutionDurationMs() uint64 {
	if x != nil {
		return x.MaxExecutionDurationMs
	}
	return 0
}

func (x *Context) GetAppliedIndex() uint64 {
	if x != nil {
		return x.AppliedIndex
	}
	return 0
}

func (x *Context) GetTaskId() uint64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *Context) GetStaleRead() bool {
	if x != nil {
		return x.StaleRead
	}
	return false
}

func (x *Context) GetResourceGroupTag() []byte {
	if x != nil {
		return x.ResourceGroupTag
	}
	return nil
}

func (x *Context) GetDiskFullOpt() DiskFullOpt {
	if x != nil {
		return x.DiskFullOpt
	}
	return DiskFullOpt_NotAllowedOnFull
}

func (x *Context) GetIsRetryRequest() bool {
	if x != nil {
		return x.IsRetryRequest
	}
	return false
}

func (x *Context) GetApiVersion() APIVersion {
	if x != nil {
		return x.ApiVersion
	}
	return APIVersion_V1
}

func (x *Context) GetCommittedLocks() []uint64 {
	if x != nil {
		return x.CommittedLocks
	}
	return nil
}

type LockInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryLock []byte `protobuf:"bytes,1,opt,name=primary_lock,json=primaryLock,proto3" json:"primary_lock,omitempty"`
	LockVersion uint64 `protobuf:"varint,2,opt,name=lock_version,json=lockVersion,proto3" json:"lock_version,omitempty"`
	Key         []byte `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	LockTtl     uint64 `protobuf:"varint,4,opt,name=lock_ttl,json=lockTtl,proto3" json:"lock_ttl,omitempty"`
	// How many keys this transaction involves in this region.
	TxnSize         uint64 `protobuf:"varint,5,opt,name=txn_size,json=txnSize,proto3" json:"txn_size,omitempty"`
	LockType        Op     `protobuf:"varint,6,opt,name=lock_type,json=lockType,proto3,enum=kvrpcpb.Op" json:"lock_type,omitempty"`
	LockForUpdateTs uint64 `protobuf:"varint,7,opt,name=lock_for_update_ts,json=lockForUpdateTs,proto3" json:"lock_for_update_ts,omitempty"`
	// Fields for transactions that are using Async Commit.
	UseAsyncCommit bool     `protobuf:"varint,8,opt,name=use_async_commit,json=useAsyncCommit,proto3" json:"use_async_commit,omitempty"`
	MinCommitTs    uint64   `protobuf:"varint,9,opt,name=min_commit_ts,json=minCommitTs,proto3" json:"min_commit_ts,omitempty"`
	Secondaries    [][]byte `protobuf:"bytes,10,rep,name=secondaries,proto3" json:"secondaries,omitempty"`
}

func (x *LockInfo) Reset() {
	*x = LockInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockInfo) ProtoMessage() {}

func (x *LockInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockInfo.ProtoReflect.Descriptor instead.
func (*LockInfo) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{71}
}

func (x *LockInfo) GetPrimaryLock() []byte {
	if x != nil {
		return x.PrimaryLock
	}
	return nil
}

func (x *LockInfo) GetLockVersion() uint64 {
	if x != nil {
		return x.LockVersion
	}
	return 0
}

func (x *LockInfo) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *LockInfo) GetLockTtl() uint64 {
	if x != nil {
		return x.LockTtl
	}
	return 0
}

func (x *LockInfo) GetTxnSize() uint64 {
	if x != nil {
		return x.TxnSize
	}
	return 0
}

func (x *LockInfo) GetLockType() Op {
	if x != nil {
		return x.LockType
	}
	return Op_Put
}

func (x *LockInfo) GetLockForUpdateTs() uint64 {
	if x != nil {
		return x.LockForUpdateTs
	}
	return 0
}

func (x *LockInfo) GetUseAsyncCommit() bool {
	if x != nil {
		return x.UseAsyncCommit
	}
	return false
}

func (x *LockInfo) GetMinCommitTs() uint64 {
	if x != nil {
		return x.MinCommitTs
	}
	return 0
}

func (x *LockInfo) GetSecondaries() [][]byte {
	if x != nil {
		return x.Secondaries
	}
	return nil
}

type KeyError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locked           *LockInfo         `protobuf:"bytes,1,opt,name=locked,proto3" json:"locked,omitempty"`                                                 // Client should backoff or cleanup the lock then retry.
	Retryable        string            `protobuf:"bytes,2,opt,name=retryable,proto3" json:"retryable,omitempty"`                                           // Client may restart the txn. e.g write conflict.
	Abort            string            `protobuf:"bytes,3,opt,name=abort,proto3" json:"abort,omitempty"`                                                   // Client should abort the txn.
	Conflict         *WriteConflict    `protobuf:"bytes,4,opt,name=conflict,proto3" json:"conflict,omitempty"`                                             // Write conflict is moved from retryable to here.
	AlreadyExist     *AlreadyExist     `protobuf:"bytes,5,opt,name=already_exist,json=alreadyExist,proto3" json:"already_exist,omitempty"`                 // Key already exists
	Deadlock         *Deadlock         `protobuf:"bytes,6,opt,name=deadlock,proto3" json:"deadlock,omitempty"`                                             // Deadlock is used in pessimistic transaction for single statement rollback.
	CommitTsExpired  *CommitTsExpired  `protobuf:"bytes,7,opt,name=commit_ts_expired,json=commitTsExpired,proto3" json:"commit_ts_expired,omitempty"`      // Commit ts is earlier than min commit ts of a transaction.
	TxnNotFound      *TxnNotFound      `protobuf:"bytes,8,opt,name=txn_not_found,json=txnNotFound,proto3" json:"txn_not_found,omitempty"`                  // Txn not found when checking txn status.
	CommitTsTooLarge *CommitTsTooLarge `protobuf:"bytes,9,opt,name=commit_ts_too_large,json=commitTsTooLarge,proto3" json:"commit_ts_too_large,omitempty"` // Calculated commit TS exceeds the limit given by the user.
	AssertionFailed  *AssertionFailed  `protobuf:"bytes,10,opt,name=assertion_failed,json=assertionFailed,proto3" json:"assertion_failed,omitempty"`       // Assertion of a `Mutation` is evaluated as a failure.
}

func (x *KeyError) Reset() {
	*x = KeyError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyError) ProtoMessage() {}

func (x *KeyError) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyError.ProtoReflect.Descriptor instead.
func (*KeyError) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{72}
}

func (x *KeyError) GetLocked() *LockInfo {
	if x != nil {
		return x.Locked
	}
	return nil
}

func (x *KeyError) GetRetryable() string {
	if x != nil {
		return x.Retryable
	}
	return ""
}

func (x *KeyError) GetAbort() string {
	if x != nil {
		return x.Abort
	}
	return ""
}

func (x *KeyError) GetConflict() *WriteConflict {
	if x != nil {
		return x.Conflict
	}
	return nil
}

func (x *KeyError) GetAlreadyExist() *AlreadyExist {
	if x != nil {
		return x.AlreadyExist
	}
	return nil
}

func (x *KeyError) GetDeadlock() *Deadlock {
	if x != nil {
		return x.Deadlock
	}
	return nil
}

func (x *KeyError) GetCommitTsExpired() *CommitTsExpired {
	if x != nil {
		return x.CommitTsExpired
	}
	return nil
}

func (x *KeyError) GetTxnNotFound() *TxnNotFound {
	if x != nil {
		return x.TxnNotFound
	}
	return nil
}

func (x *KeyError) GetCommitTsTooLarge() *CommitTsTooLarge {
	if x != nil {
		return x.CommitTsTooLarge
	}
	return nil
}

func (x *KeyError) GetAssertionFailed() *AssertionFailed {
	if x != nil {
		return x.AssertionFailed
	}
	return nil
}

type WriteConflict struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTs          uint64 `protobuf:"varint,1,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	ConflictTs       uint64 `protobuf:"varint,2,opt,name=conflict_ts,json=conflictTs,proto3" json:"conflict_ts,omitempty"`
	Key              []byte `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Primary          []byte `protobuf:"bytes,4,opt,name=primary,proto3" json:"primary,omitempty"`
	ConflictCommitTs uint64 `protobuf:"varint,5,opt,name=conflict_commit_ts,json=conflictCommitTs,proto3" json:"conflict_commit_ts,omitempty"`
}

func (x *WriteConflict) Reset() {
	*x = WriteConflict{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteConflict) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteConflict) ProtoMessage() {}

func (x *WriteConflict) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteConflict.ProtoReflect.Descriptor instead.
func (*WriteConflict) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{73}
}

func (x *WriteConflict) GetStartTs() uint64 {
	if x != nil {
		return x.StartTs
	}
	return 0
}

func (x *WriteConflict) GetConflictTs() uint64 {
	if x != nil {
		return x.ConflictTs
	}
	return 0
}

func (x *WriteConflict) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *WriteConflict) GetPrimary() []byte {
	if x != nil {
		return x.Primary
	}
	return nil
}

func (x *WriteConflict) GetConflictCommitTs() uint64 {
	if x != nil {
		return x.ConflictCommitTs
	}
	return 0
}

type AlreadyExist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *AlreadyExist) Reset() {
	*x = AlreadyExist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlreadyExist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlreadyExist) ProtoMessage() {}

func (x *AlreadyExist) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlreadyExist.ProtoReflect.Descriptor instead.
func (*AlreadyExist) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{74}
}

func (x *AlreadyExist) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type Deadlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LockTs          uint64                   `protobuf:"varint,1,opt,name=lock_ts,json=lockTs,proto3" json:"lock_ts,omitempty"`
	LockKey         []byte                   `protobuf:"bytes,2,opt,name=lock_key,json=lockKey,proto3" json:"lock_key,omitempty"`
	DeadlockKeyHash uint64                   `protobuf:"varint,3,opt,name=deadlock_key_hash,json=deadlockKeyHash,proto3" json:"deadlock_key_hash,omitempty"`
	WaitChain       []*deadlock.WaitForEntry `protobuf:"bytes,4,rep,name=wait_chain,json=waitChain,proto3" json:"wait_chain,omitempty"`
}

func (x *Deadlock) Reset() {
	*x = Deadlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deadlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deadlock) ProtoMessage() {}

func (x *Deadlock) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deadlock.ProtoReflect.Descriptor instead.
func (*Deadlock) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{75}
}

func (x *Deadlock) GetLockTs() uint64 {
	if x != nil {
		return x.LockTs
	}
	return 0
}

func (x *Deadlock) GetLockKey() []byte {
	if x != nil {
		return x.LockKey
	}
	return nil
}

func (x *Deadlock) GetDeadlockKeyHash() uint64 {
	if x != nil {
		return x.DeadlockKeyHash
	}
	return 0
}

func (x *Deadlock) GetWaitChain() []*deadlock.WaitForEntry {
	if x != nil {
		return x.WaitChain
	}
	return nil
}

type CommitTsExpired struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTs           uint64 `protobuf:"varint,1,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	AttemptedCommitTs uint64 `protobuf:"varint,2,opt,name=attempted_commit_ts,json=attemptedCommitTs,proto3" json:"attempted_commit_ts,omitempty"`
	Key               []byte `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	MinCommitTs       uint64 `protobuf:"varint,4,opt,name=min_commit_ts,json=minCommitTs,proto3" json:"min_commit_ts,omitempty"`
}

func (x *CommitTsExpired) Reset() {
	*x = CommitTsExpired{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitTsExpired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitTsExpired) ProtoMessage() {}

func (x *CommitTsExpired) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitTsExpired.ProtoReflect.Descriptor instead.
func (*CommitTsExpired) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{76}
}

func (x *CommitTsExpired) GetStartTs() uint64 {
	if x != nil {
		return x.StartTs
	}
	return 0
}

func (x *CommitTsExpired) GetAttemptedCommitTs() uint64 {
	if x != nil {
		return x.AttemptedCommitTs
	}
	return 0
}

func (x *CommitTsExpired) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *CommitTsExpired) GetMinCommitTs() uint64 {
	if x != nil {
		return x.MinCommitTs
	}
	return 0
}

type TxnNotFound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTs    uint64 `protobuf:"varint,1,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	PrimaryKey []byte `protobuf:"bytes,2,opt,name=primary_key,json=primaryKey,proto3" json:"primary_key,omitempty"`
}

func (x *TxnNotFound) Reset() {
	*x = TxnNotFound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxnNotFound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxnNotFound) ProtoMessage() {}

func (x *TxnNotFound) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxnNotFound.ProtoReflect.Descriptor instead.
func (*TxnNotFound) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{77}
}

func (x *TxnNotFound) GetStartTs() uint64 {
	if x != nil {
		return x.StartTs
	}
	return 0
}

func (x *TxnNotFound) GetPrimaryKey() []byte {
	if x != nil {
		return x.PrimaryKey
	}
	return nil
}

type CommitTsTooLarge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitTs uint64 `protobuf:"varint,1,opt,name=commit_ts,json=commitTs,proto3" json:"commit_ts,omitempty"` // The calculated commit TS.
}

func (x *CommitTsTooLarge) Reset() {
	*x = CommitTsTooLarge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitTsTooLarge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitTsTooLarge) ProtoMessage() {}

func (x *CommitTsTooLarge) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitTsTooLarge.ProtoReflect.Descriptor instead.
func (*CommitTsTooLarge) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{78}
}

func (x *CommitTsTooLarge) GetCommitTs() uint64 {
	if x != nil {
		return x.CommitTs
	}
	return 0
}

type AssertionFailed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTs          uint64    `protobuf:"varint,1,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	Key              []byte    `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Assertion        Assertion `protobuf:"varint,3,opt,name=assertion,proto3,enum=kvrpcpb.Assertion" json:"assertion,omitempty"`
	ExistingStartTs  uint64    `protobuf:"varint,4,opt,name=existing_start_ts,json=existingStartTs,proto3" json:"existing_start_ts,omitempty"`
	ExistingCommitTs uint64    `protobuf:"varint,5,opt,name=existing_commit_ts,json=existingCommitTs,proto3" json:"existing_commit_ts,omitempty"`
}

func (x *AssertionFailed) Reset() {
	*x = AssertionFailed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssertionFailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssertionFailed) ProtoMessage() {}

func (x *AssertionFailed) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssertionFailed.ProtoReflect.Descriptor instead.
func (*AssertionFailed) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{79}
}

func (x *AssertionFailed) GetStartTs() uint64 {
	if x != nil {
		return x.StartTs
	}
	return 0
}

func (x *AssertionFailed) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AssertionFailed) GetAssertion() Assertion {
	if x != nil {
		return x.Assertion
	}
	return Assertion_None
}

func (x *AssertionFailed) GetExistingStartTs() uint64 {
	if x != nil {
		return x.ExistingStartTs
	}
	return 0
}

func (x *AssertionFailed) GetExistingCommitTs() uint64 {
	if x != nil {
		return x.ExistingCommitTs
	}
	return 0
}

type TimeDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Off-cpu wall time elapsed in TiKV side. Usually this includes queue waiting time and
	// other kind of waitings in series.
	WaitWallTimeMs int64 `protobuf:"varint,1,opt,name=wait_wall_time_ms,json=waitWallTimeMs,proto3" json:"wait_wall_time_ms,omitempty"`
	// Off-cpu and on-cpu wall time elapsed to actually process the request payload. It does not
	// include `wait_wall_time`.
	// This field is very close to the CPU time in most cases. Some wait time spend in RocksDB
	// cannot be excluded for now, like Mutex wait time, which is included in this field, so that
	// this field is called wall time instead of CPU time.
	ProcessWallTimeMs int64 `protobuf:"varint,2,opt,name=process_wall_time_ms,json=processWallTimeMs,proto3" json:"process_wall_time_ms,omitempty"`
	// KV read wall Time means the time used in key/value scan and get.
	KvReadWallTimeMs int64 `protobuf:"varint,3,opt,name=kv_read_wall_time_ms,json=kvReadWallTimeMs,proto3" json:"kv_read_wall_time_ms,omitempty"`
}

func (x *TimeDetail) Reset() {
	*x = TimeDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeDetail) ProtoMessage() {}

func (x *TimeDetail) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeDetail.ProtoReflect.Descriptor instead.
func (*TimeDetail) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{80}
}

func (x *TimeDetail) GetWaitWallTimeMs() int64 {
	if x != nil {
		return x.WaitWallTimeMs
	}
	return 0
}

func (x *TimeDetail) GetProcessWallTimeMs() int64 {
	if x != nil {
		return x.ProcessWallTimeMs
	}
	return 0
}

func (x *TimeDetail) GetKvReadWallTimeMs() int64 {
	if x != nil {
		return x.KvReadWallTimeMs
	}
	return 0
}

type ScanInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total     int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Processed int64 `protobuf:"varint,2,opt,name=processed,proto3" json:"processed,omitempty"`
	ReadBytes int64 `protobuf:"varint,3,opt,name=read_bytes,json=readBytes,proto3" json:"read_bytes,omitempty"`
}

func (x *ScanInfo) Reset() {
	*x = ScanInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanInfo) ProtoMessage() {}

func (x *ScanInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanInfo.ProtoReflect.Descriptor instead.
func (*ScanInfo) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{81}
}

func (x *ScanInfo) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ScanInfo) GetProcessed() int64 {
	if x != nil {
		return x.Processed
	}
	return 0
}

func (x *ScanInfo) GetReadBytes() int64 {
	if x != nil {
		return x.ReadBytes
	}
	return 0
}

// Only reserved for compatibility.
type ScanDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Write *ScanInfo `protobuf:"bytes,1,opt,name=write,proto3" json:"write,omitempty"`
	Lock  *ScanInfo `protobuf:"bytes,2,opt,name=lock,proto3" json:"lock,omitempty"`
	Data  *ScanInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ScanDetail) Reset() {
	*x = ScanDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanDetail) ProtoMessage() {}

func (x *ScanDetail) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanDetail.ProtoReflect.Descriptor instead.
func (*ScanDetail) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{82}
}

func (x *ScanDetail) GetWrite() *ScanInfo {
	if x != nil {
		return x.Write
	}
	return nil
}

func (x *ScanDetail) GetLock() *ScanInfo {
	if x != nil {
		return x.Lock
	}
	return nil
}

func (x *ScanDetail) GetData() *ScanInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type ScanDetailV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of user keys scanned from the storage.
	// It does not include deleted version or RocksDB tombstone keys.
	// For Coprocessor requests, it includes keys that has been filtered out by
	// Selection.
	ProcessedVersions uint64 `protobuf:"varint,1,opt,name=processed_versions,json=processedVersions,proto3" json:"processed_versions,omitempty"`
	// Number of bytes of user key-value pairs scanned from the storage, i.e.
	// total size of data returned from MVCC layer.
	ProcessedVersionsSize uint64 `protobuf:"varint,8,opt,name=processed_versions_size,json=processedVersionsSize,proto3" json:"processed_versions_size,omitempty"`
	// Approximate number of MVCC keys meet during scanning. It includes
	// deleted versions, but does not include RocksDB tombstone keys.
	//
	// When this field is notably larger than `processed_versions`, it means
	// there are a lot of deleted MVCC keys.
	TotalVersions uint64 `protobuf:"varint,2,opt,name=total_versions,json=totalVersions,proto3" json:"total_versions,omitempty"`
	// Total number of deletes and single deletes skipped over during
	// iteration, i.e. how many RocksDB tombstones are skipped.
	RocksdbDeleteSkippedCount uint64 `protobuf:"varint,3,opt,name=rocksdb_delete_skipped_count,json=rocksdbDeleteSkippedCount,proto3" json:"rocksdb_delete_skipped_count,omitempty"`
	// Total number of internal keys skipped over during iteration.
	// See https://github.com/facebook/rocksdb/blob/9f1c84ca471d8b1ad7be9f3eebfc2c7e07dfd7a7/include/rocksdb/perf_context.h#L84 for details.
	RocksdbKeySkippedCount uint64 `protobuf:"varint,4,opt,name=rocksdb_key_skipped_count,json=rocksdbKeySkippedCount,proto3" json:"rocksdb_key_skipped_count,omitempty"`
	// Total number of RocksDB block cache hits.
	RocksdbBlockCacheHitCount uint64 `protobuf:"varint,5,opt,name=rocksdb_block_cache_hit_count,json=rocksdbBlockCacheHitCount,proto3" json:"rocksdb_block_cache_hit_count,omitempty"`
	// Total number of block reads (with IO).
	RocksdbBlockReadCount uint64 `protobuf:"varint,6,opt,name=rocksdb_block_read_count,json=rocksdbBlockReadCount,proto3" json:"rocksdb_block_read_count,omitempty"`
	// Total number of bytes from block reads.
	RocksdbBlockReadByte uint64 `protobuf:"varint,7,opt,name=rocksdb_block_read_byte,json=rocksdbBlockReadByte,proto3" json:"rocksdb_block_read_byte,omitempty"`
}

func (x *ScanDetailV2) Reset() {
	*x = ScanDetailV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanDetailV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanDetailV2) ProtoMessage() {}

func (x *ScanDetailV2) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanDetailV2.ProtoReflect.Descriptor instead.
func (*ScanDetailV2) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{83}
}

func (x *ScanDetailV2) GetProcessedVersions() uint64 {
	if x != nil {
		return x.ProcessedVersions
	}
	return 0
}

func (x *ScanDetailV2) GetProcessedVersionsSize() uint64 {
	if x != nil {
		return x.ProcessedVersionsSize
	}
	return 0
}

func (x *ScanDetailV2) GetTotalVersions() uint64 {
	if x != nil {
		return x.TotalVersions
	}
	return 0
}

func (x *ScanDetailV2) GetRocksdbDeleteSkippedCount() uint64 {
	if x != nil {
		return x.RocksdbDeleteSkippedCount
	}
	return 0
}

func (x *ScanDetailV2) GetRocksdbKeySkippedCount() uint64 {
	if x != nil {
		return x.RocksdbKeySkippedCount
	}
	return 0
}

func (x *ScanDetailV2) GetRocksdbBlockCacheHitCount() uint64 {
	if x != nil {
		return x.RocksdbBlockCacheHitCount
	}
	return 0
}

func (x *ScanDetailV2) GetRocksdbBlockReadCount() uint64 {
	if x != nil {
		return x.RocksdbBlockReadCount
	}
	return 0
}

func (x *ScanDetailV2) GetRocksdbBlockReadByte() uint64 {
	if x != nil {
		return x.RocksdbBlockReadByte
	}
	return 0
}

type ExecDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Available when ctx.record_time_stat = true or meet slow query.
	TimeDetail *TimeDetail `protobuf:"bytes,1,opt,name=time_detail,json=timeDetail,proto3" json:"time_detail,omitempty"`
	// Available when ctx.record_scan_stat = true or meet slow query.
	ScanDetail *ScanDetail `protobuf:"bytes,2,opt,name=scan_detail,json=scanDetail,proto3" json:"scan_detail,omitempty"`
}

func (x *ExecDetails) Reset() {
	*x = ExecDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecDetails) ProtoMessage() {}

func (x *ExecDetails) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecDetails.ProtoReflect.Descriptor instead.
func (*ExecDetails) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{84}
}

func (x *ExecDetails) GetTimeDetail() *TimeDetail {
	if x != nil {
		return x.TimeDetail
	}
	return nil
}

func (x *ExecDetails) GetScanDetail() *ScanDetail {
	if x != nil {
		return x.ScanDetail
	}
	return nil
}

type ExecDetailsV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Available when ctx.record_time_stat = true or meet slow query.
	TimeDetail *TimeDetail `protobuf:"bytes,1,opt,name=time_detail,json=timeDetail,proto3" json:"time_detail,omitempty"`
	// Available when ctx.record_scan_stat = true or meet slow query.
	ScanDetailV2 *ScanDetailV2 `protobuf:"bytes,2,opt,name=scan_detail_v2,json=scanDetailV2,proto3" json:"scan_detail_v2,omitempty"`
}

func (x *ExecDetailsV2) Reset() {
	*x = ExecDetailsV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecDetailsV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecDetailsV2) ProtoMessage() {}

func (x *ExecDetailsV2) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecDetailsV2.ProtoReflect.Descriptor instead.
func (*ExecDetailsV2) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{85}
}

func (x *ExecDetailsV2) GetTimeDetail() *TimeDetail {
	if x != nil {
		return x.TimeDetail
	}
	return nil
}

func (x *ExecDetailsV2) GetScanDetailV2() *ScanDetailV2 {
	if x != nil {
		return x.ScanDetailV2
	}
	return nil
}

type KvPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *KeyError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Key   []byte    `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte    `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KvPair) Reset() {
	*x = KvPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KvPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvPair) ProtoMessage() {}

func (x *KvPair) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvPair.ProtoReflect.Descriptor instead.
func (*KvPair) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{86}
}

func (x *KvPair) GetError() *KeyError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *KvPair) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *KvPair) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type Mutation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op        Op        `protobuf:"varint,1,opt,name=op,proto3,enum=kvrpcpb.Op" json:"op,omitempty"`
	Key       []byte    `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value     []byte    `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Assertion Assertion `protobuf:"varint,4,opt,name=assertion,proto3,enum=kvrpcpb.Assertion" json:"assertion,omitempty"`
}

func (x *Mutation) Reset() {
	*x = Mutation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mutation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mutation) ProtoMessage() {}

func (x *Mutation) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mutation.ProtoReflect.Descriptor instead.
func (*Mutation) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{87}
}

func (x *Mutation) GetOp() Op {
	if x != nil {
		return x.Op
	}
	return Op_Put
}

func (x *Mutation) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Mutation) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Mutation) GetAssertion() Assertion {
	if x != nil {
		return x.Assertion
	}
	return Assertion_None
}

type MvccWrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                  Op     `protobuf:"varint,1,opt,name=type,proto3,enum=kvrpcpb.Op" json:"type,omitempty"`
	StartTs               uint64 `protobuf:"varint,2,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	CommitTs              uint64 `protobuf:"varint,3,opt,name=commit_ts,json=commitTs,proto3" json:"commit_ts,omitempty"`
	ShortValue            []byte `protobuf:"bytes,4,opt,name=short_value,json=shortValue,proto3" json:"short_value,omitempty"`
	HasOverlappedRollback bool   `protobuf:"varint,5,opt,name=has_overlapped_rollback,json=hasOverlappedRollback,proto3" json:"has_overlapped_rollback,omitempty"`
	HasGcFence            bool   `protobuf:"varint,6,opt,name=has_gc_fence,json=hasGcFence,proto3" json:"has_gc_fence,omitempty"`
	GcFence               uint64 `protobuf:"varint,7,opt,name=gc_fence,json=gcFence,proto3" json:"gc_fence,omitempty"`
}

func (x *MvccWrite) Reset() {
	*x = MvccWrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MvccWrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MvccWrite) ProtoMessage() {}

func (x *MvccWrite) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MvccWrite.ProtoReflect.Descriptor instead.
func (*MvccWrite) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{88}
}

func (x *MvccWrite) GetType() Op {
	if x != nil {
		return x.Type
	}
	return Op_Put
}

func (x *MvccWrite) GetStartTs() uint64 {
	if x != nil {
		return x.StartTs
	}
	return 0
}

func (x *MvccWrite) GetCommitTs() uint64 {
	if x != nil {
		return x.CommitTs
	}
	return 0
}

func (x *MvccWrite) GetShortValue() []byte {
	if x != nil {
		return x.ShortValue
	}
	return nil
}

func (x *MvccWrite) GetHasOverlappedRollback() bool {
	if x != nil {
		return x.HasOverlappedRollback
	}
	return false
}

func (x *MvccWrite) GetHasGcFence() bool {
	if x != nil {
		return x.HasGcFence
	}
	return false
}

func (x *MvccWrite) GetGcFence() uint64 {
	if x != nil {
		return x.GcFence
	}
	return 0
}

type MvccValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTs uint64 `protobuf:"varint,1,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	Value   []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MvccValue) Reset() {
	*x = MvccValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MvccValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MvccValue) ProtoMessage() {}

func (x *MvccValue) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MvccValue.ProtoReflect.Descriptor instead.
func (*MvccValue) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{89}
}

func (x *MvccValue) GetStartTs() uint64 {
	if x != nil {
		return x.StartTs
	}
	return 0
}

func (x *MvccValue) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type MvccLock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           Op       `protobuf:"varint,1,opt,name=type,proto3,enum=kvrpcpb.Op" json:"type,omitempty"`
	StartTs        uint64   `protobuf:"varint,2,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	Primary        []byte   `protobuf:"bytes,3,opt,name=primary,proto3" json:"primary,omitempty"`
	ShortValue     []byte   `protobuf:"bytes,4,opt,name=short_value,json=shortValue,proto3" json:"short_value,omitempty"`
	Ttl            uint64   `protobuf:"varint,5,opt,name=ttl,proto3" json:"ttl,omitempty"`
	ForUpdateTs    uint64   `protobuf:"varint,6,opt,name=for_update_ts,json=forUpdateTs,proto3" json:"for_update_ts,omitempty"`
	TxnSize        uint64   `protobuf:"varint,7,opt,name=txn_size,json=txnSize,proto3" json:"txn_size,omitempty"`
	UseAsyncCommit bool     `protobuf:"varint,8,opt,name=use_async_commit,json=useAsyncCommit,proto3" json:"use_async_commit,omitempty"`
	Secondaries    [][]byte `protobuf:"bytes,9,rep,name=secondaries,proto3" json:"secondaries,omitempty"`
	RollbackTs     []uint64 `protobuf:"varint,10,rep,packed,name=rollback_ts,json=rollbackTs,proto3" json:"rollback_ts,omitempty"`
}

func (x *MvccLock) Reset() {
	*x = MvccLock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MvccLock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MvccLock) ProtoMessage() {}

func (x *MvccLock) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MvccLock.ProtoReflect.Descriptor instead.
func (*MvccLock) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{90}
}

func (x *MvccLock) GetType() Op {
	if x != nil {
		return x.Type
	}
	return Op_Put
}

func (x *MvccLock) GetStartTs() uint64 {
	if x != nil {
		return x.StartTs
	}
	return 0
}

func (x *MvccLock) GetPrimary() []byte {
	if x != nil {
		return x.Primary
	}
	return nil
}

func (x *MvccLock) GetShortValue() []byte {
	if x != nil {
		return x.ShortValue
	}
	return nil
}

func (x *MvccLock) GetTtl() uint64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *MvccLock) GetForUpdateTs() uint64 {
	if x != nil {
		return x.ForUpdateTs
	}
	return 0
}

func (x *MvccLock) GetTxnSize() uint64 {
	if x != nil {
		return x.TxnSize
	}
	return 0
}

func (x *MvccLock) GetUseAsyncCommit() bool {
	if x != nil {
		return x.UseAsyncCommit
	}
	return false
}

func (x *MvccLock) GetSecondaries() [][]byte {
	if x != nil {
		return x.Secondaries
	}
	return nil
}

func (x *MvccLock) GetRollbackTs() []uint64 {
	if x != nil {
		return x.RollbackTs
	}
	return nil
}

type MvccInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lock   *MvccLock    `protobuf:"bytes,1,opt,name=lock,proto3" json:"lock,omitempty"`
	Writes []*MvccWrite `protobuf:"bytes,2,rep,name=writes,proto3" json:"writes,omitempty"`
	Values []*MvccValue `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *MvccInfo) Reset() {
	*x = MvccInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MvccInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MvccInfo) ProtoMessage() {}

func (x *MvccInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MvccInfo.ProtoReflect.Descriptor instead.
func (*MvccInfo) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{91}
}

func (x *MvccInfo) GetLock() *MvccLock {
	if x != nil {
		return x.Lock
	}
	return nil
}

func (x *MvccInfo) GetWrites() []*MvccWrite {
	if x != nil {
		return x.Writes
	}
	return nil
}

func (x *MvccInfo) GetValues() []*MvccValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type TxnInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txn    uint64 `protobuf:"varint,1,opt,name=txn,proto3" json:"txn,omitempty"`
	Status uint64 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *TxnInfo) Reset() {
	*x = TxnInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxnInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxnInfo) ProtoMessage() {}

func (x *TxnInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxnInfo.ProtoReflect.Descriptor instead.
func (*TxnInfo) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{92}
}

func (x *TxnInfo) GetTxn() uint64 {
	if x != nil {
		return x.Txn
	}
	return 0
}

func (x *TxnInfo) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

type KeyRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartKey []byte `protobuf:"bytes,1,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	EndKey   []byte `protobuf:"bytes,2,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
}

func (x *KeyRange) Reset() {
	*x = KeyRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyRange) ProtoMessage() {}

func (x *KeyRange) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyRange.ProtoReflect.Descriptor instead.
func (*KeyRange) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{93}
}

func (x *KeyRange) GetStartKey() []byte {
	if x != nil {
		return x.StartKey
	}
	return nil
}

func (x *KeyRange) GetEndKey() []byte {
	if x != nil {
		return x.EndKey
	}
	return nil
}

type LeaderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId    uint64              `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	PeerId      uint64              `protobuf:"varint,2,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Term        uint64              `protobuf:"varint,3,opt,name=term,proto3" json:"term,omitempty"`
	RegionEpoch *metapb.RegionEpoch `protobuf:"bytes,4,opt,name=region_epoch,json=regionEpoch,proto3" json:"region_epoch,omitempty"`
	ReadState   *ReadState          `protobuf:"bytes,5,opt,name=read_state,json=readState,proto3" json:"read_state,omitempty"`
}

func (x *LeaderInfo) Reset() {
	*x = LeaderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderInfo) ProtoMessage() {}

func (x *LeaderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderInfo.ProtoReflect.Descriptor instead.
func (*LeaderInfo) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{94}
}

func (x *LeaderInfo) GetRegionId() uint64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *LeaderInfo) GetPeerId() uint64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *LeaderInfo) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *LeaderInfo) GetRegionEpoch() *metapb.RegionEpoch {
	if x != nil {
		return x.RegionEpoch
	}
	return nil
}

func (x *LeaderInfo) GetReadState() *ReadState {
	if x != nil {
		return x.ReadState
	}
	return nil
}

type ReadState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppliedIndex uint64 `protobuf:"varint,1,opt,name=applied_index,json=appliedIndex,proto3" json:"applied_index,omitempty"`
	SafeTs       uint64 `protobuf:"varint,2,opt,name=safe_ts,json=safeTs,proto3" json:"safe_ts,omitempty"`
}

func (x *ReadState) Reset() {
	*x = ReadState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadState) ProtoMessage() {}

func (x *ReadState) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadState.ProtoReflect.Descriptor instead.
func (*ReadState) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{95}
}

func (x *ReadState) GetAppliedIndex() uint64 {
	if x != nil {
		return x.AppliedIndex
	}
	return 0
}

func (x *ReadState) GetSafeTs() uint64 {
	if x != nil {
		return x.SafeTs
	}
	return 0
}

type CheckLeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Regions []*LeaderInfo `protobuf:"bytes,1,rep,name=regions,proto3" json:"regions,omitempty"`
	Ts      uint64        `protobuf:"varint,2,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *CheckLeaderRequest) Reset() {
	*x = CheckLeaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckLeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckLeaderRequest) ProtoMessage() {}

func (x *CheckLeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckLeaderRequest.ProtoReflect.Descriptor instead.
func (*CheckLeaderRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{96}
}

func (x *CheckLeaderRequest) GetRegions() []*LeaderInfo {
	if x != nil {
		return x.Regions
	}
	return nil
}

func (x *CheckLeaderRequest) GetTs() uint64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

type CheckLeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Regions []uint64 `protobuf:"varint,1,rep,packed,name=regions,proto3" json:"regions,omitempty"`
	Ts      uint64   `protobuf:"varint,2,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *CheckLeaderResponse) Reset() {
	*x = CheckLeaderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckLeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckLeaderResponse) ProtoMessage() {}

func (x *CheckLeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckLeaderResponse.ProtoReflect.Descriptor instead.
func (*CheckLeaderResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{97}
}

func (x *CheckLeaderResponse) GetRegions() []uint64 {
	if x != nil {
		return x.Regions
	}
	return nil
}

func (x *CheckLeaderResponse) GetTs() uint64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

type StoreSafeTSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Get the minimal `safe_ts` from regions that overlap with the key range [`start_key`, `end_key`)
	// An empty key range means all regions in the store
	KeyRange *KeyRange `protobuf:"bytes,1,opt,name=key_range,json=keyRange,proto3" json:"key_range,omitempty"`
}

func (x *StoreSafeTSRequest) Reset() {
	*x = StoreSafeTSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreSafeTSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreSafeTSRequest) ProtoMessage() {}

func (x *StoreSafeTSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreSafeTSRequest.ProtoReflect.Descriptor instead.
func (*StoreSafeTSRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{98}
}

func (x *StoreSafeTSRequest) GetKeyRange() *KeyRange {
	if x != nil {
		return x.KeyRange
	}
	return nil
}

type StoreSafeTSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SafeTs uint64 `protobuf:"varint,1,opt,name=safe_ts,json=safeTs,proto3" json:"safe_ts,omitempty"`
}

func (x *StoreSafeTSResponse) Reset() {
	*x = StoreSafeTSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreSafeTSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreSafeTSResponse) ProtoMessage() {}

func (x *StoreSafeTSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreSafeTSResponse.ProtoReflect.Descriptor instead.
func (*StoreSafeTSResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{99}
}

func (x *StoreSafeTSResponse) GetSafeTs() uint64 {
	if x != nil {
		return x.SafeTs
	}
	return 0
}

type RawGetKeyTTLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Key     []byte   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Cf      string   `protobuf:"bytes,3,opt,name=cf,proto3" json:"cf,omitempty"`
}

func (x *RawGetKeyTTLRequest) Reset() {
	*x = RawGetKeyTTLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawGetKeyTTLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawGetKeyTTLRequest) ProtoMessage() {}

func (x *RawGetKeyTTLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawGetKeyTTLRequest.ProtoReflect.Descriptor instead.
func (*RawGetKeyTTLRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{100}
}

func (x *RawGetKeyTTLRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *RawGetKeyTTLRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RawGetKeyTTLRequest) GetCf() string {
	if x != nil {
		return x.Cf
	}
	return ""
}

type RawGetKeyTTLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	Error       string         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Ttl         uint64         `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	NotFound    bool           `protobuf:"varint,4,opt,name=not_found,json=notFound,proto3" json:"not_found,omitempty"`
}

func (x *RawGetKeyTTLResponse) Reset() {
	*x = RawGetKeyTTLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawGetKeyTTLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawGetKeyTTLResponse) ProtoMessage() {}

func (x *RawGetKeyTTLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawGetKeyTTLResponse.ProtoReflect.Descriptor instead.
func (*RawGetKeyTTLResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{101}
}

func (x *RawGetKeyTTLResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *RawGetKeyTTLResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *RawGetKeyTTLResponse) GetTtl() uint64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *RawGetKeyTTLResponse) GetNotFound() bool {
	if x != nil {
		return x.NotFound
	}
	return false
}

type RawCASRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context          *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Key              []byte   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value            []byte   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	PreviousNotExist bool     `protobuf:"varint,4,opt,name=previous_not_exist,json=previousNotExist,proto3" json:"previous_not_exist,omitempty"`
	PreviousValue    []byte   `protobuf:"bytes,5,opt,name=previous_value,json=previousValue,proto3" json:"previous_value,omitempty"`
	Cf               string   `protobuf:"bytes,6,opt,name=cf,proto3" json:"cf,omitempty"`
	Ttl              uint64   `protobuf:"varint,7,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *RawCASRequest) Reset() {
	*x = RawCASRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawCASRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawCASRequest) ProtoMessage() {}

func (x *RawCASRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawCASRequest.ProtoReflect.Descriptor instead.
func (*RawCASRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{102}
}

func (x *RawCASRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *RawCASRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RawCASRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *RawCASRequest) GetPreviousNotExist() bool {
	if x != nil {
		return x.PreviousNotExist
	}
	return false
}

func (x *RawCASRequest) GetPreviousValue() []byte {
	if x != nil {
		return x.PreviousValue
	}
	return nil
}

func (x *RawCASRequest) GetCf() string {
	if x != nil {
		return x.Cf
	}
	return ""
}

func (x *RawCASRequest) GetTtl() uint64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

type RawCASResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	Error       string         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Succeed     bool           `protobuf:"varint,3,opt,name=succeed,proto3" json:"succeed,omitempty"`
	// The previous value regardless of whether the comparison is succeed.
	PreviousNotExist bool   `protobuf:"varint,4,opt,name=previous_not_exist,json=previousNotExist,proto3" json:"previous_not_exist,omitempty"`
	PreviousValue    []byte `protobuf:"bytes,5,opt,name=previous_value,json=previousValue,proto3" json:"previous_value,omitempty"`
}

func (x *RawCASResponse) Reset() {
	*x = RawCASResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawCASResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawCASResponse) ProtoMessage() {}

func (x *RawCASResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawCASResponse.ProtoReflect.Descriptor instead.
func (*RawCASResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{103}
}

func (x *RawCASResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *RawCASResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *RawCASResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *RawCASResponse) GetPreviousNotExist() bool {
	if x != nil {
		return x.PreviousNotExist
	}
	return false
}

func (x *RawCASResponse) GetPreviousValue() []byte {
	if x != nil {
		return x.PreviousValue
	}
	return nil
}

type GetLockWaitInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *GetLockWaitInfoRequest) Reset() {
	*x = GetLockWaitInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLockWaitInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLockWaitInfoRequest) ProtoMessage() {}

func (x *GetLockWaitInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLockWaitInfoRequest.ProtoReflect.Descriptor instead.
func (*GetLockWaitInfoRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{104}
}

func (x *GetLockWaitInfoRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetLockWaitInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error           `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	Error       string                   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Entries     []*deadlock.WaitForEntry `protobuf:"bytes,3,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *GetLockWaitInfoResponse) Reset() {
	*x = GetLockWaitInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLockWaitInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLockWaitInfoResponse) ProtoMessage() {}

func (x *GetLockWaitInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLockWaitInfoResponse.ProtoReflect.Descriptor instead.
func (*GetLockWaitInfoResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{105}
}

func (x *GetLockWaitInfoResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *GetLockWaitInfoResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *GetLockWaitInfoResponse) GetEntries() []*deadlock.WaitForEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type RawCoprocessorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context  *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	CoprName string   `protobuf:"bytes,2,opt,name=copr_name,json=coprName,proto3" json:"copr_name,omitempty"`
	// Coprorcessor version constraint following SEMVER definition.
	CoprVersionReq string      `protobuf:"bytes,3,opt,name=copr_version_req,json=coprVersionReq,proto3" json:"copr_version_req,omitempty"`
	Ranges         []*KeyRange `protobuf:"bytes,4,rep,name=ranges,proto3" json:"ranges,omitempty"`
	Data           []byte      `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RawCoprocessorRequest) Reset() {
	*x = RawCoprocessorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawCoprocessorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawCoprocessorRequest) ProtoMessage() {}

func (x *RawCoprocessorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawCoprocessorRequest.ProtoReflect.Descriptor instead.
func (*RawCoprocessorRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{106}
}

func (x *RawCoprocessorRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *RawCoprocessorRequest) GetCoprName() string {
	if x != nil {
		return x.CoprName
	}
	return ""
}

func (x *RawCoprocessorRequest) GetCoprVersionReq() string {
	if x != nil {
		return x.CoprVersionReq
	}
	return ""
}

func (x *RawCoprocessorRequest) GetRanges() []*KeyRange {
	if x != nil {
		return x.Ranges
	}
	return nil
}

func (x *RawCoprocessorRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type RawCoprocessorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	// Error message for cases like if no coprocessor with a matching name is found
	// or on a version mismatch between plugin_api and the coprocessor.
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Data  []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RawCoprocessorResponse) Reset() {
	*x = RawCoprocessorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawCoprocessorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawCoprocessorResponse) ProtoMessage() {}

func (x *RawCoprocessorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawCoprocessorResponse.ProtoReflect.Descriptor instead.
func (*RawCoprocessorResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{107}
}

func (x *RawCoprocessorResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *RawCoprocessorResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *RawCoprocessorResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type RawChecksumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context   *Context          `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Algorithm ChecksumAlgorithm `protobuf:"varint,2,opt,name=algorithm,proto3,enum=kvrpcpb.ChecksumAlgorithm" json:"algorithm,omitempty"`
	Ranges    []*KeyRange       `protobuf:"bytes,3,rep,name=ranges,proto3" json:"ranges,omitempty"`
}

func (x *RawChecksumRequest) Reset() {
	*x = RawChecksumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawChecksumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawChecksumRequest) ProtoMessage() {}

func (x *RawChecksumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawChecksumRequest.ProtoReflect.Descriptor instead.
func (*RawChecksumRequest) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{108}
}

func (x *RawChecksumRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *RawChecksumRequest) GetAlgorithm() ChecksumAlgorithm {
	if x != nil {
		return x.Algorithm
	}
	return ChecksumAlgorithm_Crc64_Xor
}

func (x *RawChecksumRequest) GetRanges() []*KeyRange {
	if x != nil {
		return x.Ranges
	}
	return nil
}

type RawChecksumResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionError *errorpb.Error `protobuf:"bytes,1,opt,name=region_error,json=regionError,proto3" json:"region_error,omitempty"`
	Error       string         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Checksum    uint64         `protobuf:"varint,3,opt,name=checksum,proto3" json:"checksum,omitempty"`
	TotalKvs    uint64         `protobuf:"varint,4,opt,name=total_kvs,json=totalKvs,proto3" json:"total_kvs,omitempty"`
	TotalBytes  uint64         `protobuf:"varint,5,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
}

func (x *RawChecksumResponse) Reset() {
	*x = RawChecksumResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvrpcpb_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawChecksumResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawChecksumResponse) ProtoMessage() {}

func (x *RawChecksumResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvrpcpb_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawChecksumResponse.ProtoReflect.Descriptor instead.
func (*RawChecksumResponse) Descriptor() ([]byte, []int) {
	return file_kvrpcpb_proto_rawDescGZIP(), []int{109}
}

func (x *RawChecksumResponse) GetRegionError() *errorpb.Error {
	if x != nil {
		return x.RegionError
	}
	return nil
}

func (x *RawChecksumResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *RawChecksumResponse) GetChecksum() uint64 {
	if x != nil {
		return x.Checksum
	}
	return 0
}

func (x *RawChecksumResponse) GetTotalKvs() uint64 {
	if x != nil {
		return x.TotalKvs
	}
	return 0
}

func (x *RawChecksumResponse) GetTotalBytes() uint64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

var File_kvrpcpb_proto protoreflect.FileDescriptor

var file_kvrpcpb_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x1a, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x70, 0x62, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x72, 0x75, 0x73,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x64, 0x65,
	0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x64, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x76,
	0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xe2, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4b,
	0x65, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x3e, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x5f, 0x76, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x76, 0x72,
	0x70, 0x63, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x56, 0x32, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x56,
	0x32, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0xf5, 0x01, 0x0a, 0x0b, 0x53, 0x63, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x65, 0x70, 0x22,
	0x91, 0x01, 0x0a, 0x0c, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x70, 0x62,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4b, 0x76, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x76, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0xa6, 0x04, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62,
	0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6d, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x74, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x6b, 0x69, 0x70, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x6b, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x2e, 0x0a, 0x13, 0x69,
	0x73, 0x5f, 0x70, 0x65, 0x73, 0x73, 0x69, 0x6d, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x07, 0x20, 0x03, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x50, 0x65, 0x73, 0x73,
	0x69, 0x6d, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x78, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74,
	0x78, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x66,
	0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x41, 0x73, 0x79,
	0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x72,
	0x79, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x74, 0x72, 0x79, 0x4f, 0x6e, 0x65, 0x50, 0x63, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x73, 0x22, 0xbd, 0x01, 0x0a,
	0x10, 0x50, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x31, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x70,
	0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4b,
	0x65, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x22, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x54, 0x73, 0x12, 0x27, 0x0a, 0x10, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x63, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6f,
	0x6e, 0x65, 0x50, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x73, 0x22, 0xa2, 0x03, 0x0a,
	0x16, 0x50, 0x65, 0x73, 0x73, 0x69, 0x6d, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62,
	0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6d, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x74, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x66, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x12,
	0x21, 0x0a, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54,
	0x73, 0x22, 0xe1, 0x01, 0x0a, 0x17, 0x50, 0x65, 0x73, 0x73, 0x69, 0x6d, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x29, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x46,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x1a, 0x50, 0x65, 0x73, 0x73, 0x69, 0x6d,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x66, 0x6f,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x7b, 0x0a,
	0x1b, 0x50, 0x65, 0x73, 0x73, 0x69, 0x6d, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x29, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x13, 0x54,
	0x78, 0x6e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x63,
	0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x64, 0x76, 0x69, 0x73, 0x65,
	0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x61, 0x64, 0x76, 0x69, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x74, 0x6c, 0x22, 0x8d,
	0x01, 0x0a, 0x14, 0x54, 0x78, 0x6e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0b, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x76, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x74, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x74, 0x6c, 0x22, 0xe1,
	0x02, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x76, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x54, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x5f, 0x69, 0x66, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x66,
	0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x65, 0x73, 0x73, 0x69, 0x6d, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x69, 0x6e, 0x67, 0x50, 0x65, 0x73, 0x73, 0x69, 0x6d, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4c, 0x6f,
	0x63, 0x6b, 0x22, 0x8f, 0x02, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x78, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x63,
	0x6b, 0x54, 0x74, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6b, 0x76,
	0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70,
	0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x81, 0x01, 0x0a, 0x1a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xbf, 0x01, 0x0a, 0x1b, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0b,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x76, 0x72,
	0x70, 0x63, 0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4c, 0x6f,
	0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x0d, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x52, 0x06,
	0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x22, 0x93, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x76,
	0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x67, 0x0a, 0x0d,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a,
	0x09, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x0e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0b, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x92, 0x01, 0x0a, 0x0e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x54, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x0f, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x76,
	0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6b, 0x0a, 0x0f,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xdb, 0x01, 0x0a, 0x10, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x70, 0x62, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x25, 0x0a, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4b, 0x76, 0x50, 0x61, 0x69,
	0x72, 0x52, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x76, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x56, 0x32, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x56, 0x32, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70,
	0x62, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x7b, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x22, 0x73, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xaa, 0x01, 0x0a, 0x0f, 0x53, 0x63,
	0x61, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x6d, 0x61, 0x78, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x22, 0x97, 0x01, 0x0a, 0x10, 0x53, 0x63, 0x61, 0x6e, 0x4c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x27,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62,
	0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x22, 0xcf, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2d, 0x0a, 0x09, 0x74, 0x78, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x74, 0x78, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x22, 0x71, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x4c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x76,
	0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x56, 0x0a, 0x09, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x73, 0x61, 0x66, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x68, 0x0a,
	0x0a, 0x47, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x27,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x97, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x6e, 0x6c,
	0x79, 0x22, 0x5e, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0b,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x5d, 0x0a, 0x0d, 0x52, 0x61, 0x77, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x63, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x63, 0x66,
	0x22, 0x8c, 0x01, 0x0a, 0x0e, 0x52, 0x61, 0x77, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x22,
	0x64, 0x0a, 0x12, 0x52, 0x61, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x63, 0x66, 0x22, 0x6f, 0x0a, 0x13, 0x52, 0x61, 0x77, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x25, 0x0a, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4b, 0x76, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x0d, 0x52, 0x61, 0x77, 0x50, 0x75,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x76, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x63, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x63, 0x66, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x74, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x17,
	0x0a, 0x07, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x66, 0x6f, 0x72, 0x43, 0x61, 0x73, 0x22, 0x59, 0x0a, 0x0e, 0x52, 0x61, 0x77, 0x50, 0x75,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0xa4, 0x01, 0x0a, 0x12, 0x52, 0x61, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x76, 0x72,
	0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4b,
	0x76, 0x50, 0x61, 0x69, 0x72, 0x52, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x63, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x63, 0x66, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x74, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x04, 0x74, 0x74, 0x6c, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x43, 0x61, 0x73, 0x22, 0x5e, 0x0a, 0x13, 0x52, 0x61, 0x77,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x70, 0x62,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x79, 0x0a, 0x10, 0x52, 0x61, 0x77,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x63,
	0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x63, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x66,
	0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x43, 0x61, 0x73, 0x22, 0x5c, 0x0a, 0x11, 0x52, 0x61, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x80, 0x01, 0x0a, 0x15, 0x52, 0x61, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x63, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x63, 0x66, 0x12, 0x17, 0x0a, 0x07,
	0x66, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66,
	0x6f, 0x72, 0x43, 0x61, 0x73, 0x22, 0x61, 0x0a, 0x16, 0x52, 0x61, 0x77, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x70, 0x62, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xcd, 0x01, 0x0a, 0x0e, 0x52, 0x61, 0x77,
	0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b,
	0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65,
	0x79, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6b, 0x65,
	0x79, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x63, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x22, 0x67, 0x0a, 0x0f, 0x52, 0x61, 0x77, 0x53,
	0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x21,
	0x0a, 0x03, 0x6b, 0x76, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6b, 0x76,
	0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4b, 0x76, 0x50, 0x61, 0x69, 0x72, 0x52, 0x03, 0x6b, 0x76,
	0x73, 0x22, 0x89, 0x01, 0x0a, 0x15, 0x52, 0x61, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b,
	0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x63, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x63, 0x66, 0x22, 0x61, 0x0a,
	0x16, 0x52, 0x61, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0b, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0xd0, 0x01, 0x0a, 0x13, 0x52, 0x61, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x76, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4b,
	0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x61, 0x63, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x6b, 0x65, 0x79, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x66, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x63, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x22, 0x6c, 0x0a, 0x14, 0x52, 0x61, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x21,
	0x0a, 0x03, 0x6b, 0x76, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6b, 0x76,
	0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4b, 0x76, 0x50, 0x61, 0x69, 0x72, 0x52, 0x03, 0x6b, 0x76,
	0x73, 0x22, 0x7d, 0x0a, 0x19, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79,
	0x22, 0x65, 0x0a, 0x1a, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x70, 0x62, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x60, 0x0a, 0x1b, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x54, 0x73, 0x22, 0x34, 0x0a, 0x1c, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x5d, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b,
	0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x54, 0x73, 0x22, 0x75,
	0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x27, 0x0a, 0x05,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x76,
	0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x5e, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c,
	0x6f, 0x63, 0x6b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6d, 0x61, 0x78, 0x54, 0x73, 0x22, 0x32, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c,
	0x6f, 0x63, 0x6b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x8f, 0x01, 0x0a, 0x17, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x63, 0x61, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x54, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x59, 0x0a, 0x18, 0x50,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x63, 0x61, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x27, 0x0a,
	0x05, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b,
	0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x12, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x09, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x08, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09,
	0x73, 0x70, 0x6c, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1a, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x72, 0x61, 0x77, 0x5f, 0x6b, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x52, 0x61, 0x77, 0x4b, 0x76, 0x22, 0xc4, 0x01, 0x0a, 0x13, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x26, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x84, 0x01, 0x0a,
	0x10, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63,
	0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x29, 0x0a, 0x06, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x76,
	0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x53, 0x0a, 0x13, 0x4d, 0x76, 0x63, 0x63, 0x47, 0x65,
	0x74, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x86, 0x01, 0x0a, 0x14,
	0x4d, 0x76, 0x63, 0x63, 0x47, 0x65, 0x74, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x25, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x76,
	0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4d, 0x76, 0x63, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x22, 0x60, 0x0a, 0x17, 0x4d, 0x76, 0x63, 0x63, 0x47, 0x65, 0x74, 0x42,
	0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x18, 0x4d, 0x76, 0x63, 0x63, 0x47,
	0x65, 0x74, 0x42, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b,
	0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4d, 0x76, 0x63, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x82, 0x07, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x36,
	0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x2f, 0x0a, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x50, 0x72, 0x69, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a,
	0x0f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62,
	0x2e, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x0e, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x24, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x6c,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6c, 0x6f,
	0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x4c, 0x6f, 0x67,
	0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x63, 0x61, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x52, 0x65, 0x61, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x0d, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x39,
	0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x6c, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x54, 0x61, 0x67, 0x12, 0x38, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x66, 0x75, 0x6c,
	0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6b, 0x76,
	0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x46, 0x75, 0x6c, 0x6c, 0x4f, 0x70,
	0x74, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x6b, 0x46, 0x75, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x41, 0x50, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x52, 0x0b, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x22, 0xdf, 0x02, 0x0a, 0x08, 0x4c,
	0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x74, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78,
	0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x78,
	0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63,
	0x70, 0x62, 0x2e, 0x4f, 0x70, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2b, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6c, 0x6f, 0x63,
	0x6b, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x75, 0x73, 0x65, 0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x41, 0x73, 0x79, 0x6e, 0x63,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d,
	0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0x97, 0x04, 0x0a,
	0x08, 0x4b, 0x65, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x76, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x72, 0x79, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x74, 0x72, 0x79, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66,
	0x6c, 0x69, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x76, 0x72,
	0x70, 0x63, 0x70, 0x62, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x12, 0x3a, 0x0a, 0x0d,
	0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x41, 0x6c,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x61, 0x6c, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x76, 0x72,
	0x70, 0x63, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x08, 0x64,
	0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x44, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x5f, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x54, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x52, 0x0f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x54, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x38, 0x0a,
	0x0d, 0x74, 0x78, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x54,
	0x78, 0x6e, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x0b, 0x74, 0x78, 0x6e, 0x4e,
	0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x48, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x5f, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x6f, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x73, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x52,
	0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x73, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67,
	0x65, 0x12, 0x43, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x76,
	0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x22, 0xa5, 0x01, 0x0a, 0x0d, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x54, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x73, 0x22, 0x20,
	0x0a, 0x0c, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x22, 0xa1, 0x01, 0x0a, 0x08, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x17, 0x0a,
	0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x4b, 0x65,
	0x79, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x64, 0x65,
	0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x35, 0x0a,
	0x0a, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x57, 0x61, 0x69,
	0x74, 0x46, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x77, 0x61, 0x69, 0x74, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x22, 0x92, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54,
	0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x11, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x54, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x69,
	0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x73, 0x22, 0x49, 0x0a, 0x0b, 0x54, 0x78, 0x6e,
	0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x4b, 0x65, 0x79, 0x22, 0x2f, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x73,
	0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x54, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6b, 0x76, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61,
	0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x54, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x29, 0x0a, 0x11, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x77, 0x61,
	0x69, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x2f, 0x0a, 0x14,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x57, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x2e, 0x0a,
	0x14, 0x6b, 0x76, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6b, 0x76, 0x52,
	0x65, 0x61, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x22, 0x5d, 0x0a,
	0x08, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x83, 0x01, 0x0a,
	0x0a, 0x53, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x27, 0x0a, 0x05, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x76, 0x72,
	0x70, 0x63, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x61,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x76, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xca, 0x03, 0x0a, 0x0c, 0x53, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x56, 0x32, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x72, 0x6f, 0x63, 0x6b, 0x73, 0x64, 0x62, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x72, 0x6f, 0x63, 0x6b, 0x73, 0x64, 0x62,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x6f, 0x63, 0x6b, 0x73, 0x64, 0x62, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x72, 0x6f, 0x63, 0x6b, 0x73, 0x64, 0x62, 0x4b, 0x65,
	0x79, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a,
	0x1d, 0x72, 0x6f, 0x63, 0x6b, 0x73, 0x64, 0x62, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x72, 0x6f, 0x63, 0x6b, 0x73, 0x64, 0x62, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x43, 0x61, 0x63, 0x68, 0x65, 0x48, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x37, 0x0a, 0x18, 0x72, 0x6f, 0x63, 0x6b, 0x73, 0x64, 0x62, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x15, 0x72, 0x6f, 0x63, 0x6b, 0x73, 0x64, 0x62, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x72, 0x6f, 0x63, 0x6b,
	0x73, 0x64, 0x62, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x72, 0x6f, 0x63, 0x6b, 0x73,
	0x64, 0x62, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x22,
	0x85, 0x01, 0x0a, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x34, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x76, 0x72,
	0x70, 0x63, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x0a, 0x73, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4a, 0x04, 0x08, 0x03, 0x10,
	0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x82, 0x01, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x56, 0x32, 0x12, 0x34, 0x0a, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x3b, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x76,
	0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70,
	0x62, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x32, 0x52, 0x0c,
	0x73, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x32, 0x22, 0x59, 0x0a, 0x06,
	0x4b, 0x76, 0x50, 0x61, 0x69, 0x72, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e,
	0x4b, 0x65, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x08, 0x4d, 0x75, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0b, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x52, 0x02, 0x6f,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x61, 0x73, 0x73,
	0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6b,
	0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfa, 0x01, 0x0a, 0x09,
	0x4d, 0x76, 0x63, 0x63, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70,
	0x62, 0x2e, 0x4f, 0x70, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x54, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x68, 0x61, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x68, 0x61, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x20, 0x0a, 0x0c, 0x68,
	0x61, 0x73, 0x5f, 0x67, 0x63, 0x5f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x47, 0x63, 0x46, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x63, 0x5f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x67, 0x63, 0x46, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x3c, 0x0a, 0x09, 0x4d, 0x76, 0x63, 0x63,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbf, 0x02, 0x0a, 0x08, 0x4d, 0x76, 0x63, 0x63, 0x4c,
	0x6f, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0b, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x22, 0x0a, 0x0d,
	0x66, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x74, 0x78, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x75,
	0x73, 0x65, 0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x5f, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x08, 0x4d, 0x76, 0x63,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4d, 0x76,
	0x63, 0x63, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x06,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6b,
	0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4d, 0x76, 0x63, 0x63, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x52, 0x06, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63,
	0x70, 0x62, 0x2e, 0x4d, 0x76, 0x63, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0x33, 0x0a, 0x07, 0x54, 0x78, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x78, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x74, 0x78,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x40, 0x0a, 0x08, 0x4b, 0x65, 0x79,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x22, 0xc1, 0x01, 0x0a, 0x0a,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x74, 0x65, 0x72, 0x6d, 0x12, 0x36, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52,
	0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x31, 0x0a, 0x0a,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x49, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x73, 0x61, 0x66, 0x65, 0x54, 0x73, 0x22, 0x53, 0x0a, 0x12, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2d, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74, 0x73, 0x22,
	0x3f, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74, 0x73,
	0x22, 0x44, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x61, 0x66, 0x65, 0x54, 0x53, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x76, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x6b, 0x65,
	0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x2e, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53,
	0x61, 0x66, 0x65, 0x54, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x73, 0x61, 0x66, 0x65, 0x54, 0x73, 0x22, 0x63, 0x0a, 0x13, 0x52, 0x61, 0x77, 0x47, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x54, 0x54, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x63,
	0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x63, 0x66, 0x22, 0x8e, 0x01, 0x0a, 0x14,
	0x52, 0x61, 0x77, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x54, 0x54, 0x4c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0xda, 0x01, 0x0a,
	0x0d, 0x52, 0x61, 0x77, 0x43, 0x41, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x6e,
	0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x66, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x63, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x22, 0xc8, 0x01, 0x0a, 0x0e, 0x52, 0x61,
	0x77, 0x43, 0x41, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x44, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x57,
	0x61, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x57, 0x61, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0b, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x30, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x57, 0x61, 0x69, 0x74,
	0x46, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x22, 0xc9, 0x01, 0x0a, 0x15, 0x52, 0x61, 0x77, 0x43, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b,
	0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x70, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x70, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x70, 0x72, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x70, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x29,
	0x0a, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x75, 0x0a,
	0x16, 0x52, 0x61, 0x77, 0x43, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0b, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xa5, 0x01, 0x0a, 0x12, 0x52, 0x61, 0x77, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b,
	0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6b, 0x76, 0x72,
	0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0xb8, 0x01, 0x0a,
	0x13, 0x52, 0x61, 0x77, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x6b, 0x76, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4b, 0x76, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x2a, 0x27, 0x0a, 0x0a, 0x41, 0x50, 0x49, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x06, 0x0a, 0x02, 0x56, 0x31, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x56, 0x31, 0x54, 0x54, 0x4c, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x56, 0x32, 0x10, 0x02,
	0x2a, 0x2b, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x12, 0x0a,
	0x0a, 0x06, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x6f,
	0x77, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x69, 0x67, 0x68, 0x10, 0x02, 0x2a, 0x20, 0x0a,
	0x0e, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x06, 0x0a, 0x02, 0x53, 0x49, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x52, 0x43, 0x10, 0x01, 0x2a,
	0x56, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x6b, 0x46, 0x75, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x12, 0x14,
	0x0a, 0x10, 0x4e, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4f, 0x6e, 0x46, 0x75,
	0x6c, 0x6c, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4f,
	0x6e, 0x41, 0x6c, 0x6d, 0x6f, 0x73, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4f, 0x6e, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0x02, 0x2a, 0x63, 0x0a, 0x02, 0x4f, 0x70, 0x12, 0x07, 0x0a,
	0x03, 0x50, 0x75, 0x74, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x65, 0x6c, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x4c, 0x6f, 0x63, 0x6b, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x6f, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x65, 0x73, 0x73, 0x69, 0x6d, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x4c, 0x6f, 0x63, 0x6b, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0x06, 0x2a, 0x2e, 0x0a, 0x09,
	0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x02, 0x2a, 0x9b, 0x01, 0x0a,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x54, 0x4c, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14,
	0x4c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x54, 0x53, 0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x10, 0x03, 0x12, 0x20, 0x0a,
	0x1c, 0x54, 0x54, 0x4c, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x50, 0x65, 0x73, 0x73, 0x69, 0x6d,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x04, 0x12,
	0x19, 0x0a, 0x15, 0x4c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x44,
	0x6f, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x10, 0x05, 0x2a, 0x25, 0x0a, 0x07, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x4f, 0x70, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6f, 0x70, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10,
	0x01, 0x2a, 0x22, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x72, 0x63, 0x36, 0x34, 0x5f,
	0x58, 0x6f, 0x72, 0x10, 0x00, 0x42, 0x56, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x2e, 0x74, 0x69, 0x6b,
	0x76, 0x2e, 0x6b, 0x76, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x70, 0x2f, 0x6b, 0x76,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6b, 0x69, 0x74, 0x65,
	0x78, 0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x6b, 0x76, 0x72, 0x70, 0x63, 0x70, 0x62, 0xc8, 0xe2, 0x1e,
	0x01, 0xe0, 0xe2, 0x1e, 0x01, 0xd0, 0xe2, 0x1e, 0x01, 0xd8, 0xa8, 0x08, 0x01, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kvrpcpb_proto_rawDescOnce sync.Once
	file_kvrpcpb_proto_rawDescData = file_kvrpcpb_proto_rawDesc
)

func file_kvrpcpb_proto_rawDescGZIP() []byte {
	file_kvrpcpb_proto_rawDescOnce.Do(func() {
		file_kvrpcpb_proto_rawDescData = protoimpl.X.CompressGZIP(file_kvrpcpb_proto_rawDescData)
	})
	return file_kvrpcpb_proto_rawDescData
}

var file_kvrpcpb_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_kvrpcpb_proto_msgTypes = make([]protoimpl.MessageInfo, 110)
var file_kvrpcpb_proto_goTypes = []interface{}{
	(APIVersion)(0),                      // 0: kvrpcpb.APIVersion
	(CommandPri)(0),                      // 1: kvrpcpb.CommandPri
	(IsolationLevel)(0),                  // 2: kvrpcpb.IsolationLevel
	(DiskFullOpt)(0),                     // 3: kvrpcpb.DiskFullOpt
	(Op)(0),                              // 4: kvrpcpb.Op
	(Assertion)(0),                       // 5: kvrpcpb.Assertion
	(Action)(0),                          // 6: kvrpcpb.Action
	(ExtraOp)(0),                         // 7: kvrpcpb.ExtraOp
	(ChecksumAlgorithm)(0),               // 8: kvrpcpb.ChecksumAlgorithm
	(*GetRequest)(nil),                   // 9: kvrpcpb.GetRequest
	(*GetResponse)(nil),                  // 10: kvrpcpb.GetResponse
	(*ScanRequest)(nil),                  // 11: kvrpcpb.ScanRequest
	(*ScanResponse)(nil),                 // 12: kvrpcpb.ScanResponse
	(*PrewriteRequest)(nil),              // 13: kvrpcpb.PrewriteRequest
	(*PrewriteResponse)(nil),             // 14: kvrpcpb.PrewriteResponse
	(*PessimisticLockRequest)(nil),       // 15: kvrpcpb.PessimisticLockRequest
	(*PessimisticLockResponse)(nil),      // 16: kvrpcpb.PessimisticLockResponse
	(*PessimisticRollbackRequest)(nil),   // 17: kvrpcpb.PessimisticRollbackRequest
	(*PessimisticRollbackResponse)(nil),  // 18: kvrpcpb.PessimisticRollbackResponse
	(*TxnHeartBeatRequest)(nil),          // 19: kvrpcpb.TxnHeartBeatRequest
	(*TxnHeartBeatResponse)(nil),         // 20: kvrpcpb.TxnHeartBeatResponse
	(*CheckTxnStatusRequest)(nil),        // 21: kvrpcpb.CheckTxnStatusRequest
	(*CheckTxnStatusResponse)(nil),       // 22: kvrpcpb.CheckTxnStatusResponse
	(*CheckSecondaryLocksRequest)(nil),   // 23: kvrpcpb.CheckSecondaryLocksRequest
	(*CheckSecondaryLocksResponse)(nil),  // 24: kvrpcpb.CheckSecondaryLocksResponse
	(*CommitRequest)(nil),                // 25: kvrpcpb.CommitRequest
	(*CommitResponse)(nil),               // 26: kvrpcpb.CommitResponse
	(*ImportRequest)(nil),                // 27: kvrpcpb.ImportRequest
	(*ImportResponse)(nil),               // 28: kvrpcpb.ImportResponse
	(*CleanupRequest)(nil),               // 29: kvrpcpb.CleanupRequest
	(*CleanupResponse)(nil),              // 30: kvrpcpb.CleanupResponse
	(*BatchGetRequest)(nil),              // 31: kvrpcpb.BatchGetRequest
	(*BatchGetResponse)(nil),             // 32: kvrpcpb.BatchGetResponse
	(*BatchRollbackRequest)(nil),         // 33: kvrpcpb.BatchRollbackRequest
	(*BatchRollbackResponse)(nil),        // 34: kvrpcpb.BatchRollbackResponse
	(*ScanLockRequest)(nil),              // 35: kvrpcpb.ScanLockRequest
	(*ScanLockResponse)(nil),             // 36: kvrpcpb.ScanLockResponse
	(*ResolveLockRequest)(nil),           // 37: kvrpcpb.ResolveLockRequest
	(*ResolveLockResponse)(nil),          // 38: kvrpcpb.ResolveLockResponse
	(*GCRequest)(nil),                    // 39: kvrpcpb.GCRequest
	(*GCResponse)(nil),                   // 40: kvrpcpb.GCResponse
	(*DeleteRangeRequest)(nil),           // 41: kvrpcpb.DeleteRangeRequest
	(*DeleteRangeResponse)(nil),          // 42: kvrpcpb.DeleteRangeResponse
	(*RawGetRequest)(nil),                // 43: kvrpcpb.RawGetRequest
	(*RawGetResponse)(nil),               // 44: kvrpcpb.RawGetResponse
	(*RawBatchGetRequest)(nil),           // 45: kvrpcpb.RawBatchGetRequest
	(*RawBatchGetResponse)(nil),          // 46: kvrpcpb.RawBatchGetResponse
	(*RawPutRequest)(nil),                // 47: kvrpcpb.RawPutRequest
	(*RawPutResponse)(nil),               // 48: kvrpcpb.RawPutResponse
	(*RawBatchPutRequest)(nil),           // 49: kvrpcpb.RawBatchPutRequest
	(*RawBatchPutResponse)(nil),          // 50: kvrpcpb.RawBatchPutResponse
	(*RawDeleteRequest)(nil),             // 51: kvrpcpb.RawDeleteRequest
	(*RawDeleteResponse)(nil),            // 52: kvrpcpb.RawDeleteResponse
	(*RawBatchDeleteRequest)(nil),        // 53: kvrpcpb.RawBatchDeleteRequest
	(*RawBatchDeleteResponse)(nil),       // 54: kvrpcpb.RawBatchDeleteResponse
	(*RawScanRequest)(nil),               // 55: kvrpcpb.RawScanRequest
	(*RawScanResponse)(nil),              // 56: kvrpcpb.RawScanResponse
	(*RawDeleteRangeRequest)(nil),        // 57: kvrpcpb.RawDeleteRangeRequest
	(*RawDeleteRangeResponse)(nil),       // 58: kvrpcpb.RawDeleteRangeResponse
	(*RawBatchScanRequest)(nil),          // 59: kvrpcpb.RawBatchScanRequest
	(*RawBatchScanResponse)(nil),         // 60: kvrpcpb.RawBatchScanResponse
	(*UnsafeDestroyRangeRequest)(nil),    // 61: kvrpcpb.UnsafeDestroyRangeRequest
	(*UnsafeDestroyRangeResponse)(nil),   // 62: kvrpcpb.UnsafeDestroyRangeResponse
	(*RegisterLockObserverRequest)(nil),  // 63: kvrpcpb.RegisterLockObserverRequest
	(*RegisterLockObserverResponse)(nil), // 64: kvrpcpb.RegisterLockObserverResponse
	(*CheckLockObserverRequest)(nil),     // 65: kvrpcpb.CheckLockObserverRequest
	(*CheckLockObserverResponse)(nil),    // 66: kvrpcpb.CheckLockObserverResponse
	(*RemoveLockObserverRequest)(nil),    // 67: kvrpcpb.RemoveLockObserverRequest
	(*RemoveLockObserverResponse)(nil),   // 68: kvrpcpb.RemoveLockObserverResponse
	(*PhysicalScanLockRequest)(nil),      // 69: kvrpcpb.PhysicalScanLockRequest
	(*PhysicalScanLockResponse)(nil),     // 70: kvrpcpb.PhysicalScanLockResponse
	(*SplitRegionRequest)(nil),           // 71: kvrpcpb.SplitRegionRequest
	(*SplitRegionResponse)(nil),          // 72: kvrpcpb.SplitRegionResponse
	(*ReadIndexRequest)(nil),             // 73: kvrpcpb.ReadIndexRequest
	(*ReadIndexResponse)(nil),            // 74: kvrpcpb.ReadIndexResponse
	(*MvccGetByKeyRequest)(nil),          // 75: kvrpcpb.MvccGetByKeyRequest
	(*MvccGetByKeyResponse)(nil),         // 76: kvrpcpb.MvccGetByKeyResponse
	(*MvccGetByStartTsRequest)(nil),      // 77: kvrpcpb.MvccGetByStartTsRequest
	(*MvccGetByStartTsResponse)(nil),     // 78: kvrpcpb.MvccGetByStartTsResponse
	(*Context)(nil),                      // 79: kvrpcpb.Context
	(*LockInfo)(nil),                     // 80: kvrpcpb.LockInfo
	(*KeyError)(nil),                     // 81: kvrpcpb.KeyError
	(*WriteConflict)(nil),                // 82: kvrpcpb.WriteConflict
	(*AlreadyExist)(nil),                 // 83: kvrpcpb.AlreadyExist
	(*Deadlock)(nil),                     // 84: kvrpcpb.Deadlock
	(*CommitTsExpired)(nil),              // 85: kvrpcpb.CommitTsExpired
	(*TxnNotFound)(nil),                  // 86: kvrpcpb.TxnNotFound
	(*CommitTsTooLarge)(nil),             // 87: kvrpcpb.CommitTsTooLarge
	(*AssertionFailed)(nil),              // 88: kvrpcpb.AssertionFailed
	(*TimeDetail)(nil),                   // 89: kvrpcpb.TimeDetail
	(*ScanInfo)(nil),                     // 90: kvrpcpb.ScanInfo
	(*ScanDetail)(nil),                   // 91: kvrpcpb.ScanDetail
	(*ScanDetailV2)(nil),                 // 92: kvrpcpb.ScanDetailV2
	(*ExecDetails)(nil),                  // 93: kvrpcpb.ExecDetails
	(*ExecDetailsV2)(nil),                // 94: kvrpcpb.ExecDetailsV2
	(*KvPair)(nil),                       // 95: kvrpcpb.KvPair
	(*Mutation)(nil),                     // 96: kvrpcpb.Mutation
	(*MvccWrite)(nil),                    // 97: kvrpcpb.MvccWrite
	(*MvccValue)(nil),                    // 98: kvrpcpb.MvccValue
	(*MvccLock)(nil),                     // 99: kvrpcpb.MvccLock
	(*MvccInfo)(nil),                     // 100: kvrpcpb.MvccInfo
	(*TxnInfo)(nil),                      // 101: kvrpcpb.TxnInfo
	(*KeyRange)(nil),                     // 102: kvrpcpb.KeyRange
	(*LeaderInfo)(nil),                   // 103: kvrpcpb.LeaderInfo
	(*ReadState)(nil),                    // 104: kvrpcpb.ReadState
	(*CheckLeaderRequest)(nil),           // 105: kvrpcpb.CheckLeaderRequest
	(*CheckLeaderResponse)(nil),          // 106: kvrpcpb.CheckLeaderResponse
	(*StoreSafeTSRequest)(nil),           // 107: kvrpcpb.StoreSafeTSRequest
	(*StoreSafeTSResponse)(nil),          // 108: kvrpcpb.StoreSafeTSResponse
	(*RawGetKeyTTLRequest)(nil),          // 109: kvrpcpb.RawGetKeyTTLRequest
	(*RawGetKeyTTLResponse)(nil),         // 110: kvrpcpb.RawGetKeyTTLResponse
	(*RawCASRequest)(nil),                // 111: kvrpcpb.RawCASRequest
	(*RawCASResponse)(nil),               // 112: kvrpcpb.RawCASResponse
	(*GetLockWaitInfoRequest)(nil),       // 113: kvrpcpb.GetLockWaitInfoRequest
	(*GetLockWaitInfoResponse)(nil),      // 114: kvrpcpb.GetLockWaitInfoResponse
	(*RawCoprocessorRequest)(nil),        // 115: kvrpcpb.RawCoprocessorRequest
	(*RawCoprocessorResponse)(nil),       // 116: kvrpcpb.RawCoprocessorResponse
	(*RawChecksumRequest)(nil),           // 117: kvrpcpb.RawChecksumRequest
	(*RawChecksumResponse)(nil),          // 118: kvrpcpb.RawChecksumResponse
	(*errorpb.Error)(nil),                // 119: errorpb.Error
	(*metapb.Region)(nil),                // 120: metapb.Region
	(*metapb.RegionEpoch)(nil),           // 121: metapb.RegionEpoch
	(*metapb.Peer)(nil),                  // 122: metapb.Peer
	(*deadlock.WaitForEntry)(nil),        // 123: deadlock.WaitForEntry
}
var file_kvrpcpb_proto_depIdxs = []int32{
	79,  // 0: kvrpcpb.GetRequest.context:type_name -> kvrpcpb.Context
	119, // 1: kvrpcpb.GetResponse.region_error:type_name -> errorpb.Error
	81,  // 2: kvrpcpb.GetResponse.error:type_name -> kvrpcpb.KeyError
	94,  // 3: kvrpcpb.GetResponse.exec_details_v2:type_name -> kvrpcpb.ExecDetailsV2
	79,  // 4: kvrpcpb.ScanRequest.context:type_name -> kvrpcpb.Context
	119, // 5: kvrpcpb.ScanResponse.region_error:type_name -> errorpb.Error
	95,  // 6: kvrpcpb.ScanResponse.pairs:type_name -> kvrpcpb.KvPair
	81,  // 7: kvrpcpb.ScanResponse.error:type_name -> kvrpcpb.KeyError
	79,  // 8: kvrpcpb.PrewriteRequest.context:type_name -> kvrpcpb.Context
	96,  // 9: kvrpcpb.PrewriteRequest.mutations:type_name -> kvrpcpb.Mutation
	119, // 10: kvrpcpb.PrewriteResponse.region_error:type_name -> errorpb.Error
	81,  // 11: kvrpcpb.PrewriteResponse.errors:type_name -> kvrpcpb.KeyError
	79,  // 12: kvrpcpb.PessimisticLockRequest.context:type_name -> kvrpcpb.Context
	96,  // 13: kvrpcpb.PessimisticLockRequest.mutations:type_name -> kvrpcpb.Mutation
	119, // 14: kvrpcpb.PessimisticLockResponse.region_error:type_name -> errorpb.Error
	81,  // 15: kvrpcpb.PessimisticLockResponse.errors:type_name -> kvrpcpb.KeyError
	79,  // 16: kvrpcpb.PessimisticRollbackRequest.context:type_name -> kvrpcpb.Context
	119, // 17: kvrpcpb.PessimisticRollbackResponse.region_error:type_name -> errorpb.Error
	81,  // 18: kvrpcpb.PessimisticRollbackResponse.errors:type_name -> kvrpcpb.KeyError
	79,  // 19: kvrpcpb.TxnHeartBeatRequest.context:type_name -> kvrpcpb.Context
	119, // 20: kvrpcpb.TxnHeartBeatResponse.region_error:type_name -> errorpb.Error
	81,  // 21: kvrpcpb.TxnHeartBeatResponse.error:type_name -> kvrpcpb.KeyError
	79,  // 22: kvrpcpb.CheckTxnStatusRequest.context:type_name -> kvrpcpb.Context
	119, // 23: kvrpcpb.CheckTxnStatusResponse.region_error:type_name -> errorpb.Error
	81,  // 24: kvrpcpb.CheckTxnStatusResponse.error:type_name -> kvrpcpb.KeyError
	6,   // 25: kvrpcpb.CheckTxnStatusResponse.action:type_name -> kvrpcpb.Action
	80,  // 26: kvrpcpb.CheckTxnStatusResponse.lock_info:type_name -> kvrpcpb.LockInfo
	79,  // 27: kvrpcpb.CheckSecondaryLocksRequest.context:type_name -> kvrpcpb.Context
	119, // 28: kvrpcpb.CheckSecondaryLocksResponse.region_error:type_name -> errorpb.Error
	81,  // 29: kvrpcpb.CheckSecondaryLocksResponse.error:type_name -> kvrpcpb.KeyError
	80,  // 30: kvrpcpb.CheckSecondaryLocksResponse.locks:type_name -> kvrpcpb.LockInfo
	79,  // 31: kvrpcpb.CommitRequest.context:type_name -> kvrpcpb.Context
	119, // 32: kvrpcpb.CommitResponse.region_error:type_name -> errorpb.Error
	81,  // 33: kvrpcpb.CommitResponse.error:type_name -> kvrpcpb.KeyError
	96,  // 34: kvrpcpb.ImportRequest.mutations:type_name -> kvrpcpb.Mutation
	119, // 35: kvrpcpb.ImportResponse.region_error:type_name -> errorpb.Error
	79,  // 36: kvrpcpb.CleanupRequest.context:type_name -> kvrpcpb.Context
	119, // 37: kvrpcpb.CleanupResponse.region_error:type_name -> errorpb.Error
	81,  // 38: kvrpcpb.CleanupResponse.error:type_name -> kvrpcpb.KeyError
	79,  // 39: kvrpcpb.BatchGetRequest.context:type_name -> kvrpcpb.Context
	119, // 40: kvrpcpb.BatchGetResponse.region_error:type_name -> errorpb.Error
	95,  // 41: kvrpcpb.BatchGetResponse.pairs:type_name -> kvrpcpb.KvPair
	94,  // 42: kvrpcpb.BatchGetResponse.exec_details_v2:type_name -> kvrpcpb.ExecDetailsV2
	81,  // 43: kvrpcpb.BatchGetResponse.error:type_name -> kvrpcpb.KeyError
	79,  // 44: kvrpcpb.BatchRollbackRequest.context:type_name -> kvrpcpb.Context
	119, // 45: kvrpcpb.BatchRollbackResponse.region_error:type_name -> errorpb.Error
	81,  // 46: kvrpcpb.BatchRollbackResponse.error:type_name -> kvrpcpb.KeyError
	79,  // 47: kvrpcpb.ScanLockRequest.context:type_name -> kvrpcpb.Context
	119, // 48: kvrpcpb.ScanLockResponse.region_error:type_name -> errorpb.Error
	81,  // 49: kvrpcpb.ScanLockResponse.error:type_name -> kvrpcpb.KeyError
	80,  // 50: kvrpcpb.ScanLockResponse.locks:type_name -> kvrpcpb.LockInfo
	79,  // 51: kvrpcpb.ResolveLockRequest.context:type_name -> kvrpcpb.Context
	101, // 52: kvrpcpb.ResolveLockRequest.txn_infos:type_name -> kvrpcpb.TxnInfo
	119, // 53: kvrpcpb.ResolveLockResponse.region_error:type_name -> errorpb.Error
	81,  // 54: kvrpcpb.ResolveLockResponse.error:type_name -> kvrpcpb.KeyError
	79,  // 55: kvrpcpb.GCRequest.context:type_name -> kvrpcpb.Context
	119, // 56: kvrpcpb.GCResponse.region_error:type_name -> errorpb.Error
	81,  // 57: kvrpcpb.GCResponse.error:type_name -> kvrpcpb.KeyError
	79,  // 58: kvrpcpb.DeleteRangeRequest.context:type_name -> kvrpcpb.Context
	119, // 59: kvrpcpb.DeleteRangeResponse.region_error:type_name -> errorpb.Error
	79,  // 60: kvrpcpb.RawGetRequest.context:type_name -> kvrpcpb.Context
	119, // 61: kvrpcpb.RawGetResponse.region_error:type_name -> errorpb.Error
	79,  // 62: kvrpcpb.RawBatchGetRequest.context:type_name -> kvrpcpb.Context
	119, // 63: kvrpcpb.RawBatchGetResponse.region_error:type_name -> errorpb.Error
	95,  // 64: kvrpcpb.RawBatchGetResponse.pairs:type_name -> kvrpcpb.KvPair
	79,  // 65: kvrpcpb.RawPutRequest.context:type_name -> kvrpcpb.Context
	119, // 66: kvrpcpb.RawPutResponse.region_error:type_name -> errorpb.Error
	79,  // 67: kvrpcpb.RawBatchPutRequest.context:type_name -> kvrpcpb.Context
	95,  // 68: kvrpcpb.RawBatchPutRequest.pairs:type_name -> kvrpcpb.KvPair
	119, // 69: kvrpcpb.RawBatchPutResponse.region_error:type_name -> errorpb.Error
	79,  // 70: kvrpcpb.RawDeleteRequest.context:type_name -> kvrpcpb.Context
	119, // 71: kvrpcpb.RawDeleteResponse.region_error:type_name -> errorpb.Error
	79,  // 72: kvrpcpb.RawBatchDeleteRequest.context:type_name -> kvrpcpb.Context
	119, // 73: kvrpcpb.RawBatchDeleteResponse.region_error:type_name -> errorpb.Error
	79,  // 74: kvrpcpb.RawScanRequest.context:type_name -> kvrpcpb.Context
	119, // 75: kvrpcpb.RawScanResponse.region_error:type_name -> errorpb.Error
	95,  // 76: kvrpcpb.RawScanResponse.kvs:type_name -> kvrpcpb.KvPair
	79,  // 77: kvrpcpb.RawDeleteRangeRequest.context:type_name -> kvrpcpb.Context
	119, // 78: kvrpcpb.RawDeleteRangeResponse.region_error:type_name -> errorpb.Error
	79,  // 79: kvrpcpb.RawBatchScanRequest.context:type_name -> kvrpcpb.Context
	102, // 80: kvrpcpb.RawBatchScanRequest.ranges:type_name -> kvrpcpb.KeyRange
	119, // 81: kvrpcpb.RawBatchScanResponse.region_error:type_name -> errorpb.Error
	95,  // 82: kvrpcpb.RawBatchScanResponse.kvs:type_name -> kvrpcpb.KvPair
	79,  // 83: kvrpcpb.UnsafeDestroyRangeRequest.context:type_name -> kvrpcpb.Context
	119, // 84: kvrpcpb.UnsafeDestroyRangeResponse.region_error:type_name -> errorpb.Error
	79,  // 85: kvrpcpb.RegisterLockObserverRequest.context:type_name -> kvrpcpb.Context
	79,  // 86: kvrpcpb.CheckLockObserverRequest.context:type_name -> kvrpcpb.Context
	80,  // 87: kvrpcpb.CheckLockObserverResponse.locks:type_name -> kvrpcpb.LockInfo
	79,  // 88: kvrpcpb.RemoveLockObserverRequest.context:type_name -> kvrpcpb.Context
	79,  // 89: kvrpcpb.PhysicalScanLockRequest.context:type_name -> kvrpcpb.Context
	80,  // 90: kvrpcpb.PhysicalScanLockResponse.locks:type_name -> kvrpcpb.LockInfo
	79,  // 91: kvrpcpb.SplitRegionRequest.context:type_name -> kvrpcpb.Context
	119, // 92: kvrpcpb.SplitRegionResponse.region_error:type_name -> errorpb.Error
	120, // 93: kvrpcpb.SplitRegionResponse.left:type_name -> metapb.Region
	120, // 94: kvrpcpb.SplitRegionResponse.right:type_name -> metapb.Region
	120, // 95: kvrpcpb.SplitRegionResponse.regions:type_name -> metapb.Region
	79,  // 96: kvrpcpb.ReadIndexRequest.context:type_name -> kvrpcpb.Context
	102, // 97: kvrpcpb.ReadIndexRequest.ranges:type_name -> kvrpcpb.KeyRange
	119, // 98: kvrpcpb.ReadIndexResponse.region_error:type_name -> errorpb.Error
	80,  // 99: kvrpcpb.ReadIndexResponse.locked:type_name -> kvrpcpb.LockInfo
	79,  // 100: kvrpcpb.MvccGetByKeyRequest.context:type_name -> kvrpcpb.Context
	119, // 101: kvrpcpb.MvccGetByKeyResponse.region_error:type_name -> errorpb.Error
	100, // 102: kvrpcpb.MvccGetByKeyResponse.info:type_name -> kvrpcpb.MvccInfo
	79,  // 103: kvrpcpb.MvccGetByStartTsRequest.context:type_name -> kvrpcpb.Context
	119, // 104: kvrpcpb.MvccGetByStartTsResponse.region_error:type_name -> errorpb.Error
	100, // 105: kvrpcpb.MvccGetByStartTsResponse.info:type_name -> kvrpcpb.MvccInfo
	121, // 106: kvrpcpb.Context.region_epoch:type_name -> metapb.RegionEpoch
	122, // 107: kvrpcpb.Context.peer:type_name -> metapb.Peer
	1,   // 108: kvrpcpb.Context.priority:type_name -> kvrpcpb.CommandPri
	2,   // 109: kvrpcpb.Context.isolation_level:type_name -> kvrpcpb.IsolationLevel
	3,   // 110: kvrpcpb.Context.disk_full_opt:type_name -> kvrpcpb.DiskFullOpt
	0,   // 111: kvrpcpb.Context.api_version:type_name -> kvrpcpb.APIVersion
	4,   // 112: kvrpcpb.LockInfo.lock_type:type_name -> kvrpcpb.Op
	80,  // 113: kvrpcpb.KeyError.locked:type_name -> kvrpcpb.LockInfo
	82,  // 114: kvrpcpb.KeyError.conflict:type_name -> kvrpcpb.WriteConflict
	83,  // 115: kvrpcpb.KeyError.already_exist:type_name -> kvrpcpb.AlreadyExist
	84,  // 116: kvrpcpb.KeyError.deadlock:type_name -> kvrpcpb.Deadlock
	85,  // 117: kvrpcpb.KeyError.commit_ts_expired:type_name -> kvrpcpb.CommitTsExpired
	86,  // 118: kvrpcpb.KeyError.txn_not_found:type_name -> kvrpcpb.TxnNotFound
	87,  // 119: kvrpcpb.KeyError.commit_ts_too_large:type_name -> kvrpcpb.CommitTsTooLarge
	88,  // 120: kvrpcpb.KeyError.assertion_failed:type_name -> kvrpcpb.AssertionFailed
	123, // 121: kvrpcpb.Deadlock.wait_chain:type_name -> deadlock.WaitForEntry
	5,   // 122: kvrpcpb.AssertionFailed.assertion:type_name -> kvrpcpb.Assertion
	90,  // 123: kvrpcpb.ScanDetail.write:type_name -> kvrpcpb.ScanInfo
	90,  // 124: kvrpcpb.ScanDetail.lock:type_name -> kvrpcpb.ScanInfo
	90,  // 125: kvrpcpb.ScanDetail.data:type_name -> kvrpcpb.ScanInfo
	89,  // 126: kvrpcpb.ExecDetails.time_detail:type_name -> kvrpcpb.TimeDetail
	91,  // 127: kvrpcpb.ExecDetails.scan_detail:type_name -> kvrpcpb.ScanDetail
	89,  // 128: kvrpcpb.ExecDetailsV2.time_detail:type_name -> kvrpcpb.TimeDetail
	92,  // 129: kvrpcpb.ExecDetailsV2.scan_detail_v2:type_name -> kvrpcpb.ScanDetailV2
	81,  // 130: kvrpcpb.KvPair.error:type_name -> kvrpcpb.KeyError
	4,   // 131: kvrpcpb.Mutation.op:type_name -> kvrpcpb.Op
	5,   // 132: kvrpcpb.Mutation.assertion:type_name -> kvrpcpb.Assertion
	4,   // 133: kvrpcpb.MvccWrite.type:type_name -> kvrpcpb.Op
	4,   // 134: kvrpcpb.MvccLock.type:type_name -> kvrpcpb.Op
	99,  // 135: kvrpcpb.MvccInfo.lock:type_name -> kvrpcpb.MvccLock
	97,  // 136: kvrpcpb.MvccInfo.writes:type_name -> kvrpcpb.MvccWrite
	98,  // 137: kvrpcpb.MvccInfo.values:type_name -> kvrpcpb.MvccValue
	121, // 138: kvrpcpb.LeaderInfo.region_epoch:type_name -> metapb.RegionEpoch
	104, // 139: kvrpcpb.LeaderInfo.read_state:type_name -> kvrpcpb.ReadState
	103, // 140: kvrpcpb.CheckLeaderRequest.regions:type_name -> kvrpcpb.LeaderInfo
	102, // 141: kvrpcpb.StoreSafeTSRequest.key_range:type_name -> kvrpcpb.KeyRange
	79,  // 142: kvrpcpb.RawGetKeyTTLRequest.context:type_name -> kvrpcpb.Context
	119, // 143: kvrpcpb.RawGetKeyTTLResponse.region_error:type_name -> errorpb.Error
	79,  // 144: kvrpcpb.RawCASRequest.context:type_name -> kvrpcpb.Context
	119, // 145: kvrpcpb.RawCASResponse.region_error:type_name -> errorpb.Error
	79,  // 146: kvrpcpb.GetLockWaitInfoRequest.context:type_name -> kvrpcpb.Context
	119, // 147: kvrpcpb.GetLockWaitInfoResponse.region_error:type_name -> errorpb.Error
	123, // 148: kvrpcpb.GetLockWaitInfoResponse.entries:type_name -> deadlock.WaitForEntry
	79,  // 149: kvrpcpb.RawCoprocessorRequest.context:type_name -> kvrpcpb.Context
	102, // 150: kvrpcpb.RawCoprocessorRequest.ranges:type_name -> kvrpcpb.KeyRange
	119, // 151: kvrpcpb.RawCoprocessorResponse.region_error:type_name -> errorpb.Error
	79,  // 152: kvrpcpb.RawChecksumRequest.context:type_name -> kvrpcpb.Context
	8,   // 153: kvrpcpb.RawChecksumRequest.algorithm:type_name -> kvrpcpb.ChecksumAlgorithm
	102, // 154: kvrpcpb.RawChecksumRequest.ranges:type_name -> kvrpcpb.KeyRange
	119, // 155: kvrpcpb.RawChecksumResponse.region_error:type_name -> errorpb.Error
	156, // [156:156] is the sub-list for method output_type
	156, // [156:156] is the sub-list for method input_type
	156, // [156:156] is the sub-list for extension type_name
	156, // [156:156] is the sub-list for extension extendee
	0,   // [0:156] is the sub-list for field type_name
}

func init() { file_kvrpcpb_proto_init() }
func file_kvrpcpb_proto_init() {
	if File_kvrpcpb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kvrpcpb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrewriteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrewriteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PessimisticLockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PessimisticLockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PessimisticRollbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PessimisticRollbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxnHeartBeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxnHeartBeatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTxnStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTxnStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSecondaryLocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSecondaryLocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchRollbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchRollbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanLockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanLockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveLockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveLockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawBatchGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawBatchGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawPutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawPutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawBatchPutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawBatchPutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawBatchDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawBatchDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawScanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawScanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawDeleteRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawDeleteRangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawBatchScanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawBatchScanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsafeDestroyRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsafeDestroyRangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterLockObserverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterLockObserverResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckLockObserverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckLockObserverResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveLockObserverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveLockObserverResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhysicalScanLockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhysicalScanLockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitRegionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitRegionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MvccGetByKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MvccGetByKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MvccGetByStartTsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MvccGetByStartTsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Context); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteConflict); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlreadyExist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deadlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitTsExpired); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxnNotFound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitTsTooLarge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssertionFailed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanDetailV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecDetailsV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KvPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mutation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MvccWrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MvccValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MvccLock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MvccInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxnInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckLeaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckLeaderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreSafeTSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreSafeTSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawGetKeyTTLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawGetKeyTTLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawCASRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawCASResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLockWaitInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLockWaitInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawCoprocessorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawCoprocessorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawChecksumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvrpcpb_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawChecksumResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kvrpcpb_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   110,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kvrpcpb_proto_goTypes,
		DependencyIndexes: file_kvrpcpb_proto_depIdxs,
		EnumInfos:         file_kvrpcpb_proto_enumTypes,
		MessageInfos:      file_kvrpcpb_proto_msgTypes,
	}.Build()
	File_kvrpcpb_proto = out.File
	file_kvrpcpb_proto_rawDesc = nil
	file_kvrpcpb_proto_goTypes = nil
	file_kvrpcpb_proto_depIdxs = nil
}

var _ context.Context

// Code generated by Kitex v0.1.2. DO NOT EDIT.
